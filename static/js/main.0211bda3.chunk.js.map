{"version":3,"sources":["features/cards/cards.slice.ts","constants/card-constants.ts","CardTokens.tsx","features/cards/cards.selectors.ts","CardTokensContainer.tsx","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.async-thunks.ts","store/global.actions.ts","TopLayer.tsx","CardStackCardSelector.tsx","CardStackCardSelectorContainer.tsx","Counter.tsx","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["StatusTokenType","CounterTokenType","cardConstants","CardTokens","props","damageImg","threatImg","genericImg","unmounted","state","imagesLoaded","damage","threat","generic","Image","onload","setState","card","counterTokens","src","process","prevProps","prevState","this","damageX","x","naturalWidth","damageY","y","showDamage","damageToken","width","height","naturalHeight","fillPatternImage","id","damageText","text","fill","align","verticalAlign","fontSize","threatX","threatY","showThreat","threatToken","threatText","genericX","genericY","showGeneric","Component","getCards","cards","getCardMapById","createSelector","reduce","map","shouldShowPreview","previewCard","every","dragging","getPanMode","panMode","CardTokensContainer","connect","HORIZONTAL_TYPE_CODES","Card","img","stunnedImg","confusedImg","toughImg","renderAnimated","renderAnimatedCard","heightToUse","widthToUse","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternScaleX","imageLoaded","fillPatternScaleY","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","renderUnanimatedCard","scale","getScale","fillPatternRotation","shouldRenderImageHorizontal","typeCode","cardStackOffset","cardStack","numCardsInStack","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","getTokenInSlot","confused","tough","event","dx","target","dy","cancelBubble","handleHover","handleHoverLeave","localStorage","getItem","prevImgUrl","imgUrl","renderCard","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","menuStyle","top","position","left","className","style","i","index","label","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","EncounterLoader","handleSelected","_event","loadCards","c","code","Autocomplete","options","encounterData","getOptionLabel","option","setData","name","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","Object","values","forEach","encounterCard","setCode","set_code","push","entries","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","loadState","serializedState","JSON","parse","err","localStorageState","initialState","ghostCards","dropTargetCard","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSetCode","data","investigator_code","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeck","relatedEncounterDeck","relatedObligationDeck","resetApp","createAction","getCardStackWithId","find","mutateCardWithId","callback","cardToUpdate","unselectAllCardsReducer","cardsSlice","createSlice","reducers","selectCard","unselectOtherCards","unselectCard","toggleSelectCard","exhaustCard","startCardMove","cardToStartMoving","splitTopCard","cardToMove","Error","topCard","shift","newCard","assign","uuidv4","foreachSelectedCard","cardMove","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCards","concat","length","selectMultipleCards","ids","unselectAllCards","hoverCard","cardToPreview","faceup","hoverLeaveCard","togglePanMode","flipCards","reverse","shuffleStack","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","resetCards","addCardStack","newStack","cardJsonIds","jsonId","statusTokens","toggleToken","cardToToggle","tokenType","adjustCounterToken","delta","pullCardOutOfCardStack","cardStackToUse","cardStackId","newCardStack","extraReducers","builder","addCase","fulfilled","console","log","heroCard","mainDeckStack","slots","cardDetails","Array","from","keys","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","completed","containerStyle","children","CardStackCardSelector","cardsDataInStack","cardSelected","cardsDataEntities","CardStackCardSelectorContainer","Counter","handleDecrement","updateCounterValueBy","handleIncrement","pos","App","stage","handleCounterValueUpdate","updateCounterValue","handleCounterDrag","moveCounter","newPos","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","handleLoadEncounter","renderCardSearch","showCardSearch","cardSearchPosition","cardStackForSearching","clearCardSearch","handleCardSelectedFromCardStack","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","updatePosition","handleCounterContextMenu","counterId","menuItems","removeCounter","handleCardContextMenu","cardId","currentStatusTokens","Stunned","Confused","Tough","Damage","Threat","Generic","handleCardClick","modifierKeyHeld","shiftKey","metaKey","ctrlKey","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","handleKeyPress","which","keyCode","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","button","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","handleMouseMove","addNewCounter","getCardType","getImgUrl","topCardData","bottomCardData","back_link","double_sided","octgn_id","loadCardsData","staticCards","tokens","movingCards","previewCards","showPreview","rawPos","previewPos","tabIndex","onKeyPress","Consumer","store","ref","stagePosition","innerHeight","onMouseUp","onMouseMove","onTouchMove","onWheel","counters","counter","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","error","SetData","card_set_type_code","getGame","game","gameSlice","AppContainer","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","rtkConfigureStore","reducer","middleware","subscribe","throttle","blacklistStateKeys","stringify","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0211bda3.chunk.js","sourcesContent":["import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\nexport enum CounterTokenType {\n  Damage = \"damage\",\n  Threat = \"threat\",\n  Generic = \"generic\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; unselectOtherCards: boolean }>\n> = (state, action) => {\n  if (action.payload.unselectOtherCards) {\n    unselectAllCardsReducer(state, action);\n  }\n\n  mutateCardWithId(state, action.payload.id, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      selected: true,\n      dragging: true,\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst addCardStackReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ cardJsonIds: string[]; position: Vector2d }>\n> = (state, action) => {\n  const newStack: ICardStack = {\n    x: action.payload.position.x,\n    y: action.payload.position.y,\n    dragging: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: uuidv4(),\n    cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n      jsonId,\n    })),\n    selected: false,\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n    counterTokens: {\n      damage: 0,\n      threat: 0,\n      generic: 0,\n    },\n  };\n\n  state.cards.push(newStack);\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n\nconst adjustCounterTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: CounterTokenType; delta: number }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.counterTokens[action.payload.tokenType] +=\n      action.payload.delta;\n    if (cardToToggle.counterTokens[action.payload.tokenType] < 0) {\n      cardToToggle.counterTokens[action.payload.tokenType] = 0;\n    }\n  }\n};\n\nconst pullCardOutOfCardStackReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ cardStackId: string; jsonId: string; pos: Vector2d }>\n> = (state, action) => {\n  const cardStackToUse = state.cards.find(\n    (c) => c.id === action.payload.cardStackId\n  );\n  if (!!cardStackToUse && cardStackToUse.cardStack.length > 1) {\n    const newCardStack: ICardDetails[] = [{ jsonId: action.payload.jsonId }];\n    const newCard = Object.assign({}, cardStackToUse, {\n      cardStack: newCardStack,\n    });\n    newCard.id = uuidv4();\n    newCard.selected = true;\n    newCard.x = newCard.x + cardConstants.CARD_WIDTH + 5;\n\n    cardStackToUse.cardStack = cardStackToUse.cardStack.filter(\n      (c) => c.jsonId !== action.payload.jsonId\n    );\n    cardStackToUse.selected = false;\n\n    state.cards.push(newCard);\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n    resetCards: resetCardsReducer,\n    addCardStack: addCardStackReducer,\n    toggleToken: toggleTokenReducer,\n    adjustCounterToken: adjustCounterTokenReducer,\n    pullCardOutOfCardStack: pullCardOutOfCardStackReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCard = null;\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  resetCards,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect, Text } from \"react-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\ninterface IProps {\n  x: number;\n  y: number;\n  card: ICardStack;\n}\n\ninterface IState {\n  imagesLoaded: {\n    damage: boolean;\n    threat: boolean;\n    generic: boolean;\n  };\n}\n\nclass CardTokens extends Component<IProps, IState> {\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imagesLoaded: {\n        damage: false,\n        threat: false,\n        generic: false,\n      },\n    };\n\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // DAMAGE\n    this.damageImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: true,\n            threat: this.state.imagesLoaded.threat,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.damage) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    this.threatImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: true,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.threat) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // GENERIC\n    this.genericImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: this.state.imagesLoaded.threat,\n            generic: true,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.generic) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.damage &&\n      !prevProps.card?.counterTokens.damage &&\n      !!this.props.card?.counterTokens.damage\n    ) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    if (\n      !this.state.imagesLoaded.threat &&\n      !prevProps.card?.counterTokens.threat &&\n      !!this.props.card?.counterTokens.threat\n    ) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.generic &&\n      !prevProps.card?.counterTokens.generic &&\n      !!this.props.card?.counterTokens.generic\n    ) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    const damageX = this.props.x - this.damageImg.naturalWidth / 2;\n    const damageY = this.props.y - cardConstants.CARD_HEIGHT / 2 + 20;\n    const showDamage =\n      this.state.imagesLoaded.damage && !!this.props.card.counterTokens.damage;\n\n    const damageToken = showDamage ? (\n      <Rect\n        key={`${this.props.card.id}-damageToken`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        fillPatternImage={this.damageImg}\n      ></Rect>\n    ) : null;\n\n    const damageText = showDamage ? (\n      <Text\n        key={`${this.props.card.id}-damageText`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        text={`${this.props.card.counterTokens.damage}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const threatX = this.props.x - this.threatImg.naturalWidth / 2;\n    const threatY = damageY + this.damageImg.naturalHeight + 5;\n    const showThreat =\n      this.state.imagesLoaded.threat && !!this.props.card.counterTokens.threat;\n\n    const threatToken = showThreat ? (\n      <Rect\n        key={`${this.props.card.id}-threatToken`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        fillPatternImage={this.threatImg}\n      ></Rect>\n    ) : null;\n\n    const threatText = showThreat ? (\n      <Text\n        key={`${this.props.card.id}-threatText`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        text={`${this.props.card.counterTokens.threat}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const genericX = this.props.x - this.threatImg.naturalWidth / 2;\n    const genericY = threatY + this.threatImg.naturalHeight + 5;\n    const showGeneric =\n      this.state.imagesLoaded.generic &&\n      !!this.props.card.counterTokens.generic;\n\n    const genericToken = showGeneric ? (\n      <Rect\n        key={`${this.props.card.id}-genericToken`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        fillPatternImage={this.genericImg}\n      ></Rect>\n    ) : null;\n\n    const genericText = showGeneric ? (\n      <Text\n        key={`${this.props.card.id}-genericText`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        text={`${this.props.card.counterTokens.generic}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    return [\n      damageToken,\n      damageText,\n      threatToken,\n      threatText,\n      genericToken,\n      genericText,\n    ];\n  }\n}\n\nexport default CardTokens;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDoubleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private unmounted: boolean;\n  private renderAnimated: boolean = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (localStorage.getItem(\"__render_animated__\")) {\n      this.renderAnimated = true;\n    }\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.img = new Image();\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderAnimated\n      ? this.renderAnimatedCard(heightToUse, widthToUse)\n      : this.renderUnanimatedCard(heightToUse, widthToUse);\n  }\n\n  private renderAnimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  };\n\n  private renderUnanimatedCard = (heightToUse: number, widthToUse: number) => {\n    const scale = this.getScale(widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={this.img}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens =\n      this.props.dragging || this.props.isGhost ? null : (\n        <CardTokensContainer\n          key={`${this.props.id}-cardTokens`}\n          id={this.props.id}\n          x={this.props.x}\n          y={this.props.y}\n        ></CardTokensContainer>\n      );\n\n    return [\n      cardStack,\n      card,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrl?.includes(\"standard\") &&\n      this.props.imgUrl?.includes(\"_back\")\n    );\n  }\n\n  private getScale(widthToUse: number, heightToUse: number) {\n    const width = this.state.imageLoaded\n      ? widthToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const widthHorizontal = this.state.imageLoaded\n      ? heightToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const height = this.state.imageLoaded\n      ? heightToUse / this.img.naturalHeight\n      : heightToUse;\n\n    const heightHorizontal = this.state.imageLoaded\n      ? widthToUse / this.img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id, event);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id, event);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    const menuStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <div\n          className=\"context-menu\"\n          style={menuStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.hideContextMenu}\n        >\n          {this.props.items.map((i, index) => (\n            <div key={`context-menu-item-${index}`}>\n              <button\n                className=\"context-menu-item\"\n                onContextMenu={this.preventDefault}\n                onClick={this.handleContextItemClicked(i)}\n              >\n                {i.label}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      this.props.loadCards(value.cards.map((c) => c.code));\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { CounterTokenType, StatusTokenType } from \"./cards.slice\";\n\n// import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n  counterTokens: {\n    [K in CounterTokenType]: number;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\nconst defaultState: ICardsState = {\n  cards: [\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 200,\n    //   cardStack: [{ jsonId: \"01001a\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 400,\n    //   y: 400,\n    //   cardStack: [{ jsonId: \"01027\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 600,\n    //   cardStack: [{ jsonId: \"01036\" }],\n    // },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          value.set_code === `${heroSetCode}` &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      data: response.data,\n      relatedEncounterDeck: heroEncounterDeck,\n      relatedObligationDeck: heroObligationDeck,\n    };\n  }\n);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const resetApp = createAction(\"resetAction\");\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.handleClick}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    this.props.completed();\n  };\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { ICardStack } from \"./features/cards/initialState\";\ninterface IProps {\n  cardsDataEntities: ICardData;\n  card: ICardStack;\n  cardSelected: (jsonId: string) => void;\n}\n\nclass CardStackCardSelector extends Component<IProps> {\n  private cardsDataInStack: CardData[] = [];\n\n  constructor(props: IProps) {\n    super(props);\n    this.cardsDataInStack = props.card.cardStack.map((c) => {\n      return this.props.cardsDataEntities[c.jsonId];\n    });\n  }\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"cardstack-card-selector-combobox\"\n          options={this.cardsDataInStack}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Find Card...\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: CardData | null) => {\n    if (!!value && !!this.props.cardSelected) {\n      this.props.cardSelected(value.code);\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default CardStackCardSelector;\n","import { connect } from \"react-redux\";\nimport CardStackCardSelector from \"./CardStackCardSelector\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cardsDataEntities: getCardsDataEntities(state),\n  };\n};\n\nconst CardStackCardSelectorContainer = connect(\n  mapStateToProps,\n  {}\n)(CardStackCardSelector);\n\nexport default CardStackCardSelectorContainer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { Vector2d } from \"konva/types/types\";\nimport { Group, Rect, Text } from \"react-konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\n\ninterface IProps {\n  id: string;\n  pos: Vector2d;\n  value: number;\n  updateCounterValueBy: (amount: number) => void;\n  handleContextMenu: (event: KonvaEventObject<PointerEvent>) => void;\n  onDragEnd: (event: KonvaEventObject<DragEvent>) => void;\n}\n\nclass Counter extends Component<IProps> {\n  render() {\n    return (\n      <Group\n        x={this.props.pos.x}\n        y={this.props.pos.y}\n        draggable={true}\n        onContextMenu={this.props.handleContextMenu}\n        onDragEnd={this.props.onDragEnd}\n      >\n        <Rect cornerRadius={30} width={200} height={100} fill={\"red\"}></Rect>\n        <Text\n          width={200}\n          height={100}\n          fontSize={36}\n          text={`${this.props.value}`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n        ></Text>\n        <Text\n          x={10}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`-`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleDecrement}\n        ></Text>\n        <Text\n          x={140}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`+`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleIncrement}\n        ></Text>\n      </Group>\n    );\n  }\n\n  private handleDecrement = () => {\n    this.props.updateCounterValueBy(-1);\n  };\n\n  private handleIncrement = () => {\n    this.props.updateCounterValueBy(1);\n  };\n}\n\nexport default Counter;\n","import { ReactReduxContext, Provider } from \"react-redux\";\nimport * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport {\n  CounterTokenType,\n  StatusTokenType,\n} from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getDistance } from \"./utilities/geo\";\nimport CardStackCardSelectorContainer from \"./CardStackCardSelectorContainer\";\nimport Counter from \"./Counter\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (payload: { id: string; unselectOtherCards: boolean }) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n  adjustCounterToken: (payload: {\n    id: string;\n    tokenType: CounterTokenType;\n    delta: number;\n  }) => void;\n  pullCardOutOfCardStack: (payload: {\n    cardStackId: string;\n    jsonId: string;\n    pos: Vector2d;\n  }) => void;\n  addNewCounter: (pos: Vector2d) => void;\n  updateCounterValue: (payload: { id: string; delta: number }) => void;\n  removeCounter: (id: string) => void;\n  moveCounter: (payload: { id: string; newPos: Vector2d }) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n  showCardSearch: boolean;\n  cardSearchPosition: Vector2d | null;\n  cardStackForSearching: ICardStack | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.handleCardClick(card)}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrl={this.getImgUrl(card)}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        {this.renderCardSearch()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer>\n                  {this.props.gameState.counters.map((counter) => (\n                    <Counter\n                      key={`${counter.id}-counter`}\n                      id={counter.id}\n                      pos={counter.position}\n                      value={counter.value}\n                      updateCounterValueBy={this.handleCounterValueUpdate(\n                        counter.id\n                      )}\n                      handleContextMenu={this.handleCounterContextMenu(\n                        counter.id\n                      )}\n                      onDragEnd={this.handleCounterDrag(counter.id)}\n                    ></Counter>\n                  ))}\n                </Layer>\n                <Layer preventDefault={true}>\n                  {staticCards\n                    .concat(ghostCards)\n                    .concat(movingCards)\n                    .concat(previewCards)}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"black\"\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private handleCounterValueUpdate = (id: string) => (delta: number) => {\n    this.props.updateCounterValue({ id, delta });\n  };\n\n  private handleCounterDrag = (id: string) => (\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    this.props.moveCounter({\n      id,\n      newPos: {\n        x: event.target.x(),\n        y: event.target.y(),\n      },\n    });\n  };\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderCardSearch = () => {\n    if (!this.state.showCardSearch) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.cardSearchPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing card search position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.cardStackForSearching ? (\n      <TopLayer position={pos} completed={this.clearCardSearch}>\n        <CardStackCardSelectorContainer\n          card={this.state.cardStackForSearching}\n          cardSelected={this.handleCardSelectedFromCardStack(\n            this.state.cardStackForSearching.id,\n            pos\n          )}\n        />\n      </TopLayer>\n    ) : null;\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private handleCardSelectedFromCardStack = (\n    cardStackId: string,\n    pos: Vector2d\n  ) => (jsonId: string) => {\n    this.clearCardSearch();\n    this.props.pullCardOutOfCardStack({ cardStackId, jsonId, pos });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private clearCardSearch = () => {\n    this.setState({\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCounterContextMenu = (counterId: string) => (\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Remove\",\n        action: () => {\n          this.props.removeCounter(counterId);\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard({ id: cardId, unselectOtherCards: false });\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n\n      menuItems.push({\n        label: \"Find Specific Card\",\n        action: () => {\n          if (!!card) {\n            this.setState({\n              showCardSearch: true,\n              cardSearchPosition: this.stage?.getPointerPosition() ?? null,\n              cardStackForSearching: card,\n            });\n          }\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: -1,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardClick = (card: ICardStack) => (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n\n    if (card.selected && modifierKeyHeld) {\n      this.props.toggleSelectCard(cardId);\n    } else {\n      this.props.selectCard({\n        id: cardId,\n        unselectOtherCards: !modifierKeyHeld,\n      });\n    }\n  };\n\n  private handleSelectAndExhaust = (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n    this.props.selectCard({ id: cardId, unselectOtherCards: !modifierKeyHeld });\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: KonvaEventObject<MouseEvent>) => {\n    if (event.evt.button === 0) {\n      // Only do something if it's the primary button (not a right-click)\n      const pos = this.getRelativePositionFromTarget(this.stage);\n\n      this.setState({\n        selectStartPos: {\n          x: pos.x,\n          y: pos.y,\n        },\n        selecting: true,\n      });\n    }\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Create new counter\",\n        action: () => {\n          this.props.addNewCounter(\n            this.getRelativePositionFromTarget(this.stage) ?? { x: 0, y: 0 }\n          );\n        },\n      },\n      { label: \"Reset\", action: this.props.resetApp },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n    const bottomCardData = this.props.cardsData[\n      card.cardStack[card.cardStack.length - 1].jsonId\n    ];\n\n    if (\n      !card.faceup &&\n      (!!bottomCardData.back_link || !!bottomCardData.double_sided)\n    ) {\n      return (\n        process.env.PUBLIC_URL +\n        \"/images/cards/\" +\n        bottomCardData.octgn_id +\n        \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + topCardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n  counters: ICounter[];\n}\n\nexport interface ICounter {\n  id: string;\n  position: Vector2d;\n  value: number;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nconst defaultState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n  counters: [],\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { initialState, IGameState } from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\nconst addNewCounterReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.counters.push({\n    id: uuidv4(),\n    position: action.payload,\n    value: 0,\n  });\n};\n\nconst updateCounterValueReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ id: string; delta: number }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.value += action.payload.delta;\n    if (counter.value < 0) {\n      counter.value = 0;\n    }\n  }\n};\n\nconst removeCounterReducer: CaseReducer<IGameState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.counters = state.counters.filter((c) => c.id !== action.payload);\n};\n\nconst moveCounterReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ id: string; newPos: Vector2d }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.position = {\n      x: action.payload.newPos.x,\n      y: action.payload.newPos.y,\n    };\n  }\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n    addNewCounter: addNewCounterReducer,\n    updateCounterValue: updateCounterValueReducer,\n    removeCounter: removeCounterReducer,\n    moveCounter: moveCounterReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n      state.counters = [];\n    });\n  },\n});\n\nexport const {\n  updateZoom,\n  updatePosition,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  addCardStack,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n} from \"./features/cards/cards.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport {\n  updatePosition,\n  updateZoom,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n} from \"./features/game/game.slice\";\nimport { RootState } from \"./store/rootReducer\";\nimport { resetApp } from \"./store/global.actions\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n});\n\nexport default function configureStore() {\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}