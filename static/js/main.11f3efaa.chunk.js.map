{"version":3,"sources":["constants/card-constants.ts","Card.tsx","utilities/geo.ts","App.tsx","features/cards/cards.slice.ts","features/cards/initialState.ts","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/cards/cards.selectors.ts","features/cards-data/cards-data.selectors.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","Card","props","img","unmounted","handleDoubleClick","id","handleDragStart","event","handleDragMove","dx","target","x","dy","y","handleDragEnd","dragging","handleClick","cancelBubble","handleMouseDown","handleMouseOver","handleHover","handleMouseOut","handleHoverLeave","state","imageLoaded","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","heightToUse","height","widthToUse","width","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","onDragMove","onDragEnd","onDblClick","onDblTap","onClick","onTap","onMouseDown","onTouchStart","onMouseOver","onMouseOut","Component","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","App","stage","handleCardDragStart","cardId","splitTopCard","cards","filter","c","length","draggingCard","find","hasStack","cardStack","upperRightPoint","getRelativePositionFromTarget","startCardMove","handleKeyPress","code","which","keyCode","togglePanMode","flipCards","getRawPreviewCardPosition","pointerPos","getPointerPosition","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","pos","point","currentTarget","selectStartPos","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","reduce","currSelectedCards","card","Intersects","push","selectMultipleCards","ids","map","handleMouseMove","getImgUrl","Object","keys","cardsData","cardData","jsonId","faceup","back_link","process","octgn_id","loadCardsData","staticCards","fill","dropTargetCard","cardMove","endCardMove","exhaustCard","selectCard","hoverCard","hoverLeaveCard","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","previewPos","tabIndex","onKeyPress","ref","innerHeight","unselectAllCards","panMode","onMouseUp","onMouseMove","onTouchMove","preventDefault","concat","getCardWithId","cardsSlice","createSlice","name","initialState","reducers","action","callback","cardToUpdate","mutateCardWithId","payload","forEach","cardToStartMoving","cardToMove","Error","newCard","assign","shift","foreachSelectedCard","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","sort","c1","c2","movedCard","splice","indexOf","dropTargetCards","currentId","cardToPreview","actions","cardsDataSlice","entities","CoreData","console","error","getCards","shouldShowPreview","createSelector","every","getPanMode","getCardsDataEntities","AppContainer","connect","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","store","rtkConfigureStore","reducer","middleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.11f3efaa.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { animated, Spring } from 'react-spring/renderprops-konva';\nimport { cardConstants } from './constants/card-constants';\n\ninterface IProps {\n  dragging: boolean,\n  exhausted: boolean,\n  fill: string,\n  handleClick?: (id: number) => void,\n  handleDoubleClick?: (id: number) => void,\n  handleDragStart?: (id: number, event: MouseEvent) => void,\n  handleDragMove?: (info: {id: number, dx: number, dy: number}) => void,\n  handleDragEnd?: (id: number) => void,\n  handleHover?: (id: number) => void,\n  handleHoverLeave?: (id: number) => void,\n  id: number,\n  selected: boolean,\n  dropTarget?: boolean,\n  x: number,\n  y: number,\n  width?: number,\n  height?: number,\n  imgUrl: string,\n  isGhost?: boolean,\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props)\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    }\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (!this.state.imageLoaded && this.props.imgUrl && this.props.imgUrl !== this.img.src) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return (\n      this.state.imageLoaded ?\n      <Spring\n        native={true}\n        to={{\n            rotation: this.props.exhausted ? 90 : 0\n        }}>\n        {(animatedProps: any) => (\n            <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n                x: widthToUse / 2,\n                y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? 'blue' : ''}\n            strokeWidth= {this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={this.state.imageLoaded ? widthToUse / this.img.naturalWidth : widthToUse}\n            fillPatternScaleY={this.state.imageLoaded ? heightToUse / this.img.naturalHeight : heightToUse}\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            />\n        )}\n      </Spring> : null\n    );\n  }\n\n  private handleDoubleClick = () => {\n    if(this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  }\n\n  private handleDragStart = (event: MouseEvent) => {\n    if(this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  }\n\n  private handleDragMove = (event: any) => {\n    if(this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y\n      });\n    }\n  }\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  }\n\n  private handleClick = (event: any) => {\n    if(this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  }\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  }\n\n  private handleMouseOver = () => {\n    if(this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  }\n\n  private handleMouseOut = () => {\n    if(this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  }\n};\n\nexport default Card;","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n    const deltaX = point1.x - point2.x;\n    const deltaY = point1.y - point2.y;\n    return Math.sqrt(deltaX*deltaX + deltaY*deltaY);\n}","import * as Intersects from 'intersects';\nimport { Component } from 'react';\nimport * as React from 'react';\nimport { Layer, Rect, Stage } from 'react-konva';\nimport Konva from 'konva';\nimport { cardConstants } from './constants/card-constants';\nimport './App.css';\nimport Card from './Card';\nimport { ICard, ICardsState } from './features/cards/initialState';\nimport { Vector2d } from 'konva/types/types';\nimport { getDistance } from './utilities/geo';\nimport { ICardData } from './features/cards-data/initialState';\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: {id: number, dx: number, dy: number}) => void;\n  endCardMove: (id: number) => void;\n  exhaustCard: (id: number) => void;\n  selectCard: (id: number) => void;\n  startCardMove: (payload: {id: number, splitTopCard: boolean}) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: {ids: number[]}) => void;\n  hoverCard: (id: number) => void;\n  hoverLeaveCard: (id: number) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  },\n  selectStartPos: {\n    x: number;\n    y: number;\n  },\n  selecting: boolean;\n}\nclass App extends Component<IProps, IState> {\n\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props)\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n    }\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    \n    const staticCards = this.props.cards.cards\n    .filter(card => !card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            imgUrl={this.getImgUrl(card)}\n          />\n      )}\n    );\n\n    const ghostCards = this.props.cards.ghostCards\n    .map(\n      card => {\n        return (\n          <Card key={`ghost${card.id}`}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.getImgUrl(card)}\n            isGhost={true}\n          />\n        );\n      }\n    )\n\n    const movingCards = this.props.cards.cards\n    .filter(card => card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            imgUrl={this.getImgUrl(card)}\n          />\n      )}\n    );\n\n    const previewCards = this.props.cards.cards\n    .filter(card => !this.state.selecting && this.props.showPreview && !!this.props.cards.previewCard && (card.id === this.props.cards.previewCard.id))\n    .map(\n      card => {\n        \n        const rawPos = this.getRawPreviewCardPosition();\n        const previewPos = this.getRelativePositionFromTarget(this.stage, rawPos);\n        return (\n        <Card\n            key={`preview${card.id}`}\n            id={card.id}\n            x={previewPos.x}\n            y={previewPos.y}\n            exhausted={false}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.getImgUrl(card)}\n            height={cardConstants.CARD_PREVIEW_HEIGHT}\n            width={cardConstants.CARD_PREVIEW_WIDTH}\n          />\n      )}\n    );\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        <Stage\n          ref={(ref) => {this.stage = ref;}}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={() => this.props.unselectAllCards()}\n          onTap={() => this.props.unselectAllCards()}\n          onMouseDown={this.props.panMode ? () => {} : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? () => {} : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          draggable={this.props.panMode}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragStart={() => {console.log('STAGE onDragStart')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragMove={() => {console.log('STAGE onDragMove')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragEnd={() => {console.log('STAGE onDragEnd')}}\n          preventDefault={true}>\n\n          <Layer\n            preventDefault={true}>\n            {staticCards.concat(ghostCards).concat(movingCards).concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"/>\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private handleCardDragStart = (cardId: number, event: MouseEvent) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected = this.props.cards.cards.filter(c => c.selected).length > 1;\n\n    if(!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find(c => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 0;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = { x: draggingCard.x + cardConstants.CARD_WIDTH/2, y: draggingCard.y - cardConstants.CARD_HEIGHT/2 };\n        const distance = getDistance(upperRightPoint, this.getRelativePositionFromTarget(this.stage));\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n    \n    this.props.startCardMove({id: cardId, splitTopCard});\n  }\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if(code === 115) {\n      this.props.togglePanMode();\n    }\n    else if (code === 102) {\n      this.props.flipCards();\n    }\n  }\n \n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX ? {\n      x: window.innerWidth - (cardConstants.CARD_PREVIEW_WIDTH / 2),\n      y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n    } : \n    {\n      x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n      y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n    };\n  }\n\n  private getRelativePositionFromTarget= (target: any, posParam?: Vector2d) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos);\n  }\n\n  private handleMouseDown = (event: any) => {\n\n    const pos = this.getRelativePositionFromTarget(event.currentTarget);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n  }\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x: selectRect.width < 0 ? selectStartPos.x + selectRect.width : selectStartPos.x,\n      y: selectRect.height < 0 ? selectStartPos.y + selectRect.height : selectStartPos.y,\n    };\n  }\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICard[]>( \n        (currSelectedCards, card) =>{\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50, \n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT)\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },[]);\n\n      this.props.selectMultipleCards({ ids: selectedCards.map(card => card.id) });\n    }\n    \n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0\n      },\n      selecting: false,\n    });\n  }\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      })\n    }\n    event.cancelBubble = true;\n  }\n\n  private getImgUrl = (card: ICard): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return '';\n    \n    const cardData = this.props.cardsData[card.jsonId];\n\n    if (!card.faceup && !!cardData.back_link) {\n      return process.env.PUBLIC_URL + '/images/cards/' + cardData.octgn_id + '.b.jpg';\n    }\n    else if (!card.faceup) {\n      return process.env.PUBLIC_URL + '/images/standard/card_back.png';\n    } \n\n    return process.env.PUBLIC_URL + '/images/cards/' + cardData.octgn_id + '.jpg';\n    // return process.env.PUBLIC_URL + '/images/cards/18ae183c-de26-4369-8a41-424d58f01631.jpg'/*this.props.cardsData[card.id].Front.ImagePath*/;\n  }\n}\n\nexport default App;","import { createSlice, PayloadAction, CaseReducer } from '@reduxjs/toolkit'\nimport { getDistance } from '../../utilities/geo';\nimport { initialState, ICardsState, ICard, ICardDetails } from './initialState';\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\n// Helper methods\nconst getCardWithId = (state: ICardsState, id: number ): ICard | undefined => {\n  return state.cards.find( (card) => card.id === id);\n}\n\nconst mutateCardWithId = (state: ICardsState, id: number, callback: (card: ICard) => void ) => {\n  const cardToUpdate = getCardWithId(state, id);\n  if (cardToUpdate) { callback(cardToUpdate) }\n}\n\nconst foreachSelectedCard = (state: ICardsState, callback: (card: ICard) => void ) => {\n  state.cards.filter(card => card.selected).forEach(card => callback(card));\n}\n\nconst foreachUnselectedCard = (state: ICardsState, callback: (card: ICard) => void ) => {\n  state.cards.filter(card => !card.selected).forEach(card => callback(card));\n}\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected; \n  });\n}\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  state.cards\n    .filter( card => card.id === action.payload || card.selected)\n    .forEach( (card) => {\n      card.exhausted = !card.exhausted;\n    })\n}\n\nconst startCardMoveReducer: CaseReducer<ICardsState, PayloadAction<{id: number, splitTopCard: boolean}>> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards  \n  const cardToStartMoving = getCardWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map(card => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {    \n    const cardToMove = state.cards.find(c => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error('Expected to find card');\n    }\n\n    const newCard = Object.assign({}, cardToMove, {\n      id: cardToMove.cardStack[0].id,\n      selected: false,\n    });\n    cardToMove.cardStack = [];\n    newCard.cardStack.shift();\n    state.cards.push(newCard);\n  }\n\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, card => { \n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n}\n\nconst cardMoveReducer: CaseReducer<ICardsState, PayloadAction<{id: number, dx: number, dy: number}>> = (state, action) => {\n  const movedCards: ICard[] = [];\n  \n  let primaryCard: ICard;\n\n  state.cards\n  .filter((card) => card.id === action.payload.id || card.selected)\n  .forEach( (card) => {\n    if(card.id === action.payload.id) {\n      primaryCard = card;\n    }\n\n    card.x += action.payload.dx;\n    card.y += action.payload.dy;\n\n    movedCards.push(card);\n  });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: {distance: number, card: ICard}[] = [];\n  foreachUnselectedCard(state, card => {\n    const distance = getDistance(card, primaryCard);\n    if(distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card\n      });\n    }\n  });\n\n  state.dropTargetCard = possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ?? null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time \n  // or something, and the array could be a selector\n  movedCards.forEach(movedCard => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n}\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  const dropTargetCards: ICardDetails[] = [];\n  state.cards\n  .filter((card) => card.id === action.payload || card.selected)\n  .forEach((card) =>{\n    card.dragging = false;\n\n    if (!!state.dropTargetCard) {\n      // Add the card to the drop Target card stack\n      dropTargetCards.push({id: card.id});    \n    }\n  });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter((card) => !(card.id === action.payload || card.selected));\n    \n    const dropTargetCard = state.cards.find(card => card.id === state.dropTargetCard?.id);\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // So, technically what we want to do is put the current cardstack at the end. First\n      // we need to make the current stacks card technically the one we're dropping on top\n      const currentId = dropTargetCard.id;\n      dropTargetCard.id = dropTargetCards[0].id;\n      dropTargetCards[0].id = currentId;\n      dropTargetCard.cardStack = dropTargetCards.concat(dropTargetCard.cardStack);\n    }\n    \n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n}\n\nconst selectMultipleCardsReducer: CaseReducer<ICardsState, PayloadAction<{ ids: number[]}>> = (state, action) => {\n  action.payload.ids\n  .map( id => state.cards.find(card => card.id === id))\n  .forEach( card => {\n    if (card) {\n      card.selected = true;\n    }\n  });\n}\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach( (card) => {\n    card.selected = false;\n  });\n}\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  const cardToPreview = state.cards.find(c => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    }\n  } else if ( action.payload !== state.previewCard.id) {  \n    state.previewCard.id = action.payload;\n  }\n}\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n}\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n}\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter( card => card.selected)\n    .forEach( (card) => {\n      card.faceup = !card.faceup;\n    })\n}\n// Selectors\n\n\n// slice\n\nconst cardsSlice = createSlice({\n  name: 'cards',\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n  },\n});\n\nexport const { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","export interface ICard {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: number;\n  jsonId: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n}\n\nexport interface ICardDetails {\n  id: number\n}\n\nexport interface IPreviewCard {\n  id: number;\n}\n\nexport interface ICardsState {\n  cards: ICard[];\n  ghostCards: ICard[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICard | null;\n  panMode: boolean;\n}\n\nexport const initialState: ICardsState = {\n  cards: [\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: 'red',\n      id: 0,\n      jsonId: '01001a',\n      selected: false,\n      x: 200,\n      y: 200,\n      cardStack: [],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: 'red',\n      id: 1,\n      jsonId: '01027',\n      selected: false,\n      x: 400,\n      y: 400,\n      cardStack: [],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: 'red',\n      id: 2,\n      jsonId: '01036',\n      selected: false,\n      x: 200,\n      y: 600,\n      cardStack: [],\n    },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n","import { createSlice, CaseReducer } from '@reduxjs/toolkit'\nimport { initialState, ICardsDataState } from './initialState';\n\nimport CoreData from '../../external/marvelsdb-json-data/pack/core.json';\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  CoreData.forEach(card => {\n    if (state.entities[card.code]) {\n      console.error('Found multiple cards with code ' + card.code);\n    }\n\n    state.entities[card.code] = card;\n  });\n  return state;\n}\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: 'cardsData',\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { \n  loadCardsData,\n} = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from '../../external-api/marvel-card-data';\n\nexport interface ICardData {\n    [key: string]: CardData;\n};\n\nexport interface ICardsDataState {\n    entities: ICardData, \n};\n\nexport const initialState: ICardsDataState = {\n    entities: {}\n};","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../../store/rootReducer';\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every(card => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../../store/rootReducer';\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(getCardsData, (cardsData) => {\n  return cardsData.entities;\n});","import {connect} from 'react-redux';\n// import Types from 'Types';\nimport App from './App';\nimport { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards\n} from './features/cards/cards.slice'\nimport { \n  loadCardsData\n} from './features/cards-data/cards-data.slice'\n// import * as cardActions from './features/cards/actions';\n// import { shouldShowPreview } from './features/cards/selectors';\n// import { get3RandomPlayerCardDatas } from './features/cardsData/selectors';\n// import * as cardThunks from './features/cardsData/thunks';\n// import * as CoreSet from './external/ringsteki-json-data/packs/Core Set.json';\n// import CoreSet from './external/marvelsdb-json-data/pack/core.json'\n\nimport { RootState } from './store/rootReducer';\nimport { shouldShowPreview, getCards, getPanMode } from './features/cards/cards.selectors';\nimport { getCardsDataEntities } from './features/cards-data/cards-data.selectors';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n  }\n}\n\nconst AppContainer = connect(\n  mapStateToProps,\n  {\n    cardMove,\n    endCardMove,\n    exhaustCard,\n    loadCardsData,\n    selectCard,\n    selectMultipleCards,\n    startCardMove,\n    unselectAllCards,\n    hoverCard,\n    hoverLeaveCard,\n    togglePanMode,\n    flipCards,\n  }\n)(App);\n\nexport default AppContainer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport cards from '../features/cards/cards.slice';\nimport cardsData from '../features/cards-data/cards-data.slice'\n\nconst rootReducer = combineReducers({\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import { configureStore as rtkConfigureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: false,\n})\n\nexport default function configureStore() {\n  \n  return rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  })\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}