{"version":3,"sources":["../node_modules/peerjs/dist sync","constants/card-constants.ts","CardTokens.tsx","features/cards/cards.selectors.ts","CardTokensContainer.tsx","constants/app-constants.ts","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/cards/cards.actions.ts","constants/card-pack-mapping.ts","features/cards/cards.thunks.ts","store/global.actions.ts","TopLayer.tsx","CardStackCardSelector.tsx","CardStackCardSelectorContainer.tsx","Counter.tsx","PeerConnector.tsx","constants/card-missing-image-map.ts","TokenValueModifier.tsx","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","features/counters/counters.actions.ts","features/counters/initialState.ts","features/counters/counters.slice.ts","features/counters/counters.selectors.ts","AppContainer.tsx","features/counters/counters.thunks.ts","serviceWorker.ts","store/rootReducer.ts","store/peer-js-redux-middleware.ts","store/configureStore.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","cardConstants","CardTokens","props","damageImg","threatImg","genericImg","unmounted","state","imagesLoaded","damage","threat","generic","Image","onload","setState","card","counterTokens","src","process","prevProps","prevState","this","damageX","x","naturalWidth","damageY","y","showDamage","damageToken","width","height","naturalHeight","fillPatternImage","damageText","text","fill","align","verticalAlign","fontSize","threatX","threatY","showThreat","threatToken","threatText","genericX","genericY","showGeneric","Component","getCards","liveState","present","cards","getCardMapById","createSelector","reduce","map","getPanMode","panMode","getDropTargetCardsById","returnVal","Object","entries","dropTargetCards","forEach","key","value","ownerRef","CardTokensContainer","connect","myPeerRef","uuidv4","HORIZONTAL_TYPE_CODES","stringArraysEqual","array1","array2","length","every","index","Card","imgs","stunnedImg","confusedImg","toughImg","touchTimer","initCardImages","imgUrls","img","imageLoaded","onerror","imageLoadFailed","imgUrl","getStrokeColor","dropTargetColor","selected","selectedColor","renderUnanimatedCard","heightToUse","widthToUse","imgToUse","find","i","complete","undefined","scale","getScale","offset","native","rotation","exhausted","cornerRadius","stroke","strokeWidth","fillPatternRotation","shouldRenderImageHorizontal","typeCode","fillPatternScaleX","fillPatternScaleY","shadowForStrokeEnabled","hitStrokeWidth","opacity","isGhost","draggable","controlledBy","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","handleTouchStart","onTouchMove","handleTouchMove","onTouchEnd","handleTouchEnd","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","cardStackOffset","cardStack","numCardsInStack","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","stunnedToken","getTokenInSlot","confusedToken","confused","toughToken","tough","cardTokens","dragging","renderCardName","event","dx","target","dy","cancelBubble","clearTimeout","setTimeout","handleHover","handleHoverLeave","prevImgUrls","renderCard","cardWidth","cardHeight","textOffset","name","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","some","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","Menu","keepMounted","open","onClose","anchorReference","anchorPosition","top","position","left","MenuItem","label","DeckLoader","stopPropagation","handleKeyDown","loadDeckId","currentTarget","onKeyDown","EncounterLoader","handleSelected","_event","encounterCards","filter","c","oc","back_link","concat","Array","from","quantity","_i","loadCards","onKeyPress","Autocomplete","options","encounterData","getOptionLabel","option","setData","style","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","values","encounterCard","setCode","set_code","push","set","setTypeCode","sort","a","b","EncounterLoaderContainer","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","getCenter","p1","p2","loadState","serializedState","localStorage","getItem","baseState","JSON","parse","err","console","error","localStorageState","StatusTokenType","CounterTokenType","initialState","ghostCards","addCardStackWithId","createAction","pullCardOutOfCardStackWithId","drawCardsOutOfCardStackWithIds","startCardMoveWithSplitStackId","replaceCardStack","CARD_PACK_REMAPPING","bkw","cap","drs","hlk","trors","twc","EXTRA_CARDS","doctor_strange","jsonId","ant","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSet","data","investigator_code","heroSetCode","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeckData","heroEncounterDeck","cd","extraCards","heroId","dataId","extraHeroCards","relatedEncounterDeck","encounterDeckId","relatedObligationDeck","obligationDeckId","shuffle","array","temporaryValue","randomIndex","returnArray","stringify","currentIndex","floor","random","resetApp","receiveRemoteGameState","getCardStackWithId","mutateCardWithId","ref","callback","cardToUpdate","unselectAllCardsReducer","ACTOR_REF","cardsSlice","createSlice","reducers","selectCard","unselectOtherCards","unselectCard","toggleSelectCard","exhaustCard","cardMove","movedCards","primaryCard","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCard","selectMultipleCards","ids","unselectAllCards","togglePanMode","flipCards","faceup","reverse","resetCards","toggleToken","cardToToggle","statusTokens","tokenType","adjustCounterToken","delta","extraReducers","builder","addCase","cardToReplaceStack","newStack","cardJsonIds","cardStackToUse","cardStackId","newCardStack","newCard","assign","cardIndexToRemove","findIndex","cardToStartMoving","splitTopCard","cardToMove","topCard","shift","splitCardId","actorRef","foreachSelectedAndControlledCard","numberToDraw","idsToUse","sourceCardStackId","topCardDetails","fulfilled","log","heroCard","mainDeckStack","slots","cardDetails","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","completed","containerStyle","className","children","CardStackCardSelector","cardsDataInStack","cardSelected","cardsDataEntities","CardStackCardSelectorContainer","Counter","handleDecrement","updateCounterValueBy","handleIncrement","pos","PeerConnector","inputRef","MISSING_CARD_IMAGE_MAP","TokenValueModifier","inputValue","focusInputField","input","querySelector","focus","handleKeyPress","toLocaleLowerCase","newValue","updated","Button","marginLeft","color","App","stage","lastCenter","lastDist","handleCounterValueUpdate","updateCounterValue","handleCounterDrag","moveCounter","newPos","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","handleLoadEncounter","renderCardSearch","showCardSearch","cardSearchPosition","cardStackForSearching","clearCardSearch","handleCardSelectedFromCardStack","renderPeerConnector","showPeerConnector","peerConnectorPosition","clearPeerConnector","handlePeerConnect","renderTokenModifier","showTokenValueModifier","tokenValueModifierPosition","tokenValueModifierProps","clearTokenValueModifier","addCardStack","peerId","connectToRemoteGame","pullCardOutOfCardStack","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","updatePosition","handleCounterContextMenu","counterId","menuItems","removeCounter","handleCardContextMenu","cardId","currentStatusTokens","shuffleStack","Stunned","Confused","Tough","Damage","Threat","Generic","handleCardClick","modifierKeyHeld","shiftKey","metaKey","ctrlKey","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","startCardMove","intCode","parseInt","Number","isNaN","mySelectedCards","drawCardsOutOfCardStack","redo","undo","getRawPreviewCardPosition","horizontal","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","button","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","touch1","touches","touch2","handleMultiTouch","handleMouseMove","isDragging","stopDrag","clientX","clientY","newCenter","dist","pointTo","addNewCounter","requestResync","getCardType","cardData","getCardName","cardInQuestion","getCardCode","getImgUrls","urls","topCardData","double_sided","generateLCGCDNImageUrl","faction_code","codeForMissingCheck","missingImageOverride","checkMissingImageMap","unshift","Konva","hitOnDragEnabled","loadCardsData","staticCards","playerColors","dropTargetCardsById","setPreviewCardId","clearPreviewCard","tokens","movingCards","iAmDragging","previewCards","previewCard","isHorizontal","rawPos","previewPos","url","tabIndex","Consumer","store","stagePosition","innerHeight","onMouseUp","onMouseMove","onWheel","counters","counter","codeToUse","groupCode","pack_code","substring","cardCode","toLocaleUpperCase","cardSuffix","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","SetData","card_set_type_code","getGame","game","getPlayerColors","getPeerId","gameSlice","setPlayerColor","setPeerId","addNewCounterWithId","countersSlice","getCurrentCounters","AppContainer","dispatch","payloadWithId","stackToShuffle","shuffledStack","ActionCreators","possibleIds","payloadWithIds","Boolean","location","hostname","match","undoableState","combineReducers","rootReducer","undoable","limit","groupBy","groupByActionTypes","excludeAction","blacklistRemoteActions","setupConnection","conn","storeAPI","on","INITIAL_STATE_MSG","RESYNC","send","REMOTE_ACTION","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","activeCon","cgpPeer","Peer","debug","setPlayerColorAction","metadata","peerConnection","onconnectionstatechange","ev","connectionState","next","rtkConfigureStore","reducer","middleware","devTools","subscribe","throttle","blacklistStateKeys","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.08c72ebc.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 256;","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect, Text } from \"react-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\ninterface IProps {\n  x: number;\n  y: number;\n  card: ICardStack;\n}\n\ninterface IState {\n  imagesLoaded: {\n    damage: boolean;\n    threat: boolean;\n    generic: boolean;\n  };\n}\n\nclass CardTokens extends Component<IProps, IState> {\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imagesLoaded: {\n        damage: false,\n        threat: false,\n        generic: false,\n      },\n    };\n\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // DAMAGE\n    this.damageImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: true,\n            threat: this.state.imagesLoaded.threat,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.damage) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    this.threatImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: true,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.threat) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // GENERIC\n    this.genericImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: this.state.imagesLoaded.threat,\n            generic: true,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.generic) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.damage &&\n      !prevProps.card?.counterTokens.damage &&\n      !!this.props.card?.counterTokens.damage\n    ) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    if (\n      !this.state.imagesLoaded.threat &&\n      !prevProps.card?.counterTokens.threat &&\n      !!this.props.card?.counterTokens.threat\n    ) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.generic &&\n      !prevProps.card?.counterTokens.generic &&\n      !!this.props.card?.counterTokens.generic\n    ) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    if (!this.props.card) return null;\n\n    const damageX = this.props.x - this.damageImg.naturalWidth / 2;\n    const damageY = this.props.y - cardConstants.CARD_HEIGHT / 2 + 20;\n    const showDamage =\n      this.state.imagesLoaded.damage && !!this.props.card.counterTokens.damage;\n\n    const damageToken = showDamage ? (\n      <Rect\n        key={`${this.props.card.id}-damageToken`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        fillPatternImage={this.damageImg}\n      ></Rect>\n    ) : null;\n\n    const damageText = showDamage ? (\n      <Text\n        key={`${this.props.card.id}-damageText`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        text={`${this.props.card.counterTokens.damage}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const threatX = this.props.x - this.threatImg.naturalWidth / 2;\n    const threatY = damageY + this.damageImg.naturalHeight + 5;\n    const showThreat =\n      this.state.imagesLoaded.threat && !!this.props.card.counterTokens.threat;\n\n    const threatToken = showThreat ? (\n      <Rect\n        key={`${this.props.card.id}-threatToken`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        fillPatternImage={this.threatImg}\n      ></Rect>\n    ) : null;\n\n    const threatText = showThreat ? (\n      <Text\n        key={`${this.props.card.id}-threatText`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        text={`${this.props.card.counterTokens.threat}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const genericX = this.props.x - this.threatImg.naturalWidth / 2;\n    const genericY = threatY + this.threatImg.naturalHeight + 5;\n    const showGeneric =\n      this.state.imagesLoaded.generic &&\n      !!this.props.card.counterTokens.generic;\n\n    const genericToken = showGeneric ? (\n      <Rect\n        key={`${this.props.card.id}-genericToken`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        fillPatternImage={this.genericImg}\n      ></Rect>\n    ) : null;\n\n    const genericText = showGeneric ? (\n      <Text\n        key={`${this.props.card.id}-genericText`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        text={`${this.props.card.counterTokens.generic}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    return [\n      damageToken,\n      damageText,\n      threatToken,\n      threatText,\n      genericToken,\n      genericText,\n    ];\n  }\n}\n\nexport default CardTokens;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.liveState.present.cards;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const getPanMode = (state: RootState) =>\n  state.liveState.present.cards.panMode;\n\nexport const getDropTargetCardsById = createSelector(getCards, (cards) => {\n  const returnVal: {\n    [key: string]: { ownerRef: string; card: ICardStack | null };\n  } = {};\n  Object.entries(cards.dropTargetCards).forEach(([key, value]) => {\n    if (!!value) {\n      returnVal[value.id] = { ownerRef: key, card: value };\n    }\n  });\n\n  return returnVal;\n});\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const myPeerRef = uuidv4();\n\nexport type PlayerColor =\n  | \"red\"\n  | \"cyan\"\n  | \"green\"\n  | \"blue\"\n  | \"magnenta\"\n  | \"yellow\";\n\nexport const possibleColors: PlayerColor[] = [\n  \"red\",\n  \"cyan\",\n  \"green\",\n  \"blue\",\n  \"magnenta\",\n  \"yellow\",\n];\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect, Text } from \"react-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { myPeerRef, PlayerColor } from \"./constants/app-constants\";\nimport { cardConstants } from \"./constants/card-constants\";\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  name: string;\n  code: string;\n  selectedColor: PlayerColor;\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDoubleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTargetColor?: string;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrls: string[];\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  imageLoadFailed: number;\n  prevImgUrls: string[];\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nconst stringArraysEqual = (array1: string[], array2: string[]) => {\n  return (\n    array1.length === array2.length &&\n    array1.every((value, index) => {\n      return value === array2[index];\n    })\n  );\n};\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (!stringArraysEqual(props.imgUrls, state.prevImgUrls ?? [])) {\n      return {\n        imageLoaded: false,\n        imageLoadFailed: 0,\n        prevImgUrls: props.imgUrls,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private imgs: HTMLImageElement[] = [];\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private unmounted: boolean;\n  private touchTimer: any = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      imageLoadFailed: 0,\n      prevImgUrls: this.props.imgUrls,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.initCardImages(props);\n\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      !stringArraysEqual(prevProps.imgUrls, this.props.imgUrls)\n    ) {\n      this.setState({\n        imageLoaded: false,\n        imageLoadFailed: 0,\n      });\n      this.initCardImages(this.props);\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  private initCardImages = (props: IProps) => {\n    this.imgs = props.imgUrls.map(() => new Image());\n\n    // When the image loads, set a flag in the state\n    this.imgs.forEach(\n      (img) =>\n        (img.onload = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoaded: true,\n            });\n          }\n        })\n    );\n\n    this.imgs.forEach(\n      (img) =>\n        (img.onerror = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoadFailed: this.state.imageLoadFailed + 1,\n            });\n          }\n        })\n    );\n\n    props.imgUrls.forEach((imgUrl, index) => (this.imgs[index].src = imgUrl));\n  };\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.renderCard(this.state.imageLoaded);\n  }\n\n  private renderCard(imageLoaded: boolean) {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderUnanimatedCard(heightToUse, widthToUse, imageLoaded);\n  }\n\n  // Unfortunately, if you try to use shadow / blur to indicate selection\n  // (which I did at first and looks better, imo) the performance in horrible,\n  // even with some reccommended settings (shadowForStrokeEnabled = false and\n  // hitStrokeWidth = 0). So we'll just use stroke / border for everything\n  private getStrokeColor = () => {\n    if (!!this.props.dropTargetColor) {\n      return this.props.dropTargetColor;\n    }\n\n    if (this.props.selected) {\n      return this.props.selectedColor;\n    }\n\n    return \"\";\n  };\n\n  private renderUnanimatedCard = (\n    heightToUse: number,\n    widthToUse: number,\n    imageLoaded: boolean\n  ) => {\n    const imgToUse = imageLoaded\n      ? this.imgs.find((i) => i.complete && i.naturalHeight !== 0)\n      : undefined;\n\n    const scale = this.getScale(imgToUse, widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.getStrokeColor()}\n        strokeWidth={!!this.getStrokeColor() ? 4 : 0}\n        fillPatternRotation={\n          !imageLoaded ||\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={imgToUse}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        fill={imageLoaded ? undefined : \"gray\"}\n        shadowForStrokeEnabled={false}\n        hitStrokeWidth={0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={\n          this.props.controlledBy === \"\" ||\n          this.props.controlledBy === myPeerRef\n        }\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEnd}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowForStrokeEnabled={false}\n          hitStrokeWidth={0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens =\n      this.props.dragging || this.props.isGhost ? null : (\n        <CardTokensContainer\n          key={`${this.props.id}-cardTokens`}\n          id={this.props.id}\n          x={this.props.x}\n          y={this.props.y}\n        ></CardTokensContainer>\n      );\n\n    const noImageCardNameText = this.renderCardName(\n      offset,\n      widthToUse,\n      heightToUse\n    );\n\n    return [\n      cardStack,\n      card,\n      noImageCardNameText,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private renderCardName(\n    offset: Vector2d,\n    cardWidth: number,\n    cardHeight: number\n  ) {\n    const textOffset = { x: offset.x - 10, y: offset.y - 20 };\n    const textItem =\n      this.state.imageLoadFailed === this.props.imgUrls.length ? (\n        <Text\n          key={`${this.props.id}-cardnametext`}\n          offset={textOffset}\n          x={this.props.x}\n          y={this.props.y}\n          width={cardWidth - 10}\n          height={cardHeight - 20}\n          fontSize={24}\n          text={`${this.props.name} ${this.props.code}`}\n          draggable={\n            this.props.controlledBy === \"\" ||\n            this.props.controlledBy === myPeerRef\n          }\n          onDragStart={this.handleDragStart}\n          onDragMove={this.handleDragMove}\n          onDragEnd={this.handleDragEnd}\n          onDblClick={this.handleDoubleClick}\n          onDblTap={this.handleDoubleClick}\n          onClick={this.handleClick}\n          onTap={this.handleClick}\n          onMouseDown={this.handleMouseDown}\n          onTouchStart={this.handleMouseDown}\n          onMouseOver={this.handleMouseOver}\n          onMouseOut={this.handleMouseOut}\n          onContextMenu={this.handleContextMenu}\n        ></Text>\n      ) : null;\n\n    return textItem;\n  }\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrls.some((i) => i.includes(\"standard\")) &&\n      this.props.imgUrls.some((i) => i.includes(\"_back\"))\n    );\n  }\n\n  private getScale(\n    img: HTMLImageElement | undefined,\n    widthToUse: number,\n    heightToUse: number\n  ) {\n    const width = !!img ? widthToUse / img.naturalWidth : widthToUse;\n\n    const widthHorizontal = !!img ? heightToUse / img.naturalWidth : widthToUse;\n\n    const height = !!img ? heightToUse / img.naturalHeight : heightToUse;\n\n    const heightHorizontal = !!img\n      ? widthToUse / img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id, event);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id, event);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleTouchStart = (event: KonvaEventObject<TouchEvent>) => {\n    event.cancelBubble = true;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.handleContextMenu(\n        (event as unknown) as KonvaEventObject<PointerEvent>\n      );\n    }, 750);\n  };\n\n  private handleTouchMove = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleTouchEnd = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <Menu\n          keepMounted\n          open={true}\n          onClose={this.props.hideContextMenu}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{\n            top: this.props.position.y + 8,\n            left: this.props.position.x + 8,\n          }}\n        >\n          {this.props.items.map((i, index) => (\n            <MenuItem\n              key={`contextMenu-item-${index}`}\n              onClick={this.handleContextItemClicked(i)}\n            >\n              {i.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble} onKeyPress={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      let encounterCards: string[] = [];\n      value.cards\n        // We don't want cards that show up as another card's 'back_link' to be loaded as separate cards\n        .filter((c) => !value.cards.some((oc) => oc.back_link === c.code))\n        // Add the number of cards indicated by the quantity field\n        .forEach((c) => {\n          encounterCards = encounterCards.concat(\n            Array.from({ length: c.quantity }).map((_i) => c.code)\n          );\n        });\n      this.props.loadCards(encounterCards);\n    }\n  };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n\nexport const getCenter = (p1: Vector2d, p2: Vector2d) => {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    const baseState = JSON.parse(serializedState || \"{}\");\n\n    return baseState.present ?? baseState;\n  } catch (err) {\n    console.error(\"problem parsing\");\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n    console.error(\"Error writing state to local storage\");\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { CounterTokenType, StatusTokenType } from \"./cards.slice\";\n\nexport interface ICardStack {\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n  counterTokens: {\n    [K in CounterTokenType]: number;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  dropTargetCards: { [key: string]: ICardStack | null };\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"liveState\")?.cards ?? {};\n\n// Make sure initially, none of the cards are \"owned\" / \"selected\"\nif (!!localStorageState.cards) {\n  localStorageState.cards.forEach((c) => {\n    c.controlledBy = \"\";\n    c.selected = false;\n  });\n}\n\nconst defaultState: ICardsState = {\n  cards: [],\n  ghostCards: [],\n  dropTargetCards: {},\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { fetchDecklistById } from \"./cards.thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport {\n  addCardStackWithId,\n  drawCardsOutOfCardStackWithIds,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\nexport enum CounterTokenType {\n  Damage = \"damage\",\n  Threat = \"threat\",\n  Generic = \"generic\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  ref: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (\n    cardToUpdate &&\n    (cardToUpdate.controlledBy === \"\" || cardToUpdate.controlledBy === ref)\n  ) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedAndControlledCard = (\n  state: ICardsState,\n  actorRef: string,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => card.selected && card.controlledBy === actorRef)\n    .forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; unselectOtherCards: boolean }>\n> = (state, action) => {\n  if (action.payload.unselectOtherCards) {\n    unselectAllCardsReducer(state, action);\n  }\n\n  mutateCardWithId(\n    state,\n    action.payload.id,\n    (action as any).ACTOR_REF,\n    (card) => {\n      card.selected = true;\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  );\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = false;\n    card.controlledBy = \"\";\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = !card.selected;\n    if (!card.selected) {\n      card.controlledBy = \"\";\n    } else {\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === (action as any).ACTOR_REF &&\n        (card.id === action.payload || card.selected)\n    )\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack | null = null;\n\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload.id ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one. But only if the card is owned / controlled by us\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  if (\n    !!primaryCard &&\n    (primaryCard as ICardStack).controlledBy === (action as any).ACTOR_REF\n  ) {\n    foreachUnselectedCard(state, (card) => {\n      const distance = getDistance(\n        { x: card.x, y: card.y },\n        !!primaryCard ? { x: primaryCard.x, y: primaryCard.y } : { x: 0, y: 0 }\n      );\n      if (distance < CARD_DROP_TARGET_DISTANCE) {\n        possibleDropTargets.push({\n          distance,\n          card,\n        });\n      }\n    });\n  }\n\n  state.dropTargetCards[(action as any).ACTOR_REF] =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCards[(action as any).ACTOR_REF]) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCards[(action as any).ACTOR_REF]) {\n    state.cards = state.cards.filter(\n      (card) =>\n        !(\n          card.id === action.payload ||\n          (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n        )\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCards[(action as any).ACTOR_REF]?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCards[(action as any).ACTOR_REF] = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (\n        card &&\n        (card.controlledBy === \"\" ||\n          card.controlledBy === (action as any).ACTOR_REF)\n      ) {\n        card.selected = true;\n        card.controlledBy = (action as any).ACTOR_REF;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState, PayloadAction<any>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === \"\" ||\n        card.controlledBy === (action as any).ACTOR_REF\n    )\n    .forEach((card) => {\n      card.selected = false;\n      card.controlledBy = \"\";\n    });\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.selected &&\n        (card.controlledBy === \"\" ||\n          card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n\nconst adjustCounterTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{\n    id: string;\n    tokenType: CounterTokenType;\n    delta?: number;\n    value?: number;\n  }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    if (action.payload.value !== undefined) {\n      cardToToggle.counterTokens[action.payload.tokenType] =\n        action.payload.value;\n    } else if (action.payload.delta !== undefined) {\n      cardToToggle.counterTokens[action.payload.tokenType] +=\n        action.payload.delta;\n    }\n    if (cardToToggle.counterTokens[action.payload.tokenType] < 0) {\n      cardToToggle.counterTokens[action.payload.tokenType] = 0;\n    }\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    resetCards: resetCardsReducer,\n    toggleToken: toggleTokenReducer,\n    adjustCounterToken: adjustCounterTokenReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.cards = action.payload.liveState.present.cards.cards;\n      state.ghostCards = action.payload.liveState.present.cards.ghostCards;\n    });\n\n    builder.addCase(replaceCardStack, (state, action) => {\n      const cardToReplaceStack = state.cards.find(\n        (c) => c.id === action.payload.id\n      );\n      if (!!cardToReplaceStack) {\n        cardToReplaceStack.cardStack = action.payload.newStack;\n      }\n    });\n\n    builder.addCase(resetApp, (state) => {\n      state.cards = [];\n      // state.previewCard = null;\n      state.dropTargetCards = {};\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(addCardStackWithId, (state, action) => {\n      const newStack: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.id,\n        cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(newStack);\n    });\n\n    builder.addCase(pullCardOutOfCardStackWithId, (state, action) => {\n      const cardStackToUse = state.cards.find(\n        (c) => c.id === action.payload.cardStackId\n      );\n      if (!!cardStackToUse && cardStackToUse.cardStack.length > 1) {\n        const newCardStack: ICardDetails[] = [\n          { jsonId: action.payload.jsonId },\n        ];\n        const newCard = Object.assign({}, cardStackToUse, {\n          cardStack: newCardStack,\n        });\n        newCard.id = action.payload.id;\n        newCard.selected = true;\n        newCard.controlledBy = (action as any).ACTOR_REF;\n        newCard.x = newCard.x + cardConstants.CARD_WIDTH + 5;\n\n        // Find the first instance of the card with the json id. Note that because there\n        // might be multiple cards with the same json id, we can't just do a filter\n        const cardIndexToRemove = cardStackToUse.cardStack.findIndex(\n          (c) => c.jsonId === action.payload.jsonId\n        );\n\n        if (cardIndexToRemove !== -1) {\n          cardStackToUse.cardStack.splice(cardIndexToRemove, 1);\n        }\n\n        cardStackToUse.selected = false;\n        cardStackToUse.controlledBy = \"\";\n\n        state.cards.push(newCard);\n      }\n    });\n\n    builder.addCase(startCardMoveWithSplitStackId, (state, action) => {\n      // first, if the card moving isn't currently selected, clear all _our_ selected cards\n      const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n      if (cardToStartMoving && !cardToStartMoving.selected) {\n        state.cards = state.cards.map((card) => {\n          if (\n            card.controlledBy === \"\" ||\n            card.controlledBy === (action as any).ACTOR_REF\n          ) {\n            card.selected = card.id === action.payload.id;\n            if (card.selected) {\n              card.controlledBy = (action as any).ACTOR_REF;\n            } else {\n              card.controlledBy = \"\";\n            }\n          }\n          return card;\n        });\n      }\n\n      // If we are splitting, make a new stack of cards\n      if (action.payload.splitTopCard) {\n        const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n        if (!cardToMove) {\n          throw new Error(\"Expected to find card\");\n        }\n\n        cardToMove.selected = false;\n        cardToMove.controlledBy = \"\";\n\n        const topCard = cardToMove.cardStack.shift();\n        const newCard = Object.assign({}, cardToMove, {\n          selected: true,\n          controlledBy: (action as any).ACTOR_REF,\n          dragging: true,\n          cardStack: [topCard],\n        });\n\n        cardToMove.id = action.payload.splitCardId;\n\n        state.cards.push(newCard);\n      }\n\n      // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n      state.ghostCards = [];\n\n      if (!action.payload.splitTopCard) {\n        foreachSelectedAndControlledCard(\n          state,\n          (action as any).ACTOR_REF,\n          (card) => {\n            card.dragging = true;\n            state.ghostCards.push(Object.assign({}, card));\n          }\n        );\n      }\n\n      //Finally, if we have a preview card, clear it\n      // state.previewCard = null;\n    });\n\n    builder.addCase(drawCardsOutOfCardStackWithIds, (state, action) => {\n      if (action.payload.numberToDraw !== action.payload.idsToUse.length) {\n        throw new Error(\"Did not receive the expected number of ids\");\n      }\n\n      // First, unselect everything else of ours\n      unselectAllCardsReducer(state, (action as unknown) as any);\n\n      // Get the cardstack in question\n      let cardStackToUse = state.cards.find(\n        (c) => c.id === action.payload.cardStackId\n      );\n\n      if (!cardStackToUse) {\n        throw new Error(\n          `Couldn't find card stack with id ${action.payload.cardStackId}`\n        );\n      }\n\n      const sourceCardStackId = cardStackToUse.id;\n\n      //Next, for each card we should draw, remove it from the stack and make a new stack, which should be selected\n      for (let index = 0; index < action.payload.numberToDraw; index++) {\n        if (!!cardStackToUse) {\n          const topCardDetails = cardStackToUse.cardStack.shift();\n          if (!topCardDetails) {\n            throw new Error(\"Expected to find a top card, but didn't\");\n          }\n          const newCardStack: ICardDetails[] = [\n            { jsonId: topCardDetails.jsonId },\n          ];\n          const newCard = Object.assign({}, cardStackToUse, {\n            cardStack: newCardStack,\n          });\n          newCard.id = action.payload.idsToUse[index];\n          newCard.selected = true;\n          newCard.controlledBy = (action as any).ACTOR_REF;\n          newCard.faceup = true;\n          newCard.x = newCard.x + (cardConstants.CARD_WIDTH + 5) * (index + 1);\n          newCard.y += cardConstants.CARD_HEIGHT;\n\n          if (cardStackToUse.cardStack.length === 0) {\n            // we went through all the cards, remove the original card\n            state.cards = state.cards.filter((c) => c.id !== sourceCardStackId);\n            cardStackToUse = undefined;\n          }\n\n          state.cards.push(newCard);\n        }\n      }\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.heroId,\n        cardStack: [\n          { jsonId: action.payload.data.investigator_code },\n          ...action.payload.extraHeroCards,\n        ],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.dataId,\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.encounterDeckId,\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.obligationDeckId,\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  togglePanMode,\n  flipCards,\n  resetCards,\n  toggleToken,\n  adjustCounterToken,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { ICardDetails } from \"./initialState\";\n\nexport interface AddCardStackWithIdPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n  id: string;\n}\n\nexport interface PullCardOutOfCardStackWithIdPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n  id: string;\n}\n\nexport interface StartCardMoveWithSplitStackIdPayload {\n  id: string;\n  splitTopCard: boolean;\n  splitCardId: string;\n}\n\nexport interface DrawCardsOutOfCardStackWithIdsPayload {\n  cardStackId: string;\n  numberToDraw: number;\n  idsToUse: string[];\n}\n\nexport interface ReplaceCardStackPayload {\n  id: string;\n  newStack: ICardDetails[];\n}\n\nexport const addCardStackWithId = createAction<AddCardStackWithIdPayload>(\n  \"addCardStackWithId\"\n);\n\nexport const pullCardOutOfCardStackWithId = createAction<PullCardOutOfCardStackWithIdPayload>(\n  \"pullCardOutOfCardStackWithId\"\n);\n\nexport const drawCardsOutOfCardStackWithIds = createAction<DrawCardsOutOfCardStackWithIdsPayload>(\n  \"drawCardsOutOfCardStackWithIds\"\n);\n\nexport const startCardMoveWithSplitStackId = createAction<StartCardMoveWithSplitStackIdPayload>(\n  \"startCardMoveWithSplitStackId\"\n);\n\nexport const replaceCardStack = createAction<ReplaceCardStackPayload>(\n  \"replaceCardStack\"\n);\n","import { ICardDetails } from \"../features/cards/initialState\";\n\n// For some reason, the codes from marvelcdb and the images from cardgamedb can be off\nexport const CARD_PACK_REMAPPING: { [key: string]: string } = {\n  bkw: \"07\",\n  cap: \"04\",\n  drs: \"08\",\n  hlk: \"09\",\n  trors: \"10\",\n  twc: \"03\",\n};\n\n// export const EXTRA_CARDS: { [key: string]: { [key: string]: number } } = {\n//   doctor_strange: {\n//     \"09032\": 1,\n//     \"09033\": 1,\n//     \"09034\": 1,\n//     \"09035\": 1,\n//     \"09036\": 1,\n//   },\n//   ant: {\n//     \"12001c\": 1,\n//   },\n// };\n\nexport const EXTRA_CARDS: { [key: string]: ICardDetails[] } = {\n  doctor_strange: [\n    { jsonId: \"09032\" },\n    { jsonId: \"09033\" },\n    { jsonId: \"09034\" },\n    { jsonId: \"09035\" },\n    { jsonId: \"09036\" },\n  ],\n  ant: [{ jsonId: \"12001c\" }],\n};\n","import { Action, createAsyncThunk, ThunkAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  addCardStackWithId,\n  drawCardsOutOfCardStackWithIds,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\nimport { ICardDetails } from \"./initialState\";\nimport { getCards } from \"./cards.selectors\";\nimport { EXTRA_CARDS } from \"../../constants/card-pack-mapping\";\n\ninterface AddCardStackPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n}\n\nexport interface PullCardOutOfCardStackPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n}\n\nexport interface StartCardMovePayload {\n  id: string;\n  splitTopCard: boolean;\n}\n\nexport interface DrawCardsOutOfCardStackPayload {\n  cardStackId: string;\n  numberToDraw: number;\n}\n\nexport const shuffleStack = (\n  id: string\n): ThunkAction<void, RootState, unknown, Action<string>> => (\n  dispatch,\n  getState\n) => {\n  const cardsState = getCards(getState());\n  const stackToShuffle = cardsState.cards.find((c) => c.id === id);\n  if (!!stackToShuffle) {\n    const shuffledStack = shuffle(stackToShuffle.cardStack);\n    dispatch(replaceCardStack({ id, newStack: shuffledStack }));\n  }\n};\n\nexport const addCardStack = (\n  payload: AddCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(addCardStackWithId(payloadWithId));\n};\n\nexport const pullCardOutOfCardStack = (\n  payload: PullCardOutOfCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(pullCardOutOfCardStackWithId(payloadWithId));\n};\n\nexport const startCardMove = (\n  payload: StartCardMovePayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    splitCardId: uuidv4(),\n  };\n  dispatch(startCardMoveWithSplitStackId(payloadWithId));\n};\n\nexport const drawCardsOutOfCardStack = (\n  payload: DrawCardsOutOfCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const possibleIds = Array.from({ length: payload.numberToDraw }).map((_i) =>\n    uuidv4()\n  );\n  const payloadWithIds = {\n    ...payload,\n    idsToUse: possibleIds,\n  };\n  dispatch(drawCardsOutOfCardStackWithIds(payloadWithIds));\n};\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSet = heroCardsData[response.data.investigator_code];\n    const heroSetCode = heroSet.set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          (value.set_code === `${heroSetCode}` ||\n            value.set_code === `${heroSetCode}_nemesis`) &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    // get the encounter cards for this deck\n    const heroEncounterDeckData = Object.values(encounterCardsData).filter(\n      (value) =>\n        value.set_code === `${heroSetCode}_nemesis` &&\n        value.type_code !== \"obligation\"\n    );\n\n    let heroEncounterDeck: string[] = [];\n    heroEncounterDeckData.forEach((cd) => {\n      heroEncounterDeck = heroEncounterDeck.concat(\n        Array.from({ length: cd.quantity }).map((_i) => cd.code)\n      );\n    });\n\n    // check to see if there are any special extra cards for this hero\n    const extraCards = EXTRA_CARDS[heroSetCode ?? \"\"] ?? [];\n\n    // response.data.slots = { ...extraCards, ...response.data.slots };\n\n    return {\n      position: payload.position,\n      heroId: uuidv4(),\n      data: response.data,\n      dataId: uuidv4(),\n      extraHeroCards: extraCards,\n      relatedEncounterDeck: heroEncounterDeck,\n      encounterDeckId: uuidv4(),\n      relatedObligationDeck: heroObligationDeck,\n      obligationDeckId: uuidv4(),\n    };\n  }\n);\n\nconst shuffle = (array: ICardDetails[]): ICardDetails[] => {\n  const returnArray = JSON.parse(JSON.stringify(array));\n  var currentIndex = returnArray.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = returnArray[currentIndex];\n    returnArray[currentIndex] = returnArray[randomIndex];\n    returnArray[randomIndex] = temporaryValue;\n  }\n\n  return returnArray;\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"./rootReducer\";\n\nexport const resetApp = createAction(\"resetAction\");\n\nexport const receiveRemoteGameState = createAction<RootState>(\n  \"receiveRemoteGameState\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.handleClick}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    this.props.completed();\n  };\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { ICardStack } from \"./features/cards/initialState\";\ninterface IProps {\n  cardsDataEntities: ICardData;\n  card: ICardStack;\n  cardSelected: (jsonId: string) => void;\n}\n\nclass CardStackCardSelector extends Component<IProps> {\n  private cardsDataInStack: CardData[] = [];\n\n  constructor(props: IProps) {\n    super(props);\n    this.cardsDataInStack = props.card.cardStack.map((c) => {\n      return this.props.cardsDataEntities[c.jsonId];\n    });\n  }\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble} onKeyPress={this.cancelBubble}>\n        <Autocomplete\n          id=\"cardstack-card-selector-combobox\"\n          options={this.cardsDataInStack}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Find Card...\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: CardData | null) => {\n    if (!!value && !!this.props.cardSelected) {\n      this.props.cardSelected(value.code);\n    }\n  };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default CardStackCardSelector;\n","import { connect } from \"react-redux\";\nimport CardStackCardSelector from \"./CardStackCardSelector\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cardsDataEntities: getCardsDataEntities(state),\n  };\n};\n\nconst CardStackCardSelectorContainer = connect(\n  mapStateToProps,\n  {}\n)(CardStackCardSelector);\n\nexport default CardStackCardSelectorContainer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { Vector2d } from \"konva/types/types\";\nimport { Group, Rect, Text } from \"react-konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\n\ninterface IProps {\n  id: string;\n  pos: Vector2d;\n  value: number;\n  updateCounterValueBy: (amount: number) => void;\n  handleContextMenu: (event: KonvaEventObject<PointerEvent>) => void;\n  onDragEnd: (event: KonvaEventObject<DragEvent>) => void;\n}\n\nclass Counter extends Component<IProps> {\n  private touchTimer: any = null;\n\n  render() {\n    return (\n      <Group\n        x={this.props.pos.x}\n        y={this.props.pos.y}\n        draggable={true}\n        onContextMenu={this.props.handleContextMenu}\n        onDragEnd={this.props.onDragEnd}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEnd}\n      >\n        <Rect cornerRadius={30} width={200} height={100} fill={\"red\"}></Rect>\n        <Text\n          width={200}\n          height={100}\n          fontSize={36}\n          text={`${this.props.value}`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n        ></Text>\n        <Text\n          x={10}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`-`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleDecrement}\n          onTap={this.handleDecrement}\n        ></Text>\n        <Text\n          x={140}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`+`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleIncrement}\n          onTap={this.handleIncrement}\n        ></Text>\n      </Group>\n    );\n  }\n\n  private handleDecrement = () => {\n    this.props.updateCounterValueBy(-1);\n  };\n\n  private handleIncrement = () => {\n    this.props.updateCounterValueBy(1);\n  };\n\n  private handleTouchStart = (event: KonvaEventObject<TouchEvent>) => {\n    event.cancelBubble = true;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.props.handleContextMenu(\n        (event as unknown) as KonvaEventObject<PointerEvent>\n      );\n    }, 750);\n  };\n\n  private handleTouchMove = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleTouchEnd = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n}\n\nexport default Counter;\n","import { Component } from \"react\";\nimport * as React from \"react\";\ninterface IProps {\n  connect: (peerId: string) => void;\n}\n\nclass PeerConnector extends Component<IProps> {\n  public inputRef: HTMLInputElement | null = null;\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble} onKeyPress={this.cancelBubble}>\n        <input\n          ref={(ref) => {\n            if (!ref) return;\n            this.inputRef = ref;\n          }}\n        ></input>\n        <button onClick={this.connect}>Connect</button>\n      </div>\n    );\n  }\n\n  private connect = (_event: any) => {\n    console.log(\"connecting with peer id \" + this.inputRef?.value);\n\n    this.props.connect(this.inputRef?.value || \"\");\n  };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default PeerConnector;\n","export const MISSING_CARD_IMAGE_MAP: { [key: string]: string } = {\n  \"02001a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"8665869b-fae4-494e-91d1-1e8c308220c2\" +\n    \".jpg\",\n\n  \"02001b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"8665869b-fae4-494e-91d1-1e8c308220c2\" +\n    \".b.jpg\",\n\n  \"02002a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"cfd051be-4ade-4cf8-b575-4b673cfa9a92\" +\n    \".jpg\",\n\n  \"02002b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"cfd051be-4ade-4cf8-b575-4b673cfa9a92\" +\n    \".b.jpg\",\n\n  \"02003a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b16187a4-3f29-4a4b-8b66-6e8c7524c402\" +\n    \".jpg\",\n\n  \"02003b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b16187a4-3f29-4a4b-8b66-6e8c7524c402\" +\n    \".b.jpg\",\n\n  \"02004\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b35084d9-3a2b-418c-b1a4-e4929de16a2c\" +\n    \".jpg\",\n\n  \"02004_double_sided_back\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b35084d9-3a2b-418c-b1a4-e4929de16a2c\" +\n    \".b.jpg\",\n\n  \"02005\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"1eae757a-25b2-4b29-a8e7-f43b12c531b0\" +\n    \".jpg\",\n\n  \"02005_double_sided_back\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"1eae757a-25b2-4b29-a8e7-f43b12c531b0\" +\n    \".b.jpg\",\n\n  \"02006a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"0a59161d-7db6-4328-9eeb-1906ce8715a5\" +\n    \".jpg\",\n\n  \"02006b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"0a59161d-7db6-4328-9eeb-1906ce8715a5\" +\n    \".b.jpg\",\n  \"14001a\": \"https://marvelcdb.com/bundles/cards/14001a.jpg\",\n  \"14001b\": process.env.PUBLIC_URL + \"/images/missing/qsv.b.jpg\",\n};\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport { CounterTokenType } from \"./features/cards/cards.slice\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\ninterface IProps {\n  id: string;\n  tokenType: CounterTokenType;\n  updated: (payload: {\n    id: string;\n    tokenType: CounterTokenType;\n    value: number;\n  }) => void;\n}\n\nclass TokenValueModifier extends Component<IProps> {\n  inputValue: string = \"0\";\n\n  private focusInputField = (input: any) => {\n    if (input) {\n      setTimeout(() => {\n        input.querySelector(\"input\").focus();\n      }, 100);\n    }\n  };\n\n  render() {\n    return (\n      <div\n        onClick={this.cancelBubble}\n        onKeyPress={this.cancelBubble}\n        className=\"token-field-row\"\n      >\n        <TextField\n          ref={this.focusInputField}\n          onKeyPress={this.handleKeyPress}\n          variant=\"outlined\"\n          type=\"number\"\n          onChange={(event) => {\n            this.inputValue = event.target.value;\n          }}\n        ></TextField>\n        <Button\n          onClick={this.handleClick}\n          style={{ height: \"56px\", marginLeft: \"5px\" }}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          Set\n        </Button>\n      </div>\n    );\n  }\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const code = event.key.toLocaleLowerCase();\n    if (code === \"enter\") {\n      this.complete(+this.inputValue);\n    }\n  };\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    this.complete(+this.inputValue);\n  };\n\n  private complete = (newValue: number) => {\n    this.props.updated({\n      id: this.props.id,\n      tokenType: this.props.tokenType,\n      value: newValue,\n    });\n  };\n\n  // private preventDefault = (\n  //   event: React.MouseEvent<HTMLElement, MouseEvent>\n  // ) => {\n  //   event.preventDefault();\n  // };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default TokenValueModifier;\n","import { ReactReduxContext, Provider } from \"react-redux\";\nimport * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport {\n  CounterTokenType,\n  StatusTokenType,\n} from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getCenter, getDistance } from \"./utilities/geo\";\nimport CardStackCardSelectorContainer from \"./CardStackCardSelectorContainer\";\nimport Counter from \"./Counter\";\nimport PeerConnector from \"./PeerConnector\";\nimport { myPeerRef, PlayerColor } from \"./constants/app-constants\";\nimport { ICounter } from \"./features/counters/initialState\";\nimport { MISSING_CARD_IMAGE_MAP } from \"./constants/card-missing-image-map\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { CARD_PACK_REMAPPING } from \"./constants/card-pack-mapping\";\nimport { DrawCardsOutOfCardStackPayload } from \"./features/cards/cards.thunks\";\nimport TokenValueModifier from \"./TokenValueModifier\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  panMode: boolean;\n  playerColors: { [key: string]: PlayerColor };\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (payload: { id: string; unselectOtherCards: boolean }) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: (payload?: any) => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  setPreviewCardId: (id: string) => void;\n  clearPreviewCard: () => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n  adjustCounterToken: (payload: {\n    id: string;\n    tokenType: CounterTokenType;\n    delta?: number;\n    value?: number;\n  }) => void;\n  pullCardOutOfCardStack: (payload: {\n    cardStackId: string;\n    jsonId: string;\n    pos: Vector2d;\n  }) => void;\n  addNewCounter: (pos: Vector2d) => void;\n  updateCounterValue: (payload: { id: string; delta: number }) => void;\n  removeCounter: (id: string) => void;\n  moveCounter: (payload: { id: string; newPos: Vector2d }) => void;\n  connectToRemoteGame: (peerId: string) => void;\n  undo: () => void;\n  redo: () => void;\n  counters: ICounter[];\n  requestResync: () => void;\n  peerId: string;\n  dropTargetCardsById: {\n    [key: string]: { ownerRef: string; card: ICardStack | null };\n  };\n  drawCardsOutOfCardStack: (payload: DrawCardsOutOfCardStackPayload) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n  showCardSearch: boolean;\n  cardSearchPosition: Vector2d | null;\n  cardStackForSearching: ICardStack | null;\n  showPeerConnector: boolean;\n  peerConnectorPosition: Vector2d | null;\n  showTokenValueModifier: boolean;\n  tokenValueModifierProps: { id: string; tokenType: CounterTokenType } | null;\n  tokenValueModifierPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  private touchTimer: any = null;\n\n  private lastCenter: Vector2d | null = null;\n  private lastDist: number = 0;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (!!Konva) {\n      Konva.hitOnDragEnabled = true;\n    }\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n      showTokenValueModifier: false,\n      tokenValueModifierProps: null,\n      tokenValueModifierPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            code={this.getCardCode(card)}\n            name={this.getCardName(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTargetColor={\n              this.props.playerColors[\n                this.props.dropTargetCardsById[card.id]?.ownerRef\n              ] ?? \"\"\n            }\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.handleCardClick(card)}\n            handleHover={this.props.setPreviewCardId}\n            handleHoverLeave={this.props.clearPreviewCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          name={this.getCardName(card)}\n          code={this.getCardCode(card)}\n          selectedColor={this.props.playerColors[card.controlledBy] ?? \"black\"}\n          controlledBy={card.controlledBy}\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrls={this.getImgUrls(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            name={this.getCardName(card)}\n            code={this.getCardCode(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const iAmDragging = this.props.cards.cards.some(\n      (c) => c.dragging && c.controlledBy === myPeerRef\n    );\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              !iAmDragging &&\n              !!this.props.gameState.previewCard &&\n              card.id === this.props.gameState.previewCard.id\n          )\n          .map((card) => {\n            const isHorizontal = HORIZONTAL_TYPE_CODES.includes(\n              this.getCardType(card)\n            );\n            const imgUrls = this.getImgUrls(card);\n            const rawPos = this.getRawPreviewCardPosition(isHorizontal);\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n\n            return imgUrls.some(\n              (url) => url.indexOf(\"card_back\") !== -1\n            ) ? null : (\n              <Card\n                name={this.getCardName(card)}\n                code={this.getCardCode(card)}\n                selectedColor={\n                  this.props.playerColors[card.controlledBy] ?? \"black\"\n                }\n                controlledBy={card.controlledBy}\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={isHorizontal}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrls={imgUrls}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={\n                  cardConstants.CARD_PREVIEW_HEIGHT /\n                  this.props.gameState.stageZoom.y\n                }\n                width={\n                  cardConstants.CARD_PREVIEW_WIDTH /\n                  this.props.gameState.stageZoom.x\n                }\n              />\n            );\n          })\n          .filter((c): c is JSX.Element => c !== null)\n      : [];\n\n    return (\n      <div\n        className=\"play-area\"\n        tabIndex={1}\n        onKeyDown={this.handleKeyDown}\n        onKeyPress={this.handleKeyPress}\n      >\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        {this.renderCardSearch()}\n        {this.renderPeerConnector()}\n        {this.renderTokenModifier()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchStart={this.handleTouchStart}\n              onTouchMove={this.handleTouchMove}\n              onTouchEnd={this.handleTouchEnd}\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer>\n                  {this.props.counters.map((counter) => (\n                    <Counter\n                      key={`${counter.id}-counter`}\n                      id={counter.id}\n                      pos={counter.position}\n                      value={counter.value}\n                      updateCounterValueBy={this.handleCounterValueUpdate(\n                        counter.id\n                      )}\n                      handleContextMenu={this.handleCounterContextMenu(\n                        counter.id\n                      )}\n                      onDragEnd={this.handleCounterDrag(counter.id)}\n                    ></Counter>\n                  ))}\n                </Layer>\n                <Layer preventDefault={true}>\n                  {staticCards\n                    .concat(ghostCards)\n                    .concat(movingCards)\n                    .concat(previewCards)}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"black\"\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private handleCounterValueUpdate = (id: string) => (delta: number) => {\n    this.props.updateCounterValue({ id, delta });\n  };\n\n  private handleCounterDrag = (id: string) => (\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    this.props.moveCounter({\n      id,\n      newPos: {\n        x: event.target.x(),\n        y: event.target.y(),\n      },\n    });\n  };\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderCardSearch = () => {\n    if (!this.state.showCardSearch) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.cardSearchPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing card search position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.cardStackForSearching ? (\n      <TopLayer position={pos} completed={this.clearCardSearch}>\n        <CardStackCardSelectorContainer\n          card={this.state.cardStackForSearching}\n          cardSelected={this.handleCardSelectedFromCardStack(\n            this.state.cardStackForSearching.id,\n            pos\n          )}\n        />\n      </TopLayer>\n    ) : null;\n  };\n\n  private renderPeerConnector = () => {\n    if (!this.state.showPeerConnector) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.peerConnectorPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing peer connector position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.showPeerConnector ? (\n      <TopLayer position={pos} completed={this.clearPeerConnector}>\n        <PeerConnector connect={this.handlePeerConnect}></PeerConnector>\n      </TopLayer>\n    ) : null;\n  };\n\n  private renderTokenModifier = () => {\n    if (!this.state.showTokenValueModifier) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.tokenValueModifierPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing token Modifier position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.showTokenValueModifier &&\n      !!this.state.tokenValueModifierProps ? (\n      <TopLayer position={pos} completed={this.clearTokenValueModifier}>\n        <TokenValueModifier\n          id={this.state.tokenValueModifierProps.id}\n          tokenType={this.state.tokenValueModifierProps.tokenType}\n          updated={(payload) => {\n            this.props.adjustCounterToken(payload);\n            this.clearTokenValueModifier();\n          }}\n        ></TokenValueModifier>\n      </TopLayer>\n    ) : null;\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private handlePeerConnect = (peerId: string) => {\n    this.clearPeerConnector();\n    this.props.connectToRemoteGame(peerId);\n  };\n\n  private handleCardSelectedFromCardStack = (\n    cardStackId: string,\n    pos: Vector2d\n  ) => (jsonId: string) => {\n    this.clearCardSearch();\n    this.props.pullCardOutOfCardStack({ cardStackId, jsonId, pos });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearTokenValueModifier = () => {\n    this.setState({\n      showTokenValueModifier: false,\n      tokenValueModifierProps: null,\n      tokenValueModifierPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private clearCardSearch = () => {\n    this.setState({\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    });\n  };\n\n  private clearPeerConnector = () => {\n    this.setState({\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.state.showContextMenu) {\n      return;\n    }\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCounterContextMenu = (counterId: string) => (\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Remove\",\n        action: () => {\n          this.props.removeCounter(counterId);\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // We want to unselect all the other cards if the card isn't actively selected\n    const cardStack = this.props.cards.cards.find((c) => c.id === cardId);\n\n    // Next, select the card that was right-clicked\n    this.props.selectCard({\n      id: cardId,\n      unselectOtherCards: !!cardStack ? !cardStack.selected : true,\n    });\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n\n      menuItems.push({\n        label: \"Find Specific Card\",\n        action: () => {\n          if (!!card) {\n            this.setState({\n              showCardSearch: true,\n              cardSearchPosition: this.stage?.getPointerPosition() ?? null,\n              cardStackForSearching: card,\n            });\n          }\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Set Damage\",\n      action: () => {\n        this.setState({\n          showContextMenu: false,\n          contextMenuItems: [],\n          contextMenuPosition: null,\n\n          showTokenValueModifier: true,\n          tokenValueModifierProps: {\n            id: card?.id || \"\",\n            tokenType: CounterTokenType.Damage,\n          },\n          tokenValueModifierPosition: this.stage?.getPointerPosition() ?? null,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Set Threat\",\n      action: () => {\n        this.setState({\n          showContextMenu: false,\n          contextMenuItems: [],\n          contextMenuPosition: null,\n\n          showTokenValueModifier: true,\n          tokenValueModifierProps: {\n            id: card?.id || \"\",\n            tokenType: CounterTokenType.Threat,\n          },\n          tokenValueModifierPosition: this.stage?.getPointerPosition() ?? null,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Set Generic Tokens\",\n      action: () => {\n        this.setState({\n          showContextMenu: false,\n          contextMenuItems: [],\n          contextMenuPosition: null,\n\n          showTokenValueModifier: true,\n          tokenValueModifierProps: {\n            id: card?.id || \"\",\n            tokenType: CounterTokenType.Generic,\n          },\n          tokenValueModifierPosition: this.stage?.getPointerPosition() ?? null,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove All Tokens\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          value: 0,\n        });\n\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          value: 0,\n        });\n\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          value: 0,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardClick = (card: ICardStack) => (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n\n    if (card.selected && modifierKeyHeld) {\n      this.props.toggleSelectCard(cardId);\n    } else {\n      this.props.selectCard({\n        id: cardId,\n        unselectOtherCards: !modifierKeyHeld,\n      });\n    }\n  };\n\n  private handleSelectAndExhaust = (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n    this.props.selectCard({ id: cardId, unselectOtherCards: !modifierKeyHeld });\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter(\n        (c) => c.selected && c.controlledBy === myPeerRef\n      ).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 50) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n    const code = event.key.toLocaleLowerCase();\n    const intCode = parseInt(code);\n    if (code === \"s\") {\n      this.props.togglePanMode();\n    } else if (code === \"f\") {\n      this.props.flipCards();\n    } else if (!Number.isNaN(intCode)) {\n      // First, get the selected card stack\n      const mySelectedCards = this.props.cards.cards.filter(\n        (c) => c.selected && c.controlledBy === myPeerRef\n      );\n      if (mySelectedCards.length !== 1) {\n        console.log(\n          \"will not be drawing any cards because the number of selected stacks is \" +\n            mySelectedCards.length\n        );\n      } else {\n        this.props.drawCardsOutOfCardStack({\n          cardStackId: mySelectedCards[0].id,\n          numberToDraw: intCode,\n        });\n      }\n    }\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (\n      event.shiftKey &&\n      (event.ctrlKey || event.metaKey) &&\n      event.key === \"z\"\n    ) {\n      this.props.redo();\n    } else if ((event.ctrlKey || event.metaKey) && event.key === \"z\") {\n      event.preventDefault();\n      this.props.undo();\n    }\n  };\n\n  private getRawPreviewCardPosition = (horizontal: boolean): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n\n    const widthToUse = horizontal\n      ? cardConstants.CARD_PREVIEW_HEIGHT\n      : cardConstants.CARD_PREVIEW_WIDTH;\n    const heightToUse = horizontal\n      ? cardConstants.CARD_PREVIEW_WIDTH\n      : cardConstants.CARD_PREVIEW_HEIGHT;\n\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - widthToUse / 2,\n          y: heightToUse / 2,\n        }\n      : {\n          x: widthToUse / 2,\n          y: heightToUse / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: KonvaEventObject<MouseEvent>) => {\n    if (event.evt.button === 0) {\n      // Only do something if it's the primary button (not a right-click)\n      const pos = this.getRelativePositionFromTarget(this.stage);\n\n      this.setState({\n        selectStartPos: {\n          x: pos.x,\n          y: pos.y,\n        },\n        selecting: true,\n      });\n    }\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleTouchStart = (event: any) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.handleContextMenu(event);\n    }, 750);\n  };\n\n  private handleTouchMove = (e: any) => {\n    e.evt.preventDefault();\n\n    var touch1 = e.evt.touches[0];\n    var touch2 = e.evt.touches[1];\n\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    if (touch1 && touch2) {\n      this.handleMultiTouch(touch1, touch2);\n    } else if (!this.props.panMode) {\n      this.handleMouseMove(e);\n    }\n  };\n\n  private handleMultiTouch = (touch1: any, touch2: any) => {\n    if (!this.stage) {\n      return;\n    }\n    // if the stage was under Konva's drag&drop\n    // we need to stop it, and implement our own pan logic with two pointers\n    if (this.stage.isDragging()) {\n      this.stage.stopDrag();\n    }\n\n    const p1 = {\n      x: touch1.clientX,\n      y: touch1.clientY,\n    };\n    const p2 = {\n      x: touch2.clientX,\n      y: touch2.clientY,\n    };\n\n    if (!this.lastCenter) {\n      this.lastCenter = getCenter(p1, p2);\n      return;\n    }\n    const newCenter = getCenter(p1, p2);\n\n    const dist = getDistance(p1, p2);\n\n    if (!this.lastDist) {\n      this.lastDist = dist;\n    }\n\n    // local coordinates of center point\n    const pointTo = {\n      x: (newCenter.x - this.stage.x()) / this.props.gameState.stageZoom.x,\n      y: (newCenter.y - this.stage.y()) / this.props.gameState.stageZoom.y,\n    };\n\n    const scale = this.props.gameState.stageZoom.x * (dist / this.lastDist);\n    this.props.updateZoom({ x: scale, y: scale });\n\n    // calculate new position of the stage\n    const dx = newCenter.x - this.lastCenter.x;\n    const dy = newCenter.y - this.lastCenter.y;\n\n    const newPos = {\n      x: newCenter.x - pointTo.x * scale + dx,\n      y: newCenter.y - pointTo.y * scale + dy,\n    };\n\n    this.props.updatePosition(newPos);\n\n    this.lastDist = dist;\n    this.lastCenter = newCenter;\n  };\n\n  private handleTouchEnd = (event: any) => {\n    this.lastDist = 0;\n    this.lastCenter = null;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Undo\",\n        action: this.props.undo,\n      },\n      {\n        label: \"Redo\",\n        action: this.props.redo,\n      },\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Create new counter\",\n        action: () => {\n          this.props.addNewCounter(\n            this.getRelativePositionFromTarget(this.stage) ?? { x: 0, y: 0 }\n          );\n        },\n      },\n      { label: \"Reset Game\", action: this.props.resetApp },\n      {\n        label: \"Connect to Remote Game\",\n        action: () => {\n          this.setState({\n            showPeerConnector: true,\n            peerConnectorPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Request resync from Remote Game\",\n        action: this.props.requestResync,\n      },\n      {\n        label: `Peer id is ${this.props.peerId}`,\n        action: () => {},\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData?.type_code ?? \"\";\n  };\n\n  private getCardName = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return this.props.cardsData[cardInQuestion.jsonId]?.name ?? \"\";\n  };\n\n  private getCardCode = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return (\n      this.props.cardsData[cardInQuestion.jsonId]?.code ??\n      `code missing for ${cardInQuestion.jsonId}`\n    );\n  };\n\n  private checkMissingImageMap(code: string): string | null {\n    return MISSING_CARD_IMAGE_MAP[code] ?? null;\n  }\n\n  private generateLCGCDNImageUrl(card: CardData, faceup: boolean): string {\n    if (!card) {\n      return `https://lcgcdn.s3.amazonaws.com/mc/NOPE.jpg`;\n    }\n\n    // get the first two digits\n    let codeToUse = card.code;\n\n    if (!faceup && !!card.back_link) {\n      codeToUse = card.back_link;\n    }\n\n    const groupCode =\n      CARD_PACK_REMAPPING[card.pack_code] ?? codeToUse.substring(0, 2);\n    let cardCode = codeToUse.substring(2);\n\n    //trim leading \"0\" chars\n    while (cardCode[0] === \"0\") {\n      cardCode = cardCode.substring(1);\n    }\n\n    cardCode = cardCode.toLocaleUpperCase();\n\n    let cardSuffix = \"\";\n\n    if (!!card.double_sided) {\n      cardSuffix = faceup ? \"A\" : \"B\";\n    }\n\n    return `https://lcgcdn.s3.amazonaws.com/mc/MC${groupCode}en_${cardCode}${cardSuffix}.jpg`;\n  }\n\n  private getImgUrls = (card: ICardStack): string[] => {\n    if (Object.keys(this.props.cardsData).length === 0) return [];\n\n    let urls: string[] = [];\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    if (!topCardData) {\n      return [`https://lcgcdn.s3.amazonaws.com/mc/NOPE.jpg`];\n    }\n\n    let cardData: CardData | null = topCardData;\n\n    if (!card.faceup) {\n      if (!!topCardData.back_link || !!topCardData.double_sided) {\n        urls = [\n          this.generateLCGCDNImageUrl(topCardData, card.faceup),\n          // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.png`,\n          // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.jpg`,\n          // process.env.PUBLIC_URL +\n          //   \"/images/cards/\" +\n          //   bottomCardData.octgn_id +\n          //   \".b.jpg\",\n        ];\n      } else {\n        cardData = null;\n        urls = [\n          topCardData.faction_code === \"encounter\"\n            ? process.env.PUBLIC_URL +\n              \"/images/standard/encounter_card_back.png\"\n            : process.env.PUBLIC_URL + \"/images/standard/card_back.png\",\n        ];\n      }\n    } else {\n      urls = [\n        this.generateLCGCDNImageUrl(topCardData, card.faceup),\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.png`,\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.jpg`,\n        // process.env.PUBLIC_URL +\n        //   \"/images/cards/\" +\n        //   topCardData.octgn_id +\n        //   \".jpg\",\n      ];\n    }\n\n    let codeForMissingCheck = \"\";\n\n    if (!!cardData) {\n      if (card.faceup) {\n        codeForMissingCheck = cardData.code;\n      } else {\n        if (!!cardData.back_link) {\n          codeForMissingCheck = cardData.back_link;\n        } else if (cardData.double_sided) {\n          codeForMissingCheck = `${cardData.code}_double_sided_back`;\n        }\n      }\n    }\n\n    const missingImageOverride = !!cardData\n      ? this.checkMissingImageMap(codeForMissingCheck)\n      : null;\n\n    if (!!missingImageOverride) {\n      urls.unshift(missingImageOverride);\n    }\n\n    return urls;\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n\nexport const getPlayerColors = createSelector(getGame, (game) => {\n  return game.playerColors;\n});\n\nexport const getPeerId = createSelector(getGame, (game) => game.peerId);\n","import { Vector2d } from \"konva/types/types\";\nimport { myPeerRef, PlayerColor } from \"../../constants/app-constants\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n  playerColors: { [key: string]: PlayerColor };\n  peerId: string;\n  previewCard: IPreviewCard | null;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nlocalStorageState.playerColors = {};\nlocalStorageState.playerColors[myPeerRef] = \"red\";\nlocalStorageState.peerId = \"\";\nlocalStorageState.previewCard = null;\n\nconst defaultState: IGameState = {\n  playerColors: {},\n  stageZoom: { x: 0.5, y: 0.5 },\n  stagePosition: { x: 0, y: 0 },\n  peerId: \"\",\n  previewCard: null,\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { PlayerColor } from \"../../constants/app-constants\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { IGameState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\nconst connectToRemoteGameReducer: CaseReducer<\n  IGameState,\n  PayloadAction<string>\n> = () => {};\n\nconst setPlayerColorReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ ref: string; color: PlayerColor }>\n> = (state, action) => {\n  state.playerColors[action.payload.ref] = action.payload.color;\n};\n\nconst setPeerIdReducer: CaseReducer<IGameState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.peerId = action.payload;\n};\n\nconst setPreviewCardIdReducer: CaseReducer<\n  IGameState,\n  PayloadAction<string>\n> = (state, action) => {\n  if (!state.previewCard) {\n    state.previewCard = { id: action.payload };\n  } else if (state.previewCard.id !== action.payload) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst clearPreviewCardReducer: CaseReducer<IGameState> = (state) => {\n  state.previewCard = null;\n};\n\nconst requestResyncReducer: CaseReducer<IGameState> = () => {};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n    connectToRemoteGame: connectToRemoteGameReducer,\n    setPlayerColor: setPlayerColorReducer,\n    setPeerId: setPeerIdReducer,\n    requestResync: requestResyncReducer,\n    setPreviewCardId: setPreviewCardIdReducer,\n    clearPreviewCard: clearPreviewCardReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 0.5, y: 0.5 };\n      state.previewCard = null;\n    });\n  },\n});\n\nexport const {\n  updateZoom,\n  updatePosition,\n  connectToRemoteGame,\n  setPlayerColor,\n  setPeerId,\n  requestResync,\n  setPreviewCardId,\n  clearPreviewCard,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\n\nexport interface AddNewCounterWithIdPayload {\n  pos: Vector2d;\n  id: string;\n}\n\nexport const addNewCounterWithId = createAction<AddNewCounterWithIdPayload>(\n  \"addNewCounterWithId\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface ICountersState {\n  counters: ICounter[];\n}\n\nexport interface ICounter {\n  id: string;\n  position: Vector2d;\n  value: number;\n}\n\nconst localStorageState: ICountersState =\n  loadState(\"liveState\")?.counters ?? {};\n\nconst defaultState: ICountersState = {\n  counters: [],\n};\nexport const initialState: ICountersState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport { addNewCounterWithId } from \"./counters.actions\";\nimport { ICountersState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateCounterValueReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; delta: number }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.value += action.payload.delta;\n    if (counter.value < 0) {\n      counter.value = 0;\n    }\n  }\n};\n\nconst removeCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<string>\n> = (state, action) => {\n  state.counters = state.counters.filter((c) => c.id !== action.payload);\n};\n\nconst moveCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; newPos: Vector2d }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.position = {\n      x: action.payload.newPos.x,\n      y: action.payload.newPos.y,\n    };\n  }\n};\n\n// slice\nconst countersSlice = createSlice({\n  name: \"counters\",\n  initialState: initialState,\n  reducers: {\n    updateCounterValue: updateCounterValueReducer,\n    removeCounter: removeCounterReducer,\n    moveCounter: moveCounterReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.counters = action.payload.liveState.present.counters.counters;\n    });\n\n    builder.addCase(resetApp, (state, action) => {\n      state.counters = [];\n    });\n\n    builder.addCase(addNewCounterWithId, (state, action) => {\n      state.counters.push({\n        id: action.payload.id,\n        position: action.payload.pos,\n        value: 0,\n      });\n    });\n  },\n});\n\nexport const {\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n} = countersSlice.actions;\n\nexport default countersSlice.reducer;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCounters = (state: RootState) =>\n  state.liveState.present.counters;\n\nexport const getCurrentCounters = createSelector(getCounters, (counters) => {\n  return counters.counters;\n});\n","import { connect } from \"react-redux\";\nimport { ActionCreators } from \"redux-undo\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport {\n  getCards,\n  getDropTargetCardsById,\n  getPanMode,\n  // shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  adjustCounterToken,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  // hoverCard,\n  // hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  togglePanMode,\n  toggleSelectCard,\n  toggleToken,\n  unselectAllCards,\n  unselectCard,\n} from \"./features/cards/cards.slice\";\nimport {\n  addCardStack,\n  fetchDecklistById,\n  pullCardOutOfCardStack,\n  startCardMove,\n  shuffleStack,\n  drawCardsOutOfCardStack,\n} from \"./features/cards/cards.thunks\";\nimport {\n  getGame,\n  getPeerId,\n  getPlayerColors,\n} from \"./features/game/game.selectors\";\nimport {\n  connectToRemoteGame,\n  updatePosition,\n  updateZoom,\n  requestResync,\n  setPreviewCardId,\n  clearPreviewCard,\n} from \"./features/game/game.slice\";\n\nimport {\n  moveCounter,\n  removeCounter,\n  updateCounterValue,\n} from \"./features/counters/counters.slice\";\nimport { addNewCounter } from \"./features/counters/counters.thunks\";\nimport { resetApp } from \"./store/global.actions\";\nimport { RootState } from \"./store/rootReducer\";\nimport { getCurrentCounters } from \"./features/counters/counters.selectors\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    playerColors: getPlayerColors(state),\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    // showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n    counters: getCurrentCounters(state),\n    peerId: getPeerId(state),\n    dropTargetCardsById: getDropTargetCardsById(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  // hoverCard,\n  // hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n  connectToRemoteGame,\n  requestResync,\n  undo: ActionCreators.undo,\n  redo: ActionCreators.redo,\n  drawCardsOutOfCardStack,\n  setPreviewCardId,\n  clearPreviewCard,\n})(App);\n\nexport default AppContainer;\n","import { Vector2d } from \"konva/types/types\";\nimport { Action } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { addNewCounterWithId } from \"./counters.actions\";\n\nexport const addNewCounter = (\n  pos: Vector2d\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    pos,\n    id: uuidv4(),\n  };\n  dispatch(addNewCounterWithId(payloadWithId));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport undoable, { excludeAction, groupByActionTypes } from \"redux-undo\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport { startCardMoveWithSplitStackId } from \"../features/cards/cards.actions\";\nimport cards, { cardMove } from \"../features/cards/cards.slice\";\nimport game, {\n  clearPreviewCard,\n  setPreviewCardId,\n} from \"../features/game/game.slice\";\n\nimport counters, { moveCounter } from \"../features/counters/counters.slice\";\n\nconst undoableState = combineReducers({\n  counters,\n  cards,\n});\n\nconst rootReducer = combineReducers({\n  game,\n  cardsData,\n  liveState: undoable(undoableState, {\n    limit: 20,\n    groupBy: groupByActionTypes([moveCounter.type]),\n    filter: excludeAction([\n      startCardMoveWithSplitStackId.type,\n      cardMove.type,\n      setPreviewCardId.type,\n      clearPreviewCard.type,\n    ]),\n  }),\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import Peer from \"peerjs\";\nimport { myPeerRef } from \"../constants/app-constants\";\nimport { togglePanMode } from \"../features/cards/cards.slice\";\nimport {\n  clearPreviewCard,\n  connectToRemoteGame,\n  requestResync,\n  setPeerId,\n  setPlayerColor,\n  setPreviewCardId,\n  updatePosition,\n  updateZoom,\n} from \"../features/game/game.slice\";\nimport { receiveRemoteGameState } from \"./global.actions\";\n\nconst DEBUG = false;\n\nconst blacklistRemoteActions = {\n  [connectToRemoteGame.type]: true,\n  [updatePosition.type]: true,\n  [updateZoom.type]: true,\n  [setPreviewCardId.type]: true,\n  [clearPreviewCard.type]: true,\n  [togglePanMode.type]: true,\n  [receiveRemoteGameState.type]: true,\n  [requestResync.type]: true,\n};\n\nconst log = (...args: any[]) => {\n  if (DEBUG) {\n    console.log(args[0], args[1]);\n  }\n};\n\nconst setupConnection = (conn: any, storeAPI: any) => {\n  conn.on(\"data\", (data: any) => {\n    if (!data.INITIAL_STATE_MSG) {\n      if (!!data.RESYNC) {\n        log(\"received request for resync\");\n        conn.send({\n          INITIAL_STATE_MSG: true,\n          state: storeAPI.getState(),\n        });\n      } else {\n        log(\"recieved remote action\", data);\n        data.REMOTE_ACTION = true;\n        log(\"dispatching remote action\", data);\n        storeAPI.dispatch(data);\n      }\n    } else {\n      console.log(\"going to replace (most of) state with\", data.state);\n      setTimeout(() => {\n        storeAPI.dispatch(receiveRemoteGameState(data.state));\n      }, 0);\n    }\n  });\n};\n\nexport const peerJSMiddleware = (storeAPI: any) => {\n  const cgpPeer = new Peer(undefined, { debug: 0 });\n  let activeCon: Peer.DataConnection;\n  cgpPeer.on(\"error\", (err) => {\n    console.error(\"*****************Server error\");\n    console.error(err);\n  });\n\n  cgpPeer.on(\"disconnected\", () => {\n    console.log(\"****Peer server connection disconnected\");\n  });\n\n  cgpPeer.on(\"open\", (id) => {\n    console.log(\"My peer ID is: \" + id);\n    storeAPI.dispatch(setPeerId(id));\n  });\n\n  cgpPeer.on(\"connection\", (conn) => {\n    console.log(\"Connection received!\");\n    activeCon = conn;\n    setupConnection(activeCon, storeAPI);\n\n    activeCon.on(\"open\", () => {\n      console.log(\"connection ready for data\");\n      log(\"going to send initial state\", storeAPI.getState());\n      activeCon.send({\n        INITIAL_STATE_MSG: true,\n        state: storeAPI.getState(),\n      });\n      // TODO: more complicated logic to handle multiple connections. Right now\n      // this just changes the connecting client to blue\n      const setPlayerColorAction = setPlayerColor({\n        ref: activeCon.metadata.ref,\n        color: \"blue\",\n      });\n      activeCon.send(setPlayerColorAction);\n      activeCon.send(\n        setPlayerColor({\n          ref: myPeerRef,\n          color: \"red\",\n        })\n      );\n      storeAPI.dispatch(setPlayerColorAction);\n    });\n\n    activeCon.on(\"error\", (err) => {\n      console.error(\"****************Connection error:\", err);\n    });\n\n    activeCon.on(\"close\", () => {\n      console.log(\"******connection closed for ref \" + activeCon.metadata.ref);\n    });\n\n    activeCon.peerConnection.onconnectionstatechange = (ev: Event) => {\n      console.log(`connection state changed`);\n      console.log(ev);\n      console.log(activeCon.peerConnection.connectionState);\n      if (\n        activeCon.peerConnection.connectionState === \"closed\" ||\n        activeCon.peerConnection.connectionState === \"disconnected\"\n      ) {\n        console.log(\n          \"CLEARING CLIENT OWNED CARDS for \" + activeCon.metadata.ref\n        );\n      }\n    };\n  });\n  return (next: any) => (action: any) => {\n    log(\"received local action\", action);\n\n    // If this isn't a REMOTE action, add our ref onto it\n    if (!action.REMOTE_ACTION) {\n      action.ACTOR_REF = myPeerRef;\n    } else if (!action.ACTOR_REF) {\n      console.error(`Received a REMOTE action without an ACTOR_REF:`);\n      console.log(action);\n    }\n\n    if (action.type === connectToRemoteGame.type) {\n      console.log(\"going to connect to peer \" + action.payload);\n      activeCon = cgpPeer.connect(action.payload, {\n        metadata: { ref: myPeerRef },\n      });\n      setupConnection(activeCon, storeAPI);\n    } else if (action.type === requestResync.type) {\n      if (!!activeCon) {\n        activeCon.send({ RESYNC: true });\n      }\n    }\n\n    if (\n      !action.REMOTE_ACTION &&\n      !!activeCon &&\n      !blacklistRemoteActions[action.type]\n    ) {\n      log(\"going to send action to peer!\");\n      activeCon.send(action);\n    }\n\n    return next(action);\n  };\n};\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\nimport { peerJSMiddleware } from \"./peer-js-redux-middleware\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n}).concat(peerJSMiddleware);\n\nexport default function configureStore() {\n  console.log(\"configuring store. NODE_ENV is \" + process.env.NODE_ENV);\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}