{"version":3,"sources":["../node_modules/peerjs/dist sync","serviceWorker.ts","constants/app-constants.ts","store/localStorage.ts","features/cards-data/initialState.ts","store/global.actions.ts","features/game/initialState.ts","constants/card-constants.ts","features/game/game.slice.ts","features/cards-data/cards-data.slice.ts","features/cards/cards.actions.ts","utilities/geo.ts","features/cards-data/cards-data.selectors.ts","features/cards/cards.selectors.ts","constants/card-pack-mapping.ts","constants/game-type-properties-mapping.tsx","features/cards/cards.thunks.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/counters/counters.actions.ts","features/counters/initialState.ts","features/counters/counters.slice.ts","store/rootReducer.ts","store/peer-js-redux-middleware.ts","store/configureStore.ts","CardTokens.tsx","CardTokensContainer.tsx","Card.tsx","CardStackCardSelector.tsx","CardStackCardSelectorContainer.tsx","constants/card-missing-image-map.ts","FileUploader.tsx","ContextMenu.tsx","Counter.tsx","DeckLoader.tsx","EncounterLoader.tsx","EncounterLoaderContainer.tsx","FirstPlayerToken.tsx","features/counters/counters.selectors.ts","FirstPlayerTokenContainer.tsx","PeerConnector.tsx","TokenValueModifier.tsx","TopLayer.tsx","TouchMenu.tsx","features/game/game.selectors.ts","TouchMenuContainer.tsx","Game.tsx","generated/packsList.ts","generated/packsList_lotr.ts","features/cards-data/cards-data.thunks.ts","GameContainer.tsx","features/counters/counters.thunks.ts","utilities/marvel-txt-converter.ts","App.tsx","AppContainer.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Boolean","window","location","hostname","match","GameType","myPeerRef","uuidv4","possibleColors","loadState","key","serializedState","localStorage","getItem","baseState","JSON","parse","present","err","console","error","initialState","activeDataType","activeGameType","MarvelChampions","data","resetApp","createAction","receiveRemoteGameState","localStorageState","playerColors","peerId","previewCard","menuPreviewCardJsonId","StatusTokenType","CounterTokenType","stageZoom","x","y","stagePosition","gameSlice","createSlice","name","reducers","updateZoom","state","action","payload","updatePosition","connectToRemoteGame","setPlayerColor","ref","color","setPeerId","requestResync","setPreviewCardId","clearPreviewCard","setMenuPreviewCardJsonId","clearMenuPreviewCardJsonId","updateActiveGameType","quitGame","extraReducers","builder","addCase","game","actions","convertMarvelToCommonFormat","cardMarvelFormat","images","octgnId","octgn_id","quantity","doubleSided","double_sided","backLink","back_link","typeCode","type_code","subTypeCode","extraInfo","setCode","set_code","packCode","pack_code","factionCode","faction_code","convertLOTRToCommonFormat","encounterCard","cardLOTRFormat","cardBackImage","Back","ImagePath","frontImage","Front","frontImageWithoutExtension","split","slice","join","length","log","Slug","CardSet","replaceAll","RingsDbCardId","Title","front","back","OctgnGuid","Quantity","CardType","CardSubType","storeCardData","isPlayerPack","careAboutDups","cs","stateLocation","entities","encounterEntities","card","cardsDataSlice","loadCardsData","activeData","setData","SetData","forEach","set","setTypeCode","card_set_type_code","cardsInSet","LordOfTheRingsLivingCardGame","Scenarios","scenario","Product","loadCardsDataForPack","packType","isHeroPack","includes","pack","map","c","cards","loadCardsForEncounterSet","activeSet","concat","filter","cd","toLocaleLowerCase","indexOf","addCardStackWithId","pullCardOutOfCardStackWithId","drawCardsOutOfCardStackWithIds","startCardMoveWithSplitStackId","replaceCardStack","setStackShuffling","createDeckFromTextFileWithIds","cardConstants","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","getCenter","p1","p2","getCurrentCardData","cardsData","getCardsData","getCardsDataEntities","createSelector","getCardsDataHeroEntities","getCardsDataHerosByName","cardsDataByName","Object","values","getCardsDataPlayerCardsByName","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataSetDataAsEncounterEntities","entries","value","cis","getCardsDataEncounterEntitiesBySetCode","herosData","setTypesEncounters","campaignCards","pc","push","sort","a","b","getCards","liveState","getCardMapById","reduce","getPanMode","panMode","getDropTargetCardsById","returnVal","dropTargetCards","ownerRef","CARD_PACK_REMAPPING","bkw","cap","drs","hlk","trors","twc","EXTRA_CARDS","doctor_strange","jsonId","ant","wsp","GamePropertiesMap","marvelchampions","deckSite","decklistApi","encounterUiName","backgroundImageLocation","tokens","stunned","tokenType","Stunned","touchMenuLetter","touchMenuIcon","fontSize","menuText","menuRemoveText","imagePath","process","confused","Confused","tough","Tough","damage","isNumeric","threat","generic","lotrlcg","fetchDecklistById","createAsyncThunk","thunkApi","axios","get","gameType","decklistId","response","getState","getMarvelCards","getLOTRCards","heroSetCode","investigator_code","encounterCardsData","heroObligationDeck","Array","from","_i","heroEncounterDeckData","heroEncounterDeck","extraCards","position","heroId","dataId","extraHeroCards","relatedEncounterDeck","encounterDeckId","relatedObligationDeck","obligationDeckId","heroCardsData","heroStack","heroes","cardDetails","newSlots","slots","cardData","shuffle","array","temporaryValue","randomIndex","returnArray","stringify","currentIndex","floor","random","controlledBy","selected","shuffling","ghostCards","attachTargetCards","getCardStackWithId","find","mutateCardWithId","callback","cardToUpdate","foreachSelectedAndControlledCard","actorRef","foreachUnselectedCard","getAttachDrawPos","baseCard","drawPos","takenSpace","i","xToDraw","yToDraw","unselectAllCardsReducer","ACTOR_REF","cardsSlice","selectCard","unselectOtherCards","unselectCard","toggleSelectCard","exhaustCard","exhausted","cardMove","movedCards","primaryCard","dx","dy","possibleDropTargets","distance","c1","c2","possibleAttachTargets","attachTarget","gc","cardStack","attachGhostCard","movedCard","splice","endCardMove","attachTargetCardStacks","dragging","index","unshift","dropTargetCard","selectMultipleCards","ids","unselectAllCards","togglePanMode","flipCards","faceup","reverse","resetCards","toggleToken","cardToToggle","undefined","statusTokens","adjustCounterToken","counterTokens","delta","cardToReplaceStack","newStack","fill","cardJsonIds","cardStackToUse","cardStackId","newCardStack","newCard","assign","cardIndexToRemove","findIndex","cardToStartMoving","splitTopCard","cardToMove","topCard","shift","splitCardId","numberToDraw","idsToUse","sourceCardStackId","topCardDetails","stackToUpdate","handleLoadDeck","fulfilled","potentialHeroCard","heroCardStack","heroCard","mainDeckStack","cardPadding","newDeck","encounterDeck","obligationDeck","addNewCounterWithId","counters","firstPlayerCounterPosition","countersSlice","updateCounterValue","counter","removeCounter","moveCounter","newPos","moveFirstPlayerCounter","updateCounterColor","newColor","pos","undoableState","combineReducers","rootReducer","undoable","limit","groupBy","groupByActionTypes","type","excludeAction","blacklistRemoteActions","setupConnection","conn","storeAPI","on","INITIAL_STATE_MSG","setTimeout","dispatch","RESYNC","send","REMOTE_ACTION","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","activeCon","cgpPeer","Peer","debug","config","iceServers","urls","username","credential","remoteParamArray","href","remoteId","connect","metadata","setPlayerColorAction","peerConnection","onconnectionstatechange","ev","connectionState","next","desiredWidth","desiredHeight","CardTokens","props","damageImg","threatImg","genericImg","unmounted","imagesLoaded","Image","tokenInfo","currentGameType","onload","setState","src","prevProps","prevState","this","damageX","damageY","showDamage","damageToken","scale","naturalWidth","naturalHeight","width","height","fillPatternImage","damageText","text","align","verticalAlign","threatX","threatY","showThreat","threatToken","threatText","genericX","genericY","showGeneric","Component","CardTokensContainer","HORIZONTAL_TYPE_CODES","stringArraysEqual","array1","array2","every","Card","imgs","stunnedImg","confusedImg","toughImg","touchTimer","rect","shuffleToggle","initCardImages","imgUrls","img","imageLoaded","onerror","imageLoadFailed","imgUrl","getStrokeColor","dropTargetColor","selectedColor","renderUnanimatedCard","heightToUse","widthToUse","imgToUse","complete","getScale","offset","native","to","rotation","animatedProps","Rect","node","cornerRadius","stroke","strokeWidth","fillPatternRotation","shouldRenderImageHorizontal","fillPatternScaleX","fillPatternScaleY","shadowForStrokeEnabled","hitStrokeWidth","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","handleDoubleTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","handleTouchStart","onTouchMove","handleTouchMove","onTouchEnd","handleTouchEnd","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","cardStackOffset","numCardsInStack","shouldRenderStunned","cardState","tokenImagesLoaded","stunnedToken","getTokenInSlot","confusedToken","toughToken","cardTokens","renderCardName","event","target","cancelBubble","clearTimeout","handleHover","handleHoverLeave","prevImgUrls","currentRotation","duration","renderCard","cardWidth","cardHeight","textOffset","shouldRender","slot","dimensions","stunnedOffset","typeCodes","plainCardBack","widthHorizontal","heightHorizontal","some","CardStackCardSelector","cardsDataInStack","handleHighlightChange","_event","option","reason","preview","clearPreview","handleSelected","cardSelected","stopPropagation","cardsDataEntities","onKeyPress","Autocomplete","options","getOptionLabel","style","onChange","onHighlightChange","renderInput","params","TextField","label","variant","CardStackCardSelectorContainer","MISSING_CARD_IMAGE_MAP","FileUploader","hiddenFileInput","React","useRef","MenuItem","current","evt","document","createEvent","initEvent","dispatchEvent","files","fileUploaded","handleFile","display","ContextMenu","nestedRef","renderMenuItem","children","val","parentMenuOpen","menuOpen","parentElement","focus","nestedI","nestedIndex","fileUploader","file","reader","FileReader","readAsText","readerEvent","content","result","fileLoadedAction","hideContextMenu","handleContextItemClicked","handleMenuClosed","preventDefault","item","contextItemClicked","items","blur","Menu","keepMounted","open","onClose","anchorReference","anchorPosition","top","left","Counter","handleDecrement","updateCounterValueBy","handleIncrement","DeckLoader","inputValue","focusInputField","input","querySelector","handleKeyPress","loadDeckId","className","EncounterLoader","questCards","encounterCards","filteredCards","oc","totalCards","loadCards","encounterData","EncounterLoaderContainer","ownProps","FirstPlayerToken","updatePos","image","getCounters","getCurrentCounters","getFirstPlayerTokenPos","FirstPlayerTokenContainer","PeerConnector","inputRef","TokenValueModifier","newValue","updated","Button","marginLeft","TopLayer","completed","containerStyle","TouchMenu","renderStatusCardButtons","IconButton","getGame","getPlayerColors","getPeerId","getActiveGameType","getMenuPreviewCard","TouchMenuContainer","Game","stage","lastCenter","lastDist","handleCounterValueUpdate","handleCounterDrag","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderPreviewCardModal","previewCardModal","renderTouchMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","handleLoadEncounter","renderCardSearch","showCardSearch","cardSearchPosition","cardStackForSearching","clearCardSearch","handleCardSelectedFromCardStack","renderPeerConnector","showPeerConnector","peerConnectorPosition","clearPeerConnector","handlePeerConnect","renderTokenModifier","showTokenValueModifier","tokenValueModifierPosition","tokenValueModifierProps","clearTokenValueModifier","addCardStack","pullCardOutOfCardStack","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","oldScale","gameState","pointer","getPointerPosition","mousePointTo","newScale","handleCounterContextMenu","counterId","menuItems","handleCardContextMenu","cardId","currentStatusTokens","shuffleStack","tokenInfoForGameType","Damage","Threat","Generic","handleCardClick","modifierKeyHeld","shiftKey","metaKey","ctrlKey","handleSelectAndExhaust","showOrToggleModalPreviewCard","handleCardDragStart","draggingCard","hasStack","upperRightPoint","startCardMove","modifier","intCode","parseInt","Number","isNaN","mySelectedCards","drawCardsOutOfCardStack","handleKeyDown","redo","undo","getRawPreviewCardPosition","horizontal","pointerPos","screenMidPointX","innerWidth","screenMidPointY","innerHeight","posParam","transform","getAbsoluteTransform","copy","invert","point","MouseEvent","button","TouchEvent","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","touch1","touches","touch2","handleMultiTouch","handleMouseMove","isDragging","stopDrag","clientX","clientY","newCenter","dist","pointTo","currentTarget","txtContents","createDeckFromTxt","addNewCounter","getCardType","getCardName","cardInQuestion","getCardCode","getImgUrls","topCardData","generateLCGCDNImageUrl","codeForMissingCheck","missingImageOverride","checkMissingImageMap","Konva","hitOnDragEnabled","playmatImage","allJsonData","activeElement","body","el","staticCards","dropTargetCardsById","movingCards","iAmDragging","possiblePreviewCards","menuPreviewCard","previewCards","_card","isHorizontal","rawPos","previewPos","url","tabIndex","onKeyDown","Consumer","store","onMouseUp","onMouseMove","onWheel","codeToUse","groupCode","substring","cardCode","toLocaleUpperCase","cardSuffix","packList","getSpecificMarvelPack","packName","res","getSpecificLOTRPack","getSpecificLOTRScenario","GameContainer","Promise","all","marvelPackList","status","lotrPackList","scenarioListLOTR","AllCards","payloadWithId","cardsState","s","stackToShuffle","shuffledStack","ActionCreators","possibleIds","payloadWithIds","heroCardsDataByName","playerCardsDataByName","heroDataByName","playerCardDataByName","nonEmptyLines","l","trim","heroName","packLineIndex","startsWith","hero","pattern","slotLines","sl","cardName","convertMarvelTxtToDeckInfo","renderGamePicker","FormControl","InputLabel","Select","labelId","replace","toUpperCase","App","AppContainer","rtkConfigureStore","reducer","middleware","devTools","subscribe","throttle","blacklistStateKeys","setItem","saveState","configureStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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4BACA,yBACA,4CACA,sCACA,4BACA,mCACA,wBACA,yCACA,+BACA,gBACA,gCACA,+CACA,0CACA,gCACA,wCACA,iCACA,wCACA,8BACA,yBACA,iBACA,mCACA,mCACA,2CACA,iCACA,oCACA,+BACA,sCACA,4BACA,2BACA,6BACA,8BACA,+BACA,8BACA,uCACA,0CACA,qCACA,4CACA,qBACA,sBACA,mCACA,+CACA,0CACA,mCACA,yBACA,yCACA,oCACA,0BACA,mCACA,yBACA,6BACA,kCACA,wBACA,+BACA,wCACA,8BACA,oCACA,0BACA,2CACA,iCACA,2CACA,+BACA,8BACA,wBACA,yBACA,qCACA,2BACA,sCACA,4BACA,0BACA,8BACA,kCACA,wBACA,iCACA,uBACA,mCACA,yBACA,uCACA,6BACA,oCACA,kCACA,wBACA,+BACA,wCACA,8BACA,6BACA,mCACA,4BACA,8BACA,uBACA,wCACA,8BACA,mCACA,4CACA,qCACA,2BACA,oCACA,0BACA,0BACA,qCACA,+BACA,qBACA,sBACA,gCACA,0BACA,iCACA,uBACA,4BACA,sBACA,qCACA,2BACA,sBACA,4CACA,kCACA,wBACA,qCACA,wBACA,sCACA,6BACA,0BACA,mCACA,iCACA,0CACA,oCACA,0BACA,0BACA,yCACA,+BACA,kCACA,wBACA,0CACA,gCACA,8BACA,8BACA,6BACA,uCACA,6BACA,0CACA,gCACA,mCACA,8BACA,0BACA,0BACA,0BACA,iCACA,8BACA,oCACA,0BACA,0CACA,+BACA,wCACA,gDACA,uBCvFMC,GAAqB,yCAAG,WAC5BC,GAD4B,gBAAA/rB,EAAA,sEAGLqD,KAAMC,IAC3Bd,mCAAyCupB,GAJf,cAGtBtoB,EAHsB,yBAMrB,CACLuoB,IAAKvoB,EACLrK,SAAU2yB,EAAS9xB,MAAM,SAAS,KARR,2CAAH,sDAYrBgyB,GAAmB,yCAAG,WAC1BF,GAD0B,gBAAA/rB,EAAA,sEAGHqD,KAAMC,IAC3Bd,mCAAyCupB,GAJjB,cAGpBtoB,EAHoB,yBAMnB,CACLuoB,IAAKvoB,EACLr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","file":"static/js/main.dd1d19b8.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 203;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const myPeerRef = uuidv4();\n\nexport enum GameType {\n  MarvelChampions = \"marvelchampions\",\n  LordOfTheRingsLivingCardGame = \"lotrlcg\",\n}\n\nexport type PlayerColor =\n  | \"red\"\n  | \"cyan\"\n  | \"green\"\n  | \"blue\"\n  | \"magenta\"\n  | \"yellow\";\n\nexport const possibleColors: PlayerColor[] = [\n  \"red\",\n  \"cyan\",\n  \"green\",\n  \"blue\",\n  \"magenta\",\n  \"yellow\",\n];\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    const baseState = JSON.parse(serializedState || \"{}\");\n\n    return baseState.present ?? baseState;\n  } catch (err) {\n    console.error(\"problem parsing\");\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n    console.error(\"Error writing state to local storage\");\n  }\n};\n","import { GameType } from \"../../constants/app-constants\";\nimport { CardData } from \"../../external-api/common-card-data\";\nimport { loadState } from \"../../store/localStorage\";\nimport { IGameState } from \"../game/initialState\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface CardInSet {\n  code: string;\n  quantity: number;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n  cardsInSet: CardInSet[];\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  activeDataType: GameType;\n  data: { [key in GameType]?: IGameCardsDataState };\n}\nexport interface IGameCardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nconst localGameState: IGameState = loadState(\"game\");\n\nexport const initialState: ICardsDataState = {\n  activeDataType: localGameState.activeGameType ?? GameType.MarvelChampions,\n  data: {},\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"./rootReducer\";\n\nexport const resetApp = createAction(\"resetAction\");\n\nexport const receiveRemoteGameState = createAction<RootState>(\n  \"receiveRemoteGameState\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport {\n  GameType,\n  myPeerRef,\n  PlayerColor,\n} from \"../../constants/app-constants\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n  playerColors: { [key: string]: PlayerColor };\n  peerId: string;\n  previewCard: IPreviewCard | null;\n  menuPreviewCardJsonId: string | null;\n  activeGameType: GameType | null;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nlocalStorageState.playerColors = {};\nlocalStorageState.playerColors[myPeerRef] = \"red\";\nlocalStorageState.peerId = \"\";\nlocalStorageState.previewCard = null;\nlocalStorageState.menuPreviewCardJsonId = null;\n\nconst defaultState: IGameState = {\n  playerColors: {},\n  stageZoom: { x: 0.5, y: 0.5 },\n  stagePosition: { x: 0, y: 0 },\n  peerId: \"\",\n  previewCard: null,\n  menuPreviewCardJsonId: null,\n  activeGameType: null,\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\nexport enum CounterTokenType {\n  Damage = \"damage\",\n  Threat = \"threat\",\n  Generic = \"generic\",\n}\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { GameType, PlayerColor } from \"../../constants/app-constants\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport { IGameState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\nconst connectToRemoteGameReducer: CaseReducer<\n  IGameState,\n  PayloadAction<string>\n> = () => {};\n\nconst setPlayerColorReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ ref: string; color: PlayerColor }>\n> = (state, action) => {\n  state.playerColors[action.payload.ref] = action.payload.color;\n};\n\nconst setPeerIdReducer: CaseReducer<IGameState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.peerId = action.payload;\n};\n\nconst setPreviewCardIdReducer: CaseReducer<\n  IGameState,\n  PayloadAction<string>\n> = (state, action) => {\n  if (!state.previewCard) {\n    state.previewCard = { id: action.payload };\n  } else if (state.previewCard.id !== action.payload) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst clearPreviewCardReducer: CaseReducer<IGameState> = (state) => {\n  state.previewCard = null;\n};\n\nconst setMenuPreviewCardJsonIdReducer: CaseReducer<\n  IGameState,\n  PayloadAction<string>\n> = (state, action) => {\n  state.menuPreviewCardJsonId = action.payload;\n};\n\nconst clearMenuPreviewCardJsonIdReducer: CaseReducer<IGameState> = (state) => {\n  state.menuPreviewCardJsonId = null;\n};\n\nconst requestResyncReducer: CaseReducer<IGameState> = () => {};\n\nconst updateActiveGameTypeReducer: CaseReducer<\n  IGameState,\n  PayloadAction<GameType>\n> = (state, action) => {\n  state.activeGameType = action.payload;\n};\n\nconst quitGameReducer: CaseReducer<IGameState> = (state) => {\n  state.activeGameType = null;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n    connectToRemoteGame: connectToRemoteGameReducer,\n    setPlayerColor: setPlayerColorReducer,\n    setPeerId: setPeerIdReducer,\n    requestResync: requestResyncReducer,\n    setPreviewCardId: setPreviewCardIdReducer,\n    clearPreviewCard: clearPreviewCardReducer,\n    setMenuPreviewCardJsonId: setMenuPreviewCardJsonIdReducer,\n    clearMenuPreviewCardJsonId: clearMenuPreviewCardJsonIdReducer,\n    updateActiveGameType: updateActiveGameTypeReducer,\n    quitGame: quitGameReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      state.activeGameType = action.payload.game.activeGameType;\n    });\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 0.5, y: 0.5 };\n      state.previewCard = null;\n    });\n  },\n});\n\nexport const {\n  updateZoom,\n  updatePosition,\n  connectToRemoteGame,\n  setPlayerColor,\n  setPeerId,\n  requestResync,\n  setPreviewCardId,\n  clearPreviewCard,\n  setMenuPreviewCardJsonId,\n  clearMenuPreviewCardJsonId,\n  updateActiveGameType,\n  quitGame,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import {\n  createSlice,\n  CaseReducer,\n  PayloadAction,\n  Draft,\n} from \"@reduxjs/toolkit\";\nimport {\n  initialState,\n  ICardsDataState,\n  IGameCardsDataState,\n} from \"./initialState\";\n\n// import * as PackData from \"../../generated/packs\";\n// import { CardData as CardDataLOTR } from \"../../external-api/beorn-json-data\";\nimport {\n  CardData as CardDataMarvel,\n  CardPack as CardPackMarvel,\n} from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\nimport Scenarios from \"../../external/ringsteki-json-data/scenarios.json\";\nimport { CardData } from \"../../external-api/common-card-data\";\nimport { GameType } from \"../../constants/app-constants\";\nimport {\n  CardPack as CardPackLOTR,\n  CardData as CardDataLOTR,\n} from \"../../external-api/beorn-json-data\";\nimport { updateActiveGameType } from \"../game/game.slice\";\nimport { receiveRemoteGameState } from \"../../store/global.actions\";\n\n// Utilities\nconst convertMarvelToCommonFormat = (\n  cardMarvelFormat: CardDataMarvel\n): CardData => {\n  const mappedCardData: CardData = {\n    code: cardMarvelFormat.code,\n    name: cardMarvelFormat.name,\n    images: null,\n    octgnId: cardMarvelFormat.octgn_id ?? null,\n    quantity: cardMarvelFormat.quantity,\n    doubleSided: !!cardMarvelFormat.double_sided,\n    backLink: cardMarvelFormat.back_link ?? null,\n    typeCode: cardMarvelFormat.type_code,\n    subTypeCode: null,\n    extraInfo: {\n      setCode: cardMarvelFormat.set_code ?? null,\n      packCode: cardMarvelFormat.pack_code,\n      factionCode: cardMarvelFormat.faction_code,\n    },\n  };\n  return mappedCardData;\n};\n\nconst convertLOTRToCommonFormat = (encounterCard: boolean) => (\n  cardLOTRFormat: CardDataLOTR\n): CardData => {\n  // if (!cardLOTRFormat.RingsDbCardId) {\n  //   console.log(\n  //     `No RingsDB Id for ${cardLOTRFormat.Slug} from ${cardLOTRFormat.CardSet}`\n  //   );\n  // }\n\n  // if (cardLOTRFormat.Front && !cardLOTRFormat.Front.ImagePath) {\n  //   console.log(\n  //     `No Front Image Path for ${cardLOTRFormat.Slug} from ${cardLOTRFormat.CardSet}`\n  //   );\n  // }\n\n  let cardBackImage = cardLOTRFormat.Back?.ImagePath;\n\n  if (cardLOTRFormat.Back && !cardLOTRFormat.Back.ImagePath) {\n    const frontImage = cardLOTRFormat.Front.ImagePath;\n    const frontImageWithoutExtension = frontImage\n      .split(\".\")\n      .slice(0, -1)\n      .join(\".\");\n    if (\n      frontImageWithoutExtension[frontImageWithoutExtension.length - 1] !== \"A\"\n    ) {\n      console.log(\n        `No Non-B Back Image Path for ${cardLOTRFormat.Slug} from ${cardLOTRFormat.CardSet}`\n      );\n    } else {\n      cardBackImage = frontImage.replaceAll(\"A.\", \"B.\");\n    }\n  }\n\n  const mappedCardData: CardData = {\n    code: encounterCard ? cardLOTRFormat.Slug : cardLOTRFormat.RingsDbCardId,\n    name: cardLOTRFormat.Title,\n    images: {\n      front: cardLOTRFormat.Front.ImagePath,\n      back: cardBackImage ?? null,\n    },\n    octgnId: cardLOTRFormat.OctgnGuid ?? null,\n    quantity: cardLOTRFormat.Quantity ?? 1,\n    doubleSided: !!cardLOTRFormat.Back,\n    backLink: null,\n    typeCode: cardLOTRFormat.CardType,\n    subTypeCode: cardLOTRFormat.CardSubType,\n    extraInfo: {\n      setCode: cardLOTRFormat.CardSet ?? null,\n      packCode: \"TODO - lotr\",\n      factionCode: encounterCard ? \"encounter\" : \"player\",\n    },\n  };\n  return mappedCardData;\n};\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.data = {};\n  // const heroPacks = Object.entries(PackData)\n  //   .filter(([key, _value]) => !key.includes(\"_encounter\"))\n  //   .map(([key, value]) => (value as unknown) as CardPackMarvel);\n\n  // const encounterPacks = Object.entries(PackData)\n  //   .filter(([key, value]) => key.includes(\"_encounter\"))\n  //   .map(([key, value]) => (value as unknown) as CardPackMarvel);\n\n  // heroPacks.forEach((pack) =>\n  //   pack.map(convertMarvelToCommonFormat).forEach((card: CardData) => {\n  //     if (state.entities[card.code]) {\n  //       console.error(\"Found multiple cards with code \" + card.code);\n  //     }\n\n  //     // if (!card.octgn_id) {\n  //     //   console.error(`Card ${card.code} had no octgn_id!`);\n  //     // }\n\n  //     state.entities[card.code] = card;\n  //   })\n  // );\n\n  // encounterPacks.forEach((pack) =>\n  //   pack.map(convertMarvelToCommonFormat).forEach((card: CardData) => {\n  //     if (state.encounterEntities[card.code]) {\n  //       console.error(\"Found multiple cards with code \" + card.code);\n  //     }\n\n  //     // if (!card.octgn_id) {\n  //     //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n  //     // }\n\n  //     state.encounterEntities[card.code] = card;\n  //   })\n  // );\n\n  let activeData = state.data[GameType.MarvelChampions];\n  if (!!activeData) {\n    activeData.setData = {};\n  } else {\n    state.data[GameType.MarvelChampions] = {\n      entities: {},\n      encounterEntities: {},\n      setData: {},\n    };\n    activeData = state.data[GameType.MarvelChampions];\n  }\n\n  SetData.forEach((set) => {\n    if (!!activeData) {\n      activeData.setData[set.code] = {\n        name: set.name,\n        setTypeCode: set.card_set_type_code,\n        cardsInSet: [],\n      };\n    }\n  });\n\n  activeData = state.data[GameType.LordOfTheRingsLivingCardGame];\n\n  if (!!activeData) {\n    activeData.setData = {};\n  } else {\n    state.data[GameType.LordOfTheRingsLivingCardGame] = {\n      entities: {},\n      encounterEntities: {},\n      setData: {},\n    };\n    activeData = state.data[GameType.LordOfTheRingsLivingCardGame];\n  }\n\n  Scenarios.forEach((scenario) => {\n    if (!!activeData) {\n      activeData.setData[scenario.Slug] = {\n        name: scenario.Title,\n        setTypeCode: scenario.Product,\n        cardsInSet: [],\n      };\n    }\n  });\n\n  return state;\n};\n\nconst storeCardData = (isPlayerPack: boolean, careAboutDups: boolean) => (cs: {\n  location: Draft<IGameCardsDataState> | undefined;\n  card: CardData;\n}) => {\n  const stateLocation = isPlayerPack\n    ? (cs.location as IGameCardsDataState).entities\n    : (cs.location as IGameCardsDataState).encounterEntities;\n\n  // if (!card.octgn_id) {\n  //   console.error(`Card ${card.code} had no octgn_id!`);\n  // }\n\n  if (!(cs.card.code[0] === \"0\" && cs.card.code[1] === \"0\")) {\n    if (stateLocation[cs.card.code]) {\n      if (careAboutDups) {\n        console.error(\n          \"Found multiple cards with code \" +\n            cs.card.code +\n            \" \" +\n            cs.card.name +\n            \" \" +\n            cs.card.extraInfo.setCode +\n            \" Existing card is \" +\n            stateLocation[cs.card.code].name +\n            \" \" +\n            stateLocation[cs.card.code].extraInfo.setCode\n        );\n      }\n    }\n    stateLocation[cs.card.code] = cs.card;\n  }\n};\n\nconst loadCardsForEncounterSetReducer: CaseReducer<\n  ICardsDataState,\n  PayloadAction<{\n    setCode: string;\n    cards: CardDataLOTR[];\n  }>\n> = (state, action) => {\n  const activeData = state.data[GameType.LordOfTheRingsLivingCardGame];\n  const activeSet = activeData?.setData[action.payload.setCode];\n\n  if (!action.payload.cards.map) {\n    console.log(\"No cards found for scenario \" + action.payload.setCode);\n    return;\n  }\n\n  action.payload.cards\n    .map(convertLOTRToCommonFormat(true))\n    .map((c) => {\n      return {\n        location: state.data[GameType.LordOfTheRingsLivingCardGame],\n        card: c,\n      };\n    })\n    .forEach(storeCardData(false, false));\n\n  if (!!activeSet) {\n    activeSet.cardsInSet = activeSet.cardsInSet.concat(\n      action.payload.cards\n        .filter(\n          (cd) => cd.CardSet.toLocaleLowerCase().indexOf(\"nightmare\") === -1\n        )\n        .map((cd) => {\n          return {\n            code: cd.Slug,\n            quantity: cd.Quantity,\n          };\n        })\n    );\n  }\n\n  return state;\n};\n\nconst loadCardsDataForPackReducer: CaseReducer<\n  ICardsDataState,\n  PayloadAction<{\n    packType: GameType;\n    pack: CardPackMarvel | CardPackLOTR;\n    pack_code: string;\n  }>\n> = (state, action) => {\n  if (!state.data[action.payload.packType]) {\n    state.data[action.payload.packType] = {\n      entities: {},\n      encounterEntities: {},\n      setData: {},\n    };\n  }\n\n  if (action.payload.packType === GameType.MarvelChampions) {\n    //This reducer is only intended to be called a single time each load.\n    const isHeroPack = !action.payload.pack_code.includes(\"_encounter\");\n\n    const pack = action.payload.pack as CardPackMarvel;\n\n    pack\n      .map(convertMarvelToCommonFormat)\n      .map((c) => {\n        return { location: state.data[action.payload.packType], card: c };\n      })\n      .forEach(storeCardData(isHeroPack, true));\n  } else if (\n    action.payload.packType === GameType.LordOfTheRingsLivingCardGame\n  ) {\n    const pack = action.payload.pack as CardPackLOTR;\n    if (!pack.cards) {\n      console.log(pack);\n    }\n    pack.cards\n      .map(convertLOTRToCommonFormat(false))\n      .map((c) => {\n        return { location: state.data[action.payload.packType], card: c };\n      })\n      .forEach(storeCardData(true, true));\n  }\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n    loadCardsDataForPack: loadCardsDataForPackReducer,\n    loadCardsForEncounterSet: loadCardsForEncounterSetReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      state.activeDataType =\n        action.payload.game.activeGameType ?? GameType.MarvelChampions;\n    });\n    builder.addCase(updateActiveGameType, (state, action) => {\n      state.activeDataType = action.payload;\n    });\n  },\n});\n\nexport const {\n  loadCardsData,\n  loadCardsDataForPack,\n  loadCardsForEncounterSet,\n} = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { ICardDetails } from \"./initialState\";\n\nexport interface AddCardStackWithIdPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n  id: string;\n}\n\nexport interface PullCardOutOfCardStackWithIdPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n  id: string;\n}\n\nexport interface StartCardMoveWithSplitStackIdPayload {\n  id: string;\n  splitTopCard: boolean;\n  splitCardId: string;\n}\n\nexport interface DrawCardsOutOfCardStackWithIdsPayload {\n  cardStackId: string;\n  numberToDraw: number;\n  idsToUse: string[];\n}\n\nexport interface ReplaceCardStackPayload {\n  id: string;\n  newStack: ICardDetails[];\n}\n\nexport interface CreateDeckPayload {\n  position: Vector2d;\n  heroId: string;\n  data: any;\n  dataId: string;\n  extraHeroCards: ICardDetails[];\n  relatedEncounterDeck: string[];\n  encounterDeckId: string;\n  relatedObligationDeck: string[];\n  obligationDeckId: string;\n}\n\nexport const addCardStackWithId = createAction<AddCardStackWithIdPayload>(\n  \"addCardStackWithId\"\n);\n\nexport const pullCardOutOfCardStackWithId = createAction<PullCardOutOfCardStackWithIdPayload>(\n  \"pullCardOutOfCardStackWithId\"\n);\n\nexport const drawCardsOutOfCardStackWithIds = createAction<DrawCardsOutOfCardStackWithIdsPayload>(\n  \"drawCardsOutOfCardStackWithIds\"\n);\n\nexport const startCardMoveWithSplitStackId = createAction<StartCardMoveWithSplitStackIdPayload>(\n  \"startCardMoveWithSplitStackId\"\n);\n\nexport const replaceCardStack = createAction<ReplaceCardStackPayload>(\n  \"replaceCardStack\"\n);\n\nexport const setStackShuffling = createAction<{\n  id: string;\n  shuffling: boolean;\n}>(\"setStackShuffling\");\n\nexport const createDeckFromTextFileWithIds = createAction<CreateDeckPayload>(\n  \"createDeckFromTextFileWithIds\"\n);\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n\nexport const getCenter = (p1: Vector2d, p2: Vector2d) => {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/common-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardsDataState, Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nconst getCurrentCardData = (cardsData: ICardsDataState) => {\n  return (\n    cardsData.data[cardsData.activeDataType] ?? {\n      entities: {},\n      encounterEntities: {},\n      setData: {},\n    }\n  );\n};\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    const data = getCurrentCardData(cardsData);\n    return { ...data.entities, ...data.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    const data = getCurrentCardData(cardsData);\n    return data.entities;\n  }\n);\n\nexport const getCardsDataHerosByName = createSelector(\n  getCardsData,\n  (cardsData) => {\n    const data = getCurrentCardData(cardsData);\n    let cardsDataByName: { [key: string]: CardData } = {};\n    Object.values(data.entities).forEach((cd) => {\n      if (cd.typeCode === \"hero\") {\n        cardsDataByName[cd.name] = cd;\n      }\n    });\n    return cardsDataByName;\n  }\n);\n\nexport const getCardsDataPlayerCardsByName = createSelector(\n  getCardsData,\n  (cardsData) => {\n    const data = getCurrentCardData(cardsData);\n    let cardsDataByName: { [key: string]: CardData } = {};\n    Object.values(data.entities).forEach((cd) => {\n      if (cd.typeCode !== \"hero\") {\n        cardsDataByName[cd.name] = cd;\n      }\n    });\n    return cardsDataByName;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    const data = getCurrentCardData(cardsData);\n    return data.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  const data = getCurrentCardData(cardsData);\n  return data.setData;\n});\n\nexport const getCardsDataSetDataAsEncounterEntities = createSelector(\n  getCardsDataSetData,\n  getCardsDataEncounterEntities,\n  (setData, encounterEntities) => {\n    return Object.entries(setData).map(([key, value]) => {\n      const encounterEntity: IEncounterEntity = {\n        setCode: key,\n        setData: value,\n        cards: value.cardsInSet.map((cis) => encounterEntities[cis.code]),\n      };\n\n      return encounterEntity;\n    });\n  }\n);\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n  getCardsDataSetData,\n  (encounterEntities, herosData, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    const campaignCards = Object.values(herosData).filter(\n      (pc) => pc.extraInfo.factionCode === \"campaign\"\n    );\n\n    Object.values(encounterEntities)\n      .concat(campaignCards)\n      .forEach((encounterCard) => {\n        const setCode = encounterCard.extraInfo.setCode || \"unknown\";\n        if (!!setTypesEncounters[setCode]) {\n          setTypesEncounters[setCode].push(encounterCard);\n        } else {\n          setTypesEncounters[setCode] = [encounterCard];\n        }\n      });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.liveState.present.cards;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const getPanMode = (state: RootState) =>\n  state.liveState.present.cards.panMode;\n\nexport const getDropTargetCardsById = createSelector(getCards, (cards) => {\n  const returnVal: {\n    [key: string]: { ownerRef: string; card: ICardStack | null };\n  } = {};\n  Object.entries(cards.dropTargetCards).forEach(([key, value]) => {\n    if (!!value) {\n      returnVal[value.id] = { ownerRef: key, card: value };\n    }\n  });\n\n  return returnVal;\n});\n","import { ICardDetails } from \"../features/cards/initialState\";\n\n// For some reason, the codes from marvelcdb and the images from cardgamedb can be off\nexport const CARD_PACK_REMAPPING: { [key: string]: string } = {\n  bkw: \"07\",\n  cap: \"04\",\n  drs: \"08\",\n  hlk: \"09\",\n  trors: \"10\",\n  twc: \"03\",\n};\n\n// export const EXTRA_CARDS: { [key: string]: { [key: string]: number } } = {\n//   doctor_strange: {\n//     \"09032\": 1,\n//     \"09033\": 1,\n//     \"09034\": 1,\n//     \"09035\": 1,\n//     \"09036\": 1,\n//   },\n//   ant: {\n//     \"12001c\": 1,\n//   },\n// };\n\nexport const EXTRA_CARDS: { [key: string]: ICardDetails[] } = {\n  doctor_strange: [\n    { jsonId: \"09032\" },\n    { jsonId: \"09033\" },\n    { jsonId: \"09034\" },\n    { jsonId: \"09035\" },\n    { jsonId: \"09036\" },\n  ],\n  ant: [{ jsonId: \"12001c\" }],\n  wsp: [{ jsonId: \"13001c\" }],\n};\n","import { GameType } from \"./app-constants\";\nimport * as React from \"react\";\nimport NewReleasesIcon from \"@material-ui/icons/NewReleases\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport SecurityIcon from \"@material-ui/icons/Security\";\nimport { StatusTokenType } from \"../constants/card-constants\";\n\nexport interface GameProperties {\n  deckSite: string;\n  decklistApi: string;\n  encounterUiName: string;\n  backgroundImageLocation: string;\n  tokens: {\n    stunned: TokenInfo | null;\n    confused: TokenInfo | null;\n    tough: TokenInfo | null;\n    damage: NumericTokenInfo | null;\n    threat: NumericTokenInfo | null;\n    generic: NumericTokenInfo | null;\n  };\n}\n\nexport interface TokenInfoBase {\n  touchMenuLetter: string | null;\n  touchMenuIcon: JSX.Element | null;\n  menuText: string;\n  imagePath: string;\n}\nexport interface NumericTokenInfo extends TokenInfoBase {\n  isNumeric: boolean;\n}\n\nexport interface TokenInfo extends TokenInfoBase {\n  menuRemoveText: string;\n  tokenType: StatusTokenType;\n}\n\nexport const GamePropertiesMap: { [key in GameType]: GameProperties } = {\n  marvelchampions: {\n    deckSite: \"marvelcdb.com\",\n    decklistApi: \"https://marvelcdb.com/api/public/decklist/\",\n    encounterUiName: \"Encounter Set\",\n    backgroundImageLocation: \"/images/table/background_marvelchampions.png\",\n    tokens: {\n      stunned: {\n        tokenType: StatusTokenType.Stunned,\n        touchMenuLetter: null,\n        touchMenuIcon: <NewReleasesIcon fontSize=\"large\"></NewReleasesIcon>,\n        menuText: \"Stun\",\n        menuRemoveText: \"Remove Stun\",\n        imagePath: process.env.PUBLIC_URL + \"/images/standard/stunned.png\",\n      },\n      confused: {\n        tokenType: StatusTokenType.Confused,\n        touchMenuLetter: null,\n        touchMenuIcon: <HelpIcon fontSize=\"large\"></HelpIcon>,\n        menuText: \"Confuse\",\n        menuRemoveText: \"Remove Confuse\",\n        imagePath: process.env.PUBLIC_URL + \"/images/standard/confused.png\",\n      },\n      tough: {\n        tokenType: StatusTokenType.Tough,\n        touchMenuLetter: null,\n        touchMenuIcon: <SecurityIcon fontSize=\"large\"></SecurityIcon>,\n        menuText: \"Tough\",\n        menuRemoveText: \"Remove Tough\",\n        imagePath: process.env.PUBLIC_URL + \"/images/standard/tough.png\",\n      },\n      damage: {\n        isNumeric: true,\n        touchMenuLetter: \"D\",\n        touchMenuIcon: null,\n        menuText: \"Set Damage\",\n        imagePath: process.env.PUBLIC_URL + \"/images/standard/damage.png\",\n      },\n      threat: {\n        isNumeric: true,\n        touchMenuLetter: \"T\",\n        touchMenuIcon: null,\n        menuText: \"Set Threat\",\n        imagePath: process.env.PUBLIC_URL + \"/images/standard/threat.png\",\n      },\n      generic: {\n        isNumeric: true,\n        touchMenuLetter: \"G\",\n        touchMenuIcon: null,\n        menuText: \"Set Generic Tokens\",\n        imagePath:\n          process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\",\n      },\n    },\n  },\n  lotrlcg: {\n    deckSite: \"ringsdb.com\",\n    decklistApi: \"https://ringsdb.com/api/public/decklist/\",\n    encounterUiName: \"Scenario\",\n    backgroundImageLocation: \"/images/table/background_lotrlcg.jpg\",\n    tokens: {\n      stunned: {\n        tokenType: StatusTokenType.Stunned,\n        touchMenuLetter: \"Q\",\n        touchMenuIcon: null,\n        menuText: \"Quest\",\n        menuRemoveText: \"Remove From Quest\",\n        imagePath: process.env.PUBLIC_URL + \"/images/standard/quest.png\",\n      },\n      confused: null,\n      tough: null,\n      damage: {\n        isNumeric: true,\n        touchMenuLetter: \"D\",\n        touchMenuIcon: null,\n        menuText: \"Set Damage\",\n        imagePath: process.env.PUBLIC_URL + \"/images/standard/damage_lotr.png\",\n      },\n      threat: {\n        isNumeric: true,\n        touchMenuLetter: \"P\",\n        touchMenuIcon: null,\n        menuText: \"Set Progress\",\n        imagePath: process.env.PUBLIC_URL + \"/images/standard/progress.png\",\n      },\n      generic: {\n        isNumeric: true,\n        touchMenuLetter: \"R\",\n        touchMenuIcon: null,\n        menuText: \"Set Resource Tokens\",\n        imagePath: process.env.PUBLIC_URL + \"/images/standard/resource.png\",\n      },\n    },\n  },\n};\n","import { Action, createAsyncThunk, ThunkAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n  getCardsDataHerosByName,\n  getCardsDataPlayerCardsByName,\n} from \"../cards-data/cards-data.selectors\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  addCardStackWithId,\n  createDeckFromTextFileWithIds,\n  drawCardsOutOfCardStackWithIds,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  setStackShuffling,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\nimport { ICardDetails, ICardStack } from \"./initialState\";\nimport { getCards } from \"./cards.selectors\";\nimport { EXTRA_CARDS } from \"../../constants/card-pack-mapping\";\nimport { GameType, myPeerRef } from \"../../constants/app-constants\";\nimport { GamePropertiesMap } from \"../../constants/game-type-properties-mapping\";\nimport { convertMarvelTxtToDeckInfo } from \"../../utilities/marvel-txt-converter\";\n\ninterface AddCardStackPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n}\n\nexport interface PullCardOutOfCardStackPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n}\n\nexport interface StartCardMovePayload {\n  id: string;\n  splitTopCard: boolean;\n}\n\nexport interface DrawCardsOutOfCardStackPayload {\n  cardStackId: string;\n  numberToDraw: number;\n}\n\nexport const shuffleStack = (\n  id?: string\n): ThunkAction<void, RootState, unknown, Action<string>> => (\n  dispatch,\n  getState\n) => {\n  const cardsState = getCards(getState());\n  const stacksToShuffle = !!id\n    ? [cardsState.cards.find((c) => c.id === id)]\n    : cardsState.cards.filter(\n        (c) => c.selected && c.controlledBy === myPeerRef\n      );\n\n  stacksToShuffle\n    .filter((s): s is ICardStack => !!s && s.cardStack.length > 1)\n    .forEach((stackToShuffle) => {\n      dispatch(setStackShuffling({ id: stackToShuffle.id, shuffling: true }));\n      const shuffledStack = shuffle(stackToShuffle.cardStack);\n      dispatch(\n        replaceCardStack({ id: stackToShuffle.id, newStack: shuffledStack })\n      );\n\n      // We have to do a setTimeout here, because if we do it in this event loop,\n      // the overall change for this card is nothing for the shuffling param\n      setTimeout(() => {\n        dispatch(\n          setStackShuffling({ id: stackToShuffle.id, shuffling: false })\n        );\n      });\n    });\n};\n\nexport const addCardStack = (\n  payload: AddCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(addCardStackWithId(payloadWithId));\n};\n\nexport const pullCardOutOfCardStack = (\n  payload: PullCardOutOfCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(pullCardOutOfCardStackWithId(payloadWithId));\n};\n\nexport const startCardMove = (\n  payload: StartCardMovePayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    splitCardId: uuidv4(),\n  };\n  dispatch(startCardMoveWithSplitStackId(payloadWithId));\n};\n\nexport const drawCardsOutOfCardStack = (\n  payload: DrawCardsOutOfCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const possibleIds = Array.from({ length: payload.numberToDraw }).map((_i) =>\n    uuidv4()\n  );\n  const payloadWithIds = {\n    ...payload,\n    idsToUse: possibleIds,\n  };\n  dispatch(drawCardsOutOfCardStackWithIds(payloadWithIds));\n};\n\nexport const createDeckFromTxt = (payload: {\n  gameType: GameType;\n  position: Vector2d;\n  txtContents: string;\n}): ThunkAction<void, RootState, unknown, Action<string>> => (\n  dispatch,\n  getState\n) => {\n  if (payload.gameType === GameType.MarvelChampions) {\n    const heroCardsDataByName = getCardsDataHerosByName(getState());\n    const playerCardsDataByName = getCardsDataPlayerCardsByName(getState());\n    dispatch(\n      createDeckFromTextFileWithIds(\n        getMarvelCards(\n          convertMarvelTxtToDeckInfo(\n            heroCardsDataByName,\n            playerCardsDataByName,\n            payload.position,\n            payload.txtContents\n          ),\n          getState(),\n          {\n            gameType: payload.gameType,\n            decklistId: -1,\n            position: payload.position,\n          }\n        )\n      )\n    );\n  }\n};\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (\n    payload: { gameType: GameType; decklistId: number; position: Vector2d },\n    thunkApi\n  ) => {\n    const response = await axios.get(\n      `${GamePropertiesMap[payload.gameType].decklistApi}${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n\n    switch (payload.gameType) {\n      case GameType.MarvelChampions:\n        return getMarvelCards(response, state, payload);\n      case GameType.LordOfTheRingsLivingCardGame:\n        return getLOTRCards(response, state, payload);\n    }\n  }\n);\n\nconst getMarvelCards = (\n  response: any,\n  state: RootState,\n  payload: { gameType: GameType; decklistId: number; position: Vector2d }\n) => {\n  const heroCardsData = getCardsDataHeroEntities(state);\n  const heroSet = heroCardsData[response.data.investigator_code];\n  const heroSetCode = heroSet.extraInfo.setCode;\n  const encounterCardsData = getCardsDataEncounterEntities(state);\n\n  let heroObligationDeck: string[] = [];\n  Object.entries(encounterCardsData)\n    .filter(\n      ([_key, value]) =>\n        (value.extraInfo.setCode === `${heroSetCode}` ||\n          value.extraInfo.setCode === `${heroSetCode}_nemesis`) &&\n        value.typeCode === \"obligation\"\n    )\n    .forEach(([key, value]) => {\n      heroObligationDeck = heroObligationDeck.concat(\n        Array.from({ length: value.quantity }).map((_i) => key)\n      );\n    });\n\n  // get the encounter cards for this deck\n  const heroEncounterDeckData = Object.values(encounterCardsData).filter(\n    (value) =>\n      value.extraInfo.setCode === `${heroSetCode}_nemesis` &&\n      value.typeCode !== \"obligation\"\n  );\n\n  let heroEncounterDeck: string[] = [];\n  heroEncounterDeckData.forEach((cd) => {\n    heroEncounterDeck = heroEncounterDeck.concat(\n      Array.from({ length: cd.quantity }).map((_i) => cd.code)\n    );\n  });\n\n  // check to see if there are any special extra cards for this hero\n  const extraCards = EXTRA_CARDS[heroSetCode ?? \"\"] ?? [];\n\n  // response.data.slots = { ...extraCards, ...response.data.slots };\n\n  return {\n    position: payload.position,\n    heroId: uuidv4(),\n    data: response.data,\n    dataId: uuidv4(),\n    extraHeroCards: extraCards,\n    relatedEncounterDeck: heroEncounterDeck,\n    encounterDeckId: uuidv4(),\n    relatedObligationDeck: heroObligationDeck,\n    obligationDeckId: uuidv4(),\n  };\n};\n\nconst getLOTRCards = (\n  response: any,\n  state: RootState,\n  payload: { gameType: GameType; decklistId: number; position: Vector2d }\n) => {\n  const heroCardsData = getCardsDataHeroEntities(state);\n\n  let heroStack: ICardDetails[] = [];\n\n  Object.entries(response.data.heroes).forEach(([key, value]) => {\n    const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n      (): ICardDetails => ({ jsonId: key })\n    );\n    heroStack = heroStack.concat(cardDetails);\n  });\n\n  const newSlots: { [key: string]: number } = {};\n\n  Object.entries(response.data.slots).forEach(([key, value]) => {\n    //get the card data to make sure it's not a hero\n    const cardData = heroCardsData[key];\n    if (!cardData) {\n      throw new Error(`Couldn't find card data for ${key}`);\n    }\n\n    if (cardData.typeCode !== \"Hero\") {\n      newSlots[key] = value as number;\n    }\n  });\n\n  response.data.slots = newSlots;\n\n  return {\n    position: payload.position,\n    heroId: uuidv4(),\n    data: response.data,\n    dataId: uuidv4(),\n    extraHeroCards: heroStack,\n    relatedEncounterDeck: [],\n    encounterDeckId: uuidv4(),\n    relatedObligationDeck: [],\n    obligationDeckId: uuidv4(),\n  };\n};\n\nconst shuffle = (array: ICardDetails[]): ICardDetails[] => {\n  const returnArray = JSON.parse(JSON.stringify(array));\n  var currentIndex = returnArray.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = returnArray[currentIndex];\n    returnArray[currentIndex] = returnArray[randomIndex];\n    returnArray[randomIndex] = temporaryValue;\n  }\n\n  return returnArray;\n};\n","import { loadState } from \"../../store/localStorage\";\nimport {\n  CounterTokenType,\n  StatusTokenType,\n} from \"../../constants/card-constants\";\n\nexport interface ICardStack {\n  controlledBy: string;\n  dragging: boolean;\n  shuffling: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n  counterTokens: {\n    [K in CounterTokenType]: number;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  dropTargetCards: { [key: string]: ICardStack | null };\n  attachTargetCards: { [key: string]: ICardStack | null };\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"liveState\")?.cards ?? {};\n\n// Make sure initially, none of the cards are \"owned\" / \"selected\" / \"shuffling\"\nif (!!localStorageState.cards) {\n  localStorageState.cards.forEach((c) => {\n    c.controlledBy = \"\";\n    c.selected = false;\n    c.shuffling = false;\n  });\n}\n\nconst defaultState: ICardsState = {\n  cards: [],\n  ghostCards: [],\n  dropTargetCards: {},\n  attachTargetCards: {},\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import {\n  CaseReducer,\n  createSlice,\n  Draft,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  cardConstants,\n  CounterTokenType,\n  StatusTokenType,\n} from \"../../constants/card-constants\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  addCardStackWithId,\n  createDeckFromTextFileWithIds,\n  CreateDeckPayload,\n  drawCardsOutOfCardStackWithIds,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  setStackShuffling,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\nimport { fetchDecklistById } from \"./cards.thunks\";\nimport {\n  ICardDetails,\n  ICardsState,\n  ICardStack,\n  initialState,\n} from \"./initialState\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\nconst CARD_ATTACH_TARGET_MIN_DISTANCE = 50;\nconst CARD_ATTACH_TARGET_MAX_DISTANCE = 150;\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  ref: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (\n    cardToUpdate &&\n    (cardToUpdate.controlledBy === \"\" || cardToUpdate.controlledBy === ref)\n  ) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedAndControlledCard = (\n  state: ICardsState,\n  actorRef: string,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => card.selected && card.controlledBy === actorRef)\n    .forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; unselectOtherCards: boolean }>\n> = (state, action) => {\n  if (action.payload.unselectOtherCards) {\n    unselectAllCardsReducer(state, action);\n  }\n\n  mutateCardWithId(\n    state,\n    action.payload.id,\n    (action as any).ACTOR_REF,\n    (card) => {\n      card.selected = true;\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  );\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = false;\n    card.controlledBy = \"\";\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = !card.selected;\n    if (!card.selected) {\n      card.controlledBy = \"\";\n    } else {\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string | undefined>\n> = (state, action) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === (action as any).ACTOR_REF &&\n        (card.id === (action.payload ?? \"\") || card.selected)\n    )\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst getAttachDrawPos = (\n  state: Draft<ICardsState>,\n  baseCard: ICardStack\n): Vector2d => {\n  let drawPos = { x: 0, y: 0 };\n  let takenSpace = true;\n  for (let i = 0; takenSpace; i++) {\n    const xToDraw = baseCard.x + (i + 1) * 50;\n    const yToDraw = baseCard.y - (i + 1) * 50;\n\n    drawPos = { x: xToDraw, y: yToDraw };\n\n    //Check for existing card\n    takenSpace = !!state.cards.find((c) => c.x === xToDraw && c.y === yToDraw);\n  }\n  return drawPos;\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack | null = null;\n\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload.id ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one. But only if the card is owned / controlled by us\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  if (\n    !!primaryCard &&\n    (primaryCard as ICardStack).controlledBy === (action as any).ACTOR_REF\n  ) {\n    foreachUnselectedCard(state, (card) => {\n      const distance = getDistance(\n        { x: card.x, y: card.y },\n        !!primaryCard ? { x: primaryCard.x, y: primaryCard.y } : { x: 0, y: 0 }\n      );\n      if (distance < CARD_DROP_TARGET_DISTANCE) {\n        possibleDropTargets.push({\n          distance,\n          card,\n        });\n      }\n    });\n  }\n\n  state.dropTargetCards[(action as any).ACTOR_REF] =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // go through and find if any unselected cards are potential attach targets\n  // If so, get the closest one. But only if the card is owned / controlled by us\n  const possibleAttachTargets: { distance: number; card: ICardStack }[] = [];\n  if (\n    !!primaryCard &&\n    (primaryCard as ICardStack).controlledBy === (action as any).ACTOR_REF\n  ) {\n    foreachUnselectedCard(state, (card) => {\n      const distance = getDistance(\n        !!primaryCard ? { x: primaryCard.x, y: primaryCard.y } : { x: 0, y: 0 },\n        { x: card.x, y: card.y }\n      );\n      if (\n        distance < CARD_ATTACH_TARGET_MAX_DISTANCE &&\n        distance > CARD_ATTACH_TARGET_MIN_DISTANCE &&\n        card.x < (primaryCard?.x ?? 0) &&\n        card.y > (primaryCard?.y ?? 0)\n      ) {\n        possibleAttachTargets.push({\n          distance,\n          card,\n        });\n      }\n    });\n  }\n\n  state.attachTargetCards[(action as any).ACTOR_REF] =\n    possibleAttachTargets.sort((c1, c2) => c1.distance - c2.distance)[0]\n      ?.card ?? null;\n\n  const attachTarget = state.attachTargetCards[(action as any).ACTOR_REF];\n  if (!!attachTarget) {\n    // First, figure out where we should draw the ghost card. Keep moving up\n    // and to the right until there's not a card there\n\n    const drawPos = getAttachDrawPos(state, attachTarget);\n\n    // Next, check if there's already a ghost card where we were going to draw\n    const existingGhostCard = state.ghostCards.find(\n      (gc) =>\n        gc.x === drawPos.x &&\n        gc.y === drawPos.y &&\n        gc.cardStack.length > 0 &&\n        gc.cardStack[0].jsonId === \"-1\"\n    );\n    if (!existingGhostCard) {\n      const attachGhostCard: ICardStack = JSON.parse(\n        JSON.stringify(attachTarget)\n      );\n      // In general we don't want to do this (generate ids in here) but since this is just a temporary ghost card that we won't\n      // ever refer to by id, it should be safe.\n      attachGhostCard.id = uuidv4();\n      attachGhostCard.x = drawPos.x;\n      attachGhostCard.y = drawPos.y;\n      attachGhostCard.cardStack = [{ jsonId: \"-1\" }];\n      state.ghostCards.push(attachGhostCard);\n    }\n  } else {\n    // remove all 'attachment' ghost cards\n    state.ghostCards = state.ghostCards.filter(\n      (gc) => gc.cardStack.length > 0 && gc.cardStack[0].jsonId !== \"-1\"\n    );\n  }\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  let attachTargetCardStacks: ICardStack[] = [];\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.attachTargetCards[(action as any).ACTOR_REF]) {\n        attachTargetCardStacks.push(card);\n      } else if (!!state.dropTargetCards[(action as any).ACTOR_REF]) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  const attachTarget = state.attachTargetCards[(action as any).ACTOR_REF];\n  if (!!attachTarget) {\n    const drawPos = getAttachDrawPos(state, attachTarget);\n\n    attachTargetCardStacks.forEach((cs, index) => {\n      cs.x = drawPos.x + index * 50;\n      cs.y = drawPos.y - index * 50;\n      state.cards.unshift(state.cards.splice(state.cards.indexOf(cs), 1)[0]);\n    });\n    // Now, if there was a drop target card, remove all those cards from the state\n  } else if (!!state.dropTargetCards[(action as any).ACTOR_REF]) {\n    state.cards = state.cards.filter(\n      (card) =>\n        !(\n          card.id === action.payload ||\n          (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n        )\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCards[(action as any).ACTOR_REF]?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCards[(action as any).ACTOR_REF] = null;\n  state.attachTargetCards[(action as any).ACTOR_REF] = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (\n        card &&\n        (card.controlledBy === \"\" ||\n          card.controlledBy === (action as any).ACTOR_REF)\n      ) {\n        card.selected = true;\n        card.controlledBy = (action as any).ACTOR_REF;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState, PayloadAction<any>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === \"\" ||\n        card.controlledBy === (action as any).ACTOR_REF\n    )\n    .forEach((card) => {\n      card.selected = false;\n      card.controlledBy = \"\";\n    });\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.selected &&\n        (card.controlledBy === \"\" ||\n          card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id?: string; tokenType: StatusTokenType; value?: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    if (action.payload.value !== undefined) {\n      cardToToggle.statusTokens[action.payload.tokenType] =\n        action.payload.value;\n    } else {\n      cardToToggle.statusTokens[action.payload.tokenType] = !cardToToggle\n        .statusTokens[action.payload.tokenType];\n    }\n  } else {\n    foreachSelectedAndControlledCard(\n      state,\n      (action as any).ACTOR_REF,\n      (card) => {\n        if (action.payload.value !== undefined) {\n          card.statusTokens[action.payload.tokenType] = action.payload.value;\n        } else {\n          card.statusTokens[action.payload.tokenType] = !card.statusTokens[\n            action.payload.tokenType\n          ];\n        }\n      }\n    );\n  }\n};\n\nconst adjustCounterTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{\n    id?: string;\n    tokenType: CounterTokenType;\n    delta?: number;\n    value?: number;\n  }>\n> = (state, action) => {\n  let cardsToToggle = state.cards.filter(\n    (c) =>\n      (!!action.payload.id && action.payload.id === c.id) ||\n      (c.selected && c.controlledBy === (action as any).ACTOR_REF)\n  );\n\n  cardsToToggle.forEach((c) => {\n    if (action.payload.value !== undefined) {\n      c.counterTokens[action.payload.tokenType] = action.payload.value;\n    } else if (action.payload.delta !== undefined) {\n      c.counterTokens[action.payload.tokenType] += action.payload.delta;\n    }\n    if (c.counterTokens[action.payload.tokenType] < 0) {\n      c.counterTokens[action.payload.tokenType] = 0;\n    }\n  });\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    resetCards: resetCardsReducer,\n    toggleToken: toggleTokenReducer,\n    adjustCounterToken: adjustCounterTokenReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.cards = action.payload.liveState.present.cards.cards;\n      state.ghostCards = action.payload.liveState.present.cards.ghostCards;\n    });\n\n    builder.addCase(replaceCardStack, (state, action) => {\n      const cardToReplaceStack = state.cards.find(\n        (c) => c.id === action.payload.id\n      );\n      if (!!cardToReplaceStack) {\n        cardToReplaceStack.cardStack = action.payload.newStack;\n      }\n    });\n\n    builder.addCase(resetApp, (state) => {\n      state.cards = [];\n      // state.previewCard = null;\n      state.dropTargetCards = {};\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(addCardStackWithId, (state, action) => {\n      const newStack: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        shuffling: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.id,\n        cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(newStack);\n    });\n\n    builder.addCase(pullCardOutOfCardStackWithId, (state, action) => {\n      const cardStackToUse = state.cards.find(\n        (c) => c.id === action.payload.cardStackId\n      );\n      if (!!cardStackToUse && cardStackToUse.cardStack.length > 1) {\n        const newCardStack: ICardDetails[] = [\n          { jsonId: action.payload.jsonId },\n        ];\n        const newCard = Object.assign({}, cardStackToUse, {\n          cardStack: newCardStack,\n        });\n        newCard.id = action.payload.id;\n        newCard.selected = true;\n        newCard.controlledBy = (action as any).ACTOR_REF;\n        newCard.x = newCard.x + cardConstants.CARD_WIDTH + 5;\n\n        // Find the first instance of the card with the json id. Note that because there\n        // might be multiple cards with the same json id, we can't just do a filter\n        const cardIndexToRemove = cardStackToUse.cardStack.findIndex(\n          (c) => c.jsonId === action.payload.jsonId\n        );\n\n        if (cardIndexToRemove !== -1) {\n          cardStackToUse.cardStack.splice(cardIndexToRemove, 1);\n        }\n\n        cardStackToUse.selected = false;\n        cardStackToUse.controlledBy = \"\";\n\n        state.cards.push(newCard);\n      }\n    });\n\n    builder.addCase(startCardMoveWithSplitStackId, (state, action) => {\n      // first, if the card moving isn't currently selected, clear all _our_ selected cards\n      const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n      if (cardToStartMoving && !cardToStartMoving.selected) {\n        state.cards = state.cards.map((card) => {\n          if (\n            card.controlledBy === \"\" ||\n            card.controlledBy === (action as any).ACTOR_REF\n          ) {\n            card.selected = card.id === action.payload.id;\n            if (card.selected) {\n              card.controlledBy = (action as any).ACTOR_REF;\n            } else {\n              card.controlledBy = \"\";\n            }\n          }\n          return card;\n        });\n      }\n\n      // If we are splitting, make a new stack of cards\n      if (action.payload.splitTopCard) {\n        const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n        if (!cardToMove) {\n          throw new Error(\"Expected to find card\");\n        }\n\n        cardToMove.selected = false;\n        cardToMove.controlledBy = \"\";\n\n        const topCard = cardToMove.cardStack.shift();\n        const newCard = Object.assign({}, cardToMove, {\n          selected: true,\n          controlledBy: (action as any).ACTOR_REF,\n          dragging: true,\n          cardStack: [topCard],\n        });\n\n        cardToMove.id = action.payload.splitCardId;\n\n        state.cards.push(newCard);\n      }\n\n      // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n      state.ghostCards = [];\n\n      if (!action.payload.splitTopCard) {\n        foreachSelectedAndControlledCard(\n          state,\n          (action as any).ACTOR_REF,\n          (card) => {\n            card.dragging = true;\n            state.ghostCards.push(Object.assign({}, card));\n          }\n        );\n      }\n\n      //Finally, if we have a preview card, clear it\n      // state.previewCard = null;\n    });\n\n    builder.addCase(drawCardsOutOfCardStackWithIds, (state, action) => {\n      if (action.payload.numberToDraw !== action.payload.idsToUse.length) {\n        throw new Error(\"Did not receive the expected number of ids\");\n      }\n\n      // First, unselect everything else of ours\n      unselectAllCardsReducer(state, (action as unknown) as any);\n\n      // Get the cardstack in question\n      let cardStackToUse = state.cards.find(\n        (c) => c.id === action.payload.cardStackId\n      );\n\n      if (!cardStackToUse) {\n        throw new Error(\n          `Couldn't find card stack with id ${action.payload.cardStackId}`\n        );\n      }\n\n      const sourceCardStackId = cardStackToUse.id;\n\n      //Next, for each card we should draw, remove it from the stack and make a new stack, which should be selected\n      for (let index = 0; index < action.payload.numberToDraw; index++) {\n        if (!!cardStackToUse) {\n          const topCardDetails = cardStackToUse.cardStack.shift();\n          if (!topCardDetails) {\n            throw new Error(\"Expected to find a top card, but didn't\");\n          }\n          const newCardStack: ICardDetails[] = [\n            { jsonId: topCardDetails.jsonId },\n          ];\n          const newCard = Object.assign({}, cardStackToUse, {\n            cardStack: newCardStack,\n          });\n          newCard.id = action.payload.idsToUse[index];\n          newCard.selected = true;\n          newCard.controlledBy = (action as any).ACTOR_REF;\n          newCard.faceup = true;\n          newCard.x = newCard.x + (cardConstants.CARD_WIDTH + 5) * (index + 1);\n          newCard.y += cardConstants.CARD_HEIGHT;\n\n          if (cardStackToUse.cardStack.length === 0) {\n            // we went through all the cards, remove the original card\n            state.cards = state.cards.filter((c) => c.id !== sourceCardStackId);\n            cardStackToUse = undefined;\n          }\n\n          state.cards.push(newCard);\n        }\n      }\n    });\n\n    builder.addCase(setStackShuffling, (state, action) => {\n      // get the stack to update\n      const stackToUpdate = state.cards.find((c) => c.id === action.payload.id);\n\n      if (!!stackToUpdate) {\n        stackToUpdate.shuffling = action.payload.shuffling;\n      }\n    });\n\n    builder.addCase(createDeckFromTextFileWithIds, (state, action) =>\n      handleLoadDeck(state, action)\n    );\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) =>\n      handleLoadDeck(state, action)\n    );\n  },\n});\n\nconst handleLoadDeck = (\n  state: Draft<ICardsState>,\n  action: PayloadAction<CreateDeckPayload>\n) => {\n  console.log(\"got decklist\");\n  console.log(action);\n\n  const potentialHeroCard: ICardDetails[] = action.payload.data\n    .investigator_code\n    ? [{ jsonId: action.payload.data.investigator_code }]\n    : [];\n\n  const heroCardStack = [\n    ...potentialHeroCard,\n    ...action.payload.extraHeroCards,\n  ];\n\n  const heroCard: ICardStack = {\n    controlledBy: (action as any).ACTOR_REF,\n    selected: true,\n    x: action.payload.position.x,\n    y: action.payload.position.y,\n    dragging: false,\n    shuffling: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: action.payload.heroId,\n    cardStack: heroCardStack,\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n    counterTokens: {\n      damage: 0,\n      threat: 0,\n      generic: 0,\n    },\n  };\n\n  let mainDeckStack: ICardDetails[] = [];\n  Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n    const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n      (): ICardDetails => ({ jsonId: key })\n    );\n    mainDeckStack = mainDeckStack.concat(cardDetails);\n  });\n\n  const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n  const newDeck: ICardStack = {\n    controlledBy: (action as any).ACTOR_REF,\n    selected: true,\n    x: action.payload.position.x + cardPadding,\n    y: action.payload.position.y,\n    dragging: false,\n    shuffling: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: action.payload.dataId,\n    cardStack: mainDeckStack,\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n    counterTokens: {\n      damage: 0,\n      threat: 0,\n      generic: 0,\n    },\n  };\n\n  const encounterDeck: ICardStack = {\n    controlledBy: (action as any).ACTOR_REF,\n    selected: true,\n    x: action.payload.position.x + cardPadding * 2,\n    y: action.payload.position.y,\n    dragging: false,\n    shuffling: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: action.payload.encounterDeckId,\n    cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n      jsonId,\n    })),\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n    counterTokens: {\n      damage: 0,\n      threat: 0,\n      generic: 0,\n    },\n  };\n\n  const obligationDeck: ICardStack = {\n    controlledBy: (action as any).ACTOR_REF,\n    selected: true,\n    x: action.payload.position.x + cardPadding * 3,\n    y: action.payload.position.y,\n    dragging: false,\n    shuffling: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: action.payload.obligationDeckId,\n    cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n      jsonId,\n    })),\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n    counterTokens: {\n      damage: 0,\n      threat: 0,\n      generic: 0,\n    },\n  };\n\n  if (heroCard.cardStack.length > 0) {\n    state.cards.push(heroCard);\n  }\n\n  if (newDeck.cardStack.length > 0) {\n    state.cards.push(newDeck);\n  }\n\n  if (encounterDeck.cardStack.length > 0) {\n    state.cards.push(encounterDeck);\n  }\n\n  if (obligationDeck.cardStack.length > 0) {\n    state.cards.push(obligationDeck);\n  }\n};\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  togglePanMode,\n  flipCards,\n  resetCards,\n  toggleToken,\n  adjustCounterToken,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\n\nexport interface AddNewCounterWithIdPayload {\n  pos: Vector2d;\n  id: string;\n}\n\nexport const addNewCounterWithId = createAction<AddNewCounterWithIdPayload>(\n  \"addNewCounterWithId\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport { PlayerColor } from \"../../constants/app-constants\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface ICountersState {\n  counters: ICounter[];\n  firstPlayerCounterPosition: Vector2d;\n}\n\nexport interface ICounter {\n  id: string;\n  position: Vector2d;\n  value: number;\n  color: PlayerColor;\n}\n\nconst localStorageState: ICountersState =\n  loadState(\"liveState\")?.counters ?? {};\n\nconst defaultState: ICountersState = {\n  counters: [],\n  firstPlayerCounterPosition: { x: 0, y: 0 },\n};\nexport const initialState: ICountersState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { PlayerColor } from \"../../constants/app-constants\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport { addNewCounterWithId } from \"./counters.actions\";\nimport { ICountersState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateCounterValueReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; delta: number }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.value += action.payload.delta;\n    if (counter.value < 0) {\n      counter.value = 0;\n    }\n  }\n};\n\nconst updateCounterColorReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; newColor: PlayerColor }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.color = action.payload.newColor;\n  }\n};\n\nconst removeCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<string>\n> = (state, action) => {\n  state.counters = state.counters.filter((c) => c.id !== action.payload);\n};\n\nconst moveCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; newPos: Vector2d }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.position = {\n      x: action.payload.newPos.x,\n      y: action.payload.newPos.y,\n    };\n  }\n};\n\nconst moveFirstPlayerCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.firstPlayerCounterPosition = {\n    x: action.payload.x,\n    y: action.payload.y,\n  };\n};\n\n// slice\nconst countersSlice = createSlice({\n  name: \"counters\",\n  initialState: initialState,\n  reducers: {\n    updateCounterValue: updateCounterValueReducer,\n    removeCounter: removeCounterReducer,\n    moveCounter: moveCounterReducer,\n    moveFirstPlayerCounter: moveFirstPlayerCounterReducer,\n    updateCounterColor: updateCounterColorReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      state.counters = action.payload.liveState.present.counters.counters;\n      state.firstPlayerCounterPosition =\n        action.payload.liveState.present.counters.firstPlayerCounterPosition;\n    });\n\n    builder.addCase(resetApp, (state, action) => {\n      state.counters = [];\n      state.firstPlayerCounterPosition = { x: 0, y: 0 };\n    });\n\n    builder.addCase(addNewCounterWithId, (state, action) => {\n      state.counters.push({\n        id: action.payload.id,\n        position: action.payload.pos,\n        value: 0,\n        color: \"red\",\n      });\n    });\n  },\n});\n\nexport const {\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n  moveFirstPlayerCounter,\n  updateCounterColor,\n} = countersSlice.actions;\n\nexport default countersSlice.reducer;\n","import { combineReducers } from \"redux\";\nimport undoable, { excludeAction, groupByActionTypes } from \"redux-undo\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport { startCardMoveWithSplitStackId } from \"../features/cards/cards.actions\";\nimport cards, { cardMove } from \"../features/cards/cards.slice\";\nimport game, {\n  clearPreviewCard,\n  setPreviewCardId,\n} from \"../features/game/game.slice\";\n\nimport counters, { moveCounter } from \"../features/counters/counters.slice\";\n\nconst undoableState = combineReducers({\n  counters,\n  cards,\n});\n\nconst rootReducer = combineReducers({\n  game,\n  cardsData,\n  liveState: undoable(undoableState, {\n    limit: 20,\n    groupBy: groupByActionTypes([moveCounter.type]),\n    filter: excludeAction([\n      startCardMoveWithSplitStackId.type,\n      cardMove.type,\n      setPreviewCardId.type,\n      clearPreviewCard.type,\n    ]),\n  }),\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import Peer from \"peerjs\";\nimport { myPeerRef } from \"../constants/app-constants\";\nimport { togglePanMode } from \"../features/cards/cards.slice\";\nimport {\n  loadCardsData,\n  loadCardsDataForPack,\n  loadCardsForEncounterSet,\n} from \"../features/cards-data/cards-data.slice\";\nimport {\n  clearMenuPreviewCardJsonId,\n  clearPreviewCard,\n  connectToRemoteGame,\n  requestResync,\n  setMenuPreviewCardJsonId,\n  setPeerId,\n  setPlayerColor,\n  setPreviewCardId,\n  updatePosition,\n  updateZoom,\n} from \"../features/game/game.slice\";\nimport { receiveRemoteGameState } from \"./global.actions\";\n\nconst DEBUG = false;\n\nconst blacklistRemoteActions = {\n  [connectToRemoteGame.type]: true,\n  [updatePosition.type]: true,\n  [updateZoom.type]: true,\n  [setPreviewCardId.type]: true,\n  [clearPreviewCard.type]: true,\n  [setMenuPreviewCardJsonId.type]: true,\n  [clearMenuPreviewCardJsonId.type]: true,\n  [togglePanMode.type]: true,\n  [receiveRemoteGameState.type]: true,\n  [requestResync.type]: true,\n  [loadCardsData.type]: true,\n  [loadCardsDataForPack.type]: true,\n  [loadCardsForEncounterSet.type]: true,\n};\n\nconst log = (...args: any[]) => {\n  if (DEBUG) {\n    console.log(args[0], args[1]);\n  }\n};\n\nconst setupConnection = (conn: any, storeAPI: any) => {\n  conn.on(\"data\", (data: any) => {\n    if (!data.INITIAL_STATE_MSG) {\n      if (!!data.RESYNC) {\n        log(\"received request for resync\");\n        conn.send({\n          INITIAL_STATE_MSG: true,\n          state: storeAPI.getState(),\n        });\n      } else {\n        log(\"recieved remote action\", data);\n        data.REMOTE_ACTION = true;\n        log(\"dispatching remote action\", data);\n        storeAPI.dispatch(data);\n      }\n    } else {\n      console.log(\"going to replace (most of) state with\", data.state);\n      setTimeout(() => {\n        storeAPI.dispatch(receiveRemoteGameState(data.state));\n      }, 0);\n    }\n  });\n};\n\nexport const peerJSMiddleware = (storeAPI: any) => {\n  const cgpPeer = new Peer(undefined, {\n    debug: 0,\n    config: {\n      iceServers: [\n        { urls: \"stun:stun.l.google.com:19302\" },\n        {\n          urls: \"turn:numb.viagenie.ca\",\n          username: \"webrtc@live.com\",\n          credential: \"muazkh\",\n        },\n      ],\n    },\n  });\n  let activeCon: Peer.DataConnection;\n\n  cgpPeer.on(\"error\", (err) => {\n    console.error(\"*****************Server error\");\n    console.error(err);\n  });\n\n  cgpPeer.on(\"disconnected\", () => {\n    console.log(\"****Peer server connection disconnected\");\n  });\n\n  cgpPeer.on(\"open\", (id) => {\n    console.log(\"My peer ID is: \" + id);\n    storeAPI.dispatch(setPeerId(id));\n\n    //look for query param\n    const remoteParamArray = window.location.href.split(\"remote=\");\n    if (remoteParamArray.length > 1) {\n      const remoteId = remoteParamArray[1].split(\"&\")[0];\n      console.log(\"FOUND QUERY PARAM. Going to connect to peer \" + remoteId);\n      activeCon = cgpPeer.connect(remoteId, {\n        metadata: { ref: myPeerRef },\n      });\n      setupConnection(activeCon, storeAPI);\n    }\n  });\n\n  cgpPeer.on(\"connection\", (conn) => {\n    console.log(\"Connection received!\");\n    activeCon = conn;\n    setupConnection(activeCon, storeAPI);\n\n    activeCon.on(\"open\", () => {\n      console.log(\"connection ready for data\");\n      log(\"going to send initial state\", storeAPI.getState());\n      activeCon.send({\n        INITIAL_STATE_MSG: true,\n        state: storeAPI.getState(),\n      });\n      // TODO: more complicated logic to handle multiple connections. Right now\n      // this just changes the connecting client to blue\n      const setPlayerColorAction = setPlayerColor({\n        ref: activeCon.metadata.ref,\n        color: \"blue\",\n      });\n      activeCon.send(setPlayerColorAction);\n      activeCon.send(\n        setPlayerColor({\n          ref: myPeerRef,\n          color: \"red\",\n        })\n      );\n      storeAPI.dispatch(setPlayerColorAction);\n    });\n\n    activeCon.on(\"error\", (err) => {\n      console.error(\"****************Connection error:\", err);\n    });\n\n    activeCon.on(\"close\", () => {\n      console.log(\"******connection closed for ref \" + activeCon.metadata.ref);\n    });\n\n    activeCon.peerConnection.onconnectionstatechange = (ev: Event) => {\n      console.log(`connection state changed`);\n      console.log(ev);\n      console.log(activeCon.peerConnection.connectionState);\n      if (\n        activeCon.peerConnection.connectionState === \"closed\" ||\n        activeCon.peerConnection.connectionState === \"disconnected\"\n      ) {\n        console.log(\n          \"CLEARING CLIENT OWNED CARDS for \" + activeCon.metadata.ref\n        );\n      }\n    };\n  });\n  return (next: any) => (action: any) => {\n    log(\"received local action\", action);\n\n    // If this isn't a REMOTE action, add our ref onto it\n    if (!action.REMOTE_ACTION) {\n      action.ACTOR_REF = myPeerRef;\n    } else if (!action.ACTOR_REF) {\n      console.error(`Received a REMOTE action without an ACTOR_REF:`);\n      console.log(action);\n    }\n\n    if (action.type === connectToRemoteGame.type) {\n      console.log(\"going to connect to peer \" + action.payload);\n      activeCon = cgpPeer.connect(action.payload, {\n        metadata: { ref: myPeerRef },\n      });\n      setupConnection(activeCon, storeAPI);\n    } else if (action.type === requestResync.type) {\n      if (!!activeCon) {\n        activeCon.send({ RESYNC: true });\n      }\n    }\n\n    if (\n      !action.REMOTE_ACTION &&\n      !!activeCon &&\n      !blacklistRemoteActions[action.type]\n    ) {\n      log(\"going to send action to peer!\");\n      activeCon.send(action);\n    }\n\n    return next(action);\n  };\n};\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\nimport { peerJSMiddleware } from \"./peer-js-redux-middleware\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n}).concat(peerJSMiddleware);\n\nexport default function configureStore() {\n  console.log(\"configuring store. NODE_ENV is \" + process.env.NODE_ENV);\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect, Text } from \"react-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport { GameType } from \"./constants/app-constants\";\nimport { GamePropertiesMap } from \"./constants/game-type-properties-mapping\";\ninterface IProps {\n  currentGameType: GameType;\n  x: number;\n  y: number;\n  card: ICardStack | undefined;\n}\n\ninterface IState {\n  imagesLoaded: {\n    damage: boolean;\n    threat: boolean;\n    generic: boolean;\n  };\n}\n\nconst desiredWidth = 47;\nconst desiredHeight = 47;\n\nclass CardTokens extends Component<IProps, IState> {\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imagesLoaded: {\n        damage: false,\n        threat: false,\n        generic: false,\n      },\n    };\n\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    const tokenInfo = GamePropertiesMap[this.props.currentGameType].tokens;\n\n    // DAMAGE\n    this.damageImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: true,\n            threat: this.state.imagesLoaded.threat,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card?.counterTokens.damage && !!tokenInfo.damage) {\n      this.damageImg.src = tokenInfo.damage.imagePath;\n    }\n\n    // THREAT\n    this.threatImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: true,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card?.counterTokens.threat && !!tokenInfo.threat) {\n      this.threatImg.src = tokenInfo.threat.imagePath;\n    }\n\n    // GENERIC\n    this.genericImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: this.state.imagesLoaded.threat,\n            generic: true,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card?.counterTokens.generic && !!tokenInfo.generic) {\n      this.genericImg.src = tokenInfo.generic.imagePath;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    const tokenInfo = GamePropertiesMap[this.props.currentGameType].tokens;\n\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.damage &&\n      !prevProps.card?.counterTokens.damage &&\n      !!this.props.card?.counterTokens.damage &&\n      !!tokenInfo.damage\n    ) {\n      this.damageImg.src = tokenInfo.damage.imagePath;\n    }\n\n    // THREAT\n    if (\n      !this.state.imagesLoaded.threat &&\n      !prevProps.card?.counterTokens.threat &&\n      !!this.props.card?.counterTokens.threat &&\n      !!tokenInfo.threat\n    ) {\n      this.threatImg.src = tokenInfo.threat.imagePath;\n    }\n\n    // GENERIC\n    if (\n      !this.state.imagesLoaded.generic &&\n      !prevProps.card?.counterTokens.generic &&\n      !!this.props.card?.counterTokens.generic &&\n      !!tokenInfo.generic\n    ) {\n      this.genericImg.src = tokenInfo.generic.imagePath;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    if (!this.props.card) return null;\n\n    const damageX = this.props.x - desiredWidth / 2;\n    const damageY = this.props.y - cardConstants.CARD_HEIGHT / 2 + 20;\n    const showDamage =\n      this.state.imagesLoaded.damage && !!this.props.card.counterTokens.damage;\n\n    const damageToken = showDamage ? (\n      <Rect\n        key={`${this.props.card.id}-damageToken`}\n        x={damageX}\n        y={damageY}\n        scale={{\n          x: desiredWidth / this.damageImg.naturalWidth,\n          y: desiredHeight / this.damageImg.naturalHeight,\n        }}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        fillPatternImage={this.damageImg}\n      ></Rect>\n    ) : null;\n\n    const damageText = showDamage ? (\n      <Text\n        key={`${this.props.card.id}-damageText`}\n        x={damageX}\n        y={damageY}\n        width={\n          this.damageImg.naturalWidth *\n          (desiredWidth / this.damageImg.naturalWidth)\n        }\n        height={\n          this.damageImg.naturalHeight *\n          (desiredHeight / this.damageImg.naturalHeight)\n        }\n        text={`${this.props.card.counterTokens.damage}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const threatX = this.props.x - desiredWidth / 2;\n    const threatY = damageY + desiredHeight + 5;\n    const showThreat =\n      this.state.imagesLoaded.threat && !!this.props.card.counterTokens.threat;\n\n    const threatToken = showThreat ? (\n      <Rect\n        key={`${this.props.card.id}-threatToken`}\n        x={threatX}\n        y={threatY}\n        scale={{\n          x: desiredWidth / this.threatImg.naturalWidth,\n          y: desiredHeight / this.threatImg.naturalHeight,\n        }}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        fillPatternImage={this.threatImg}\n      ></Rect>\n    ) : null;\n\n    const threatText = showThreat ? (\n      <Text\n        key={`${this.props.card.id}-threatText`}\n        x={threatX}\n        y={threatY}\n        width={\n          this.threatImg.naturalWidth *\n          (desiredWidth / this.threatImg.naturalWidth)\n        }\n        height={\n          this.threatImg.naturalHeight *\n          (desiredHeight / this.threatImg.naturalHeight)\n        }\n        text={`${this.props.card.counterTokens.threat}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const genericX = this.props.x - desiredWidth / 2;\n    const genericY = threatY + desiredHeight + 5;\n    const showGeneric =\n      this.state.imagesLoaded.generic &&\n      !!this.props.card.counterTokens.generic;\n\n    const genericToken = showGeneric ? (\n      <Rect\n        key={`${this.props.card.id}-genericToken`}\n        x={genericX}\n        y={genericY}\n        scale={{\n          x: desiredWidth / this.genericImg.naturalWidth,\n          y: desiredHeight / this.genericImg.naturalHeight,\n        }}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        fillPatternImage={this.genericImg}\n      ></Rect>\n    ) : null;\n\n    const genericText = showGeneric ? (\n      <Text\n        key={`${this.props.card.id}-genericText`}\n        x={genericX}\n        y={genericY}\n        width={\n          this.genericImg.naturalWidth *\n          (desiredWidth / this.genericImg.naturalWidth)\n        }\n        height={\n          this.genericImg.naturalHeight *\n          (desiredHeight / this.genericImg.naturalHeight)\n        }\n        text={`${this.props.card.counterTokens.generic}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    return [\n      damageToken,\n      damageText,\n      threatToken,\n      threatText,\n      genericToken,\n      genericText,\n    ];\n  }\n}\n\nexport default CardTokens;\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Rect as RectRef } from \"konva/types/shapes/Rect\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect, Text } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { GameType, myPeerRef, PlayerColor } from \"./constants/app-constants\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport { GamePropertiesMap } from \"./constants/game-type-properties-mapping\";\n\nexport const HORIZONTAL_TYPE_CODES = [\n  \"main_scheme\",\n  \"side_scheme\",\n  \"quest\",\n  \"player_side_quest\",\n];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  currentGameType: GameType;\n  name: string;\n  code: string;\n  selectedColor: PlayerColor;\n  controlledBy: string;\n  dragging: boolean;\n  shuffling: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDoubleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDoubleTap?: (id: string, event: KonvaEventObject<TouchEvent>) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTargetColor?: string;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrls: string[];\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  imageLoadFailed: number;\n  prevImgUrls: string[];\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nconst stringArraysEqual = (array1: string[], array2: string[]) => {\n  return (\n    array1.length === array2.length &&\n    array1.every((value, index) => {\n      return value === array2[index];\n    })\n  );\n};\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (!stringArraysEqual(props.imgUrls, state.prevImgUrls ?? [])) {\n      return {\n        imageLoaded: false,\n        imageLoadFailed: 0,\n        prevImgUrls: props.imgUrls,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private imgs: HTMLImageElement[] = [];\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private unmounted: boolean;\n  private touchTimer: any = null;\n  private rect: RectRef | null = null;\n  private shuffleToggle = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      imageLoadFailed: 0,\n      prevImgUrls: this.props.imgUrls,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.initCardImages(props);\n\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    const tokenInfo = GamePropertiesMap[props.currentGameType].tokens;\n\n    if (!!props.cardState?.stunned && !!tokenInfo.stunned) {\n      this.stunnedImg.src = tokenInfo.stunned.imagePath;\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused && !!tokenInfo.confused) {\n      this.confusedImg.src = tokenInfo.confused.imagePath;\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough && !!tokenInfo.tough) {\n      this.toughImg.src = tokenInfo.tough.imagePath;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    // if we just went from not shuffling -> shuffling, animate\n    if (!prevProps.shuffling && this.props.shuffling) {\n      if (!!this.rect) {\n        this.shuffleToggle = !this.shuffleToggle;\n        this.rect.to({\n          rotation: this.currentRotation + (this.shuffleToggle ? 360 : -360),\n          duration: 0.2,\n        });\n      }\n    }\n\n    if (\n      !this.state.imageLoaded &&\n      !stringArraysEqual(prevProps.imgUrls, this.props.imgUrls)\n    ) {\n      this.setState({\n        imageLoaded: false,\n        imageLoadFailed: 0,\n      });\n      this.initCardImages(this.props);\n    }\n\n    const tokenInfo = GamePropertiesMap[this.props.currentGameType].tokens;\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned &&\n      !!tokenInfo.stunned\n    ) {\n      this.stunnedImg.src = tokenInfo.stunned.imagePath;\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused &&\n      !!tokenInfo.confused\n    ) {\n      this.confusedImg.src = tokenInfo.confused.imagePath;\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough &&\n      !!tokenInfo.tough\n    ) {\n      this.toughImg.src = tokenInfo.tough.imagePath;\n    }\n  }\n\n  private initCardImages = (props: IProps) => {\n    this.imgs = props.imgUrls.map(() => new Image());\n\n    // When the image loads, set a flag in the state\n    this.imgs.forEach(\n      (img) =>\n        (img.onload = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoaded: true,\n            });\n          }\n        })\n    );\n\n    this.imgs.forEach(\n      (img) =>\n        (img.onerror = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoadFailed: this.state.imageLoadFailed + 1,\n            });\n          }\n        })\n    );\n\n    props.imgUrls.forEach((imgUrl, index) => (this.imgs[index].src = imgUrl));\n  };\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.renderCard(this.state.imageLoaded);\n  }\n\n  private renderCard(imageLoaded: boolean) {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderUnanimatedCard(heightToUse, widthToUse, imageLoaded);\n  }\n\n  // Unfortunately, if you try to use shadow / blur to indicate selection\n  // (which I did at first and looks better, imo) the performance in horrible,\n  // even with some reccommended settings (shadowForStrokeEnabled = false and\n  // hitStrokeWidth = 0). So we'll just use stroke / border for everything\n  private getStrokeColor = () => {\n    if (!!this.props.dropTargetColor) {\n      return this.props.dropTargetColor;\n    }\n\n    if (this.props.selected) {\n      return this.props.selectedColor;\n    }\n\n    return \"\";\n  };\n\n  private renderUnanimatedCard = (\n    heightToUse: number,\n    widthToUse: number,\n    imageLoaded: boolean\n  ) => {\n    const imgToUse = imageLoaded\n      ? this.imgs.find((i) => i.complete && i.naturalHeight !== 0)\n      : undefined;\n\n    const scale = this.getScale(imgToUse, widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            ref={(node) => {\n              if (!!node) {\n                this.rect = node;\n              }\n            }}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={offset}\n            stroke={this.getStrokeColor()}\n            strokeWidth={!!this.getStrokeColor() ? 4 : 0}\n            fillPatternRotation={\n              !imageLoaded ||\n              this.shouldRenderImageHorizontal(\n                this.props.typeCode || \"\",\n                HORIZONTAL_TYPE_CODES\n              )\n                ? 270\n                : 0\n            }\n            fillPatternImage={imgToUse}\n            fillPatternScaleX={scale.width}\n            fillPatternScaleY={scale.height}\n            fill={imageLoaded ? undefined : \"gray\"}\n            shadowForStrokeEnabled={false}\n            hitStrokeWidth={0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={\n              this.props.controlledBy === \"\" ||\n              this.props.controlledBy === myPeerRef\n            }\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleTap}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleTouchStart}\n            onTouchMove={this.handleTouchMove}\n            onTouchEnd={this.handleTouchEnd}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Spring\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          to={{\n            rotation: this.props.exhausted ? 90 : 0,\n          }}\n        >\n          {(animatedProps: any) => (\n            <animated.Rect\n              {...animatedProps}\n              cornerRadius={[9, 9, 9, 9]}\n              x={this.props.x}\n              y={this.props.y}\n              width={widthToUse}\n              height={heightToUse}\n              offset={cardStackOffset}\n              opacity={this.props.isGhost ? 0.5 : 1}\n              fill={\"gray\"}\n              shadowForStrokeEnabled={false}\n              hitStrokeWidth={0}\n            />\n          )}\n        </Spring>\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens =\n      this.props.dragging || this.props.isGhost ? null : (\n        <CardTokensContainer\n          currentGameType={this.props.currentGameType}\n          key={`${this.props.id}-cardTokens`}\n          id={this.props.id}\n          x={this.props.x}\n          y={this.props.y}\n        ></CardTokensContainer>\n      );\n\n    const noImageCardNameText = this.renderCardName(\n      offset,\n      widthToUse,\n      heightToUse\n    );\n\n    return [\n      cardStack,\n      card,\n      noImageCardNameText,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private renderCardName(\n    offset: Vector2d,\n    cardWidth: number,\n    cardHeight: number\n  ) {\n    const textOffset = { x: offset.x - 10, y: offset.y - 20 };\n    const textItem =\n      this.state.imageLoadFailed === this.props.imgUrls.length &&\n      this.state.imageLoadFailed !== 0 ? (\n        <Text\n          key={`${this.props.id}-cardnametext`}\n          offset={textOffset}\n          x={this.props.x}\n          y={this.props.y}\n          width={cardWidth - 10}\n          height={cardHeight - 20}\n          fontSize={24}\n          text={`${this.props.name} ${this.props.code}`}\n          draggable={\n            this.props.controlledBy === \"\" ||\n            this.props.controlledBy === myPeerRef\n          }\n          onDragStart={this.handleDragStart}\n          onDragMove={this.handleDragMove}\n          onDragEnd={this.handleDragEnd}\n          onDblClick={this.handleDoubleClick}\n          onDblTap={this.handleDoubleClick}\n          onClick={this.handleClick}\n          onTap={this.handleClick}\n          onMouseDown={this.handleMouseDown}\n          onTouchStart={this.handleMouseDown}\n          onMouseOver={this.handleMouseOver}\n          onMouseOut={this.handleMouseOut}\n          onContextMenu={this.handleContextMenu}\n        ></Text>\n      ) : null;\n\n    return textItem;\n  }\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type.toLocaleLowerCase()) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrls.some((i) => i.includes(\"standard\")) &&\n      this.props.imgUrls.some((i) => i.includes(\"_back\"))\n    );\n  }\n\n  private get currentRotation() {\n    return this.props.exhausted ? 90 : 0;\n  }\n\n  private getScale(\n    img: HTMLImageElement | undefined,\n    widthToUse: number,\n    heightToUse: number\n  ) {\n    const width = !!img ? widthToUse / img.naturalWidth : widthToUse;\n\n    const widthHorizontal = !!img ? heightToUse / img.naturalWidth : widthToUse;\n\n    const height = !!img ? heightToUse / img.naturalHeight : heightToUse;\n\n    const heightHorizontal = !!img\n      ? widthToUse / img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id, event);\n    }\n  };\n\n  private handleDoubleTap = (event: KonvaEventObject<TouchEvent>) => {\n    if (this.props.handleDoubleTap) {\n      this.props.handleDoubleTap(this.props.id, event);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id, event);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleTouchStart = (event: KonvaEventObject<TouchEvent>) => {\n    event.cancelBubble = true;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.handleContextMenu(\n        (event as unknown) as KonvaEventObject<PointerEvent>\n      );\n    }, 750);\n  };\n\n  private handleTouchMove = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleTouchEnd = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardData } from \"./external-api/common-card-data\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { AutocompleteHighlightChangeReason } from \"@material-ui/lab/useAutocomplete\";\ninterface IProps {\n  cardsDataEntities: ICardData;\n  card: ICardStack;\n  cardSelected: (jsonId: string) => void;\n  preview: (jsonId: string) => void;\n  clearPreview: () => void;\n}\n\nclass CardStackCardSelector extends Component<IProps> {\n  private cardsDataInStack: CardData[] = [];\n\n  constructor(props: IProps) {\n    super(props);\n    this.cardsDataInStack = props.card.cardStack.map((c) => {\n      return this.props.cardsDataEntities[c.jsonId];\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clearPreview();\n  }\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble} onKeyPress={this.cancelBubble}>\n        <Autocomplete\n          id=\"cardstack-card-selector-combobox\"\n          options={this.cardsDataInStack}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          onHighlightChange={this.handleHighlightChange}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Find Card...\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleHighlightChange = (\n    _event: any,\n    option: CardData | null,\n    reason: AutocompleteHighlightChangeReason\n  ) => {\n    if (!option) {\n      this.props.clearPreview();\n    } else {\n      this.props.preview(option.code);\n    }\n  };\n\n  private handleSelected = (_event: any, value: CardData | null) => {\n    this.props.clearPreview();\n    if (!!value && !!this.props.cardSelected) {\n      this.props.cardSelected(value.code);\n    }\n  };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default CardStackCardSelector;\n","import { connect } from \"react-redux\";\nimport CardStackCardSelector from \"./CardStackCardSelector\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport {\n  clearMenuPreviewCardJsonId,\n  setMenuPreviewCardJsonId,\n} from \"./features/game/game.slice\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cardsDataEntities: getCardsDataEntities(state),\n  };\n};\n\nconst CardStackCardSelectorContainer = connect(mapStateToProps, {\n  preview: setMenuPreviewCardJsonId,\n  clearPreview: clearMenuPreviewCardJsonId,\n})(CardStackCardSelector);\n\nexport default CardStackCardSelectorContainer;\n","export const MISSING_CARD_IMAGE_MAP: { [key: string]: string } = {\n  \"02001a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"8665869b-fae4-494e-91d1-1e8c308220c2\" +\n    \".jpg\",\n\n  \"02001b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"8665869b-fae4-494e-91d1-1e8c308220c2\" +\n    \".b.jpg\",\n\n  \"02002a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"cfd051be-4ade-4cf8-b575-4b673cfa9a92\" +\n    \".jpg\",\n\n  \"02002b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"cfd051be-4ade-4cf8-b575-4b673cfa9a92\" +\n    \".b.jpg\",\n\n  \"02003a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b16187a4-3f29-4a4b-8b66-6e8c7524c402\" +\n    \".jpg\",\n\n  \"02003b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b16187a4-3f29-4a4b-8b66-6e8c7524c402\" +\n    \".b.jpg\",\n\n  \"02004\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b35084d9-3a2b-418c-b1a4-e4929de16a2c\" +\n    \".jpg\",\n\n  \"02004_double_sided_back\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b35084d9-3a2b-418c-b1a4-e4929de16a2c\" +\n    \".b.jpg\",\n\n  \"02005\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"1eae757a-25b2-4b29-a8e7-f43b12c531b0\" +\n    \".jpg\",\n\n  \"02005_double_sided_back\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"1eae757a-25b2-4b29-a8e7-f43b12c531b0\" +\n    \".b.jpg\",\n\n  \"02006a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"0a59161d-7db6-4328-9eeb-1906ce8715a5\" +\n    \".jpg\",\n\n  \"02006b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"0a59161d-7db6-4328-9eeb-1906ce8715a5\" +\n    \".b.jpg\",\n\n  \"12020\": \"https://lcgcdn.s3.amazonaws.com/mc/MC13en_20.jpg\",\n\n  // Scarlet Witch Cards\n  \"15001a\": \"https://marvelcdb.com/bundles/cards/15001a.png\",\n  \"15001b\": \"https://marvelcdb.com/bundles/cards/15001b.png\",\n  \"15002\": \"https://hallofheroeshome.files.wordpress.com/2021/03/s1.jpg\",\n  \"15003\": \"https://hallofheroeshome.files.wordpress.com/2021/03/s2.jpg\",\n  \"15004\": \"https://hallofheroeshome.files.wordpress.com/2021/03/s6.jpg\",\n  \"15005\": \"https://hallofheroeshome.files.wordpress.com/2021/03/s7.jpg\",\n  \"15006\": \"https://hallofheroeshome.files.wordpress.com/2021/03/s10.jpg\",\n  \"15007\": \"https://hallofheroeshome.files.wordpress.com/2021/03/s11.jpg\",\n  \"15008\": \"https://hallofheroeshome.files.wordpress.com/2021/03/s12.jpg\",\n  \"15009\": \"https://hallofheroeshome.files.wordpress.com/2021/03/s15.jpg\",\n  \"15010\": \"https://hallofheroeshome.files.wordpress.com/2021/03/w1.jpg\",\n  \"15011\": \"https://hallofheroeshome.files.wordpress.com/2021/03/w2.jpg\",\n  \"15012\": \"https://hallofheroeshome.files.wordpress.com/2021/03/w3.jpg\",\n  \"15013\": \"https://hallofheroeshome.files.wordpress.com/2021/03/w4.jpg\",\n  \"15014\": \"https://hallofheroeshome.files.wordpress.com/2021/03/w5.jpg\",\n  \"15015\": \"https://hallofheroeshome.files.wordpress.com/2021/03/w6.jpg\",\n  \"15019\": \"https://hallofheroeshome.files.wordpress.com/2021/03/w10.jpg\",\n  \"15023\": \"https://hallofheroeshome.files.wordpress.com/2021/03/n2.jpg\",\n  \"15024\": \"https://hallofheroeshome.files.wordpress.com/2021/03/n3.jpg\",\n  \"15025\": \"https://hallofheroeshome.files.wordpress.com/2021/03/n4.jpg\",\n  \"15026\": \"https://hallofheroeshome.files.wordpress.com/2021/03/n5.jpg\",\n  \"15027\": \"https://hallofheroeshome.files.wordpress.com/2021/03/n6.jpg\",\n  \"15028\": \"https://hallofheroeshome.files.wordpress.com/2021/03/z1.jpg\",\n  \"15029\": \"https://hallofheroeshome.files.wordpress.com/2021/03/z2.jpg\",\n  \"15030\": \"https://hallofheroeshome.files.wordpress.com/2021/03/z3.jpg\",\n  \"15031\": \"https://hallofheroeshome.files.wordpress.com/2021/03/z4.jpg\",\n};\n","import MenuItem from \"@material-ui/core/MenuItem\";\nimport React from \"react\";\n\ninterface IProps {\n  label: string;\n  key?: string;\n  handleFile: (file: File) => void;\n}\n\nconst FileUploader = (props: IProps) => {\n  // Create a reference to the hidden file input element\n  const hiddenFileInput = React.useRef<HTMLInputElement>(null);\n\n  // Programatically click the hidden file input element\n  // when the Button component is clicked\n  const handleClick = (event: React.MouseEvent) => {\n    if (!!hiddenFileInput?.current) {\n      var evt = document.createEvent(\"MouseEvents\");\n      evt.initEvent(\"click\", true, false);\n      hiddenFileInput.current.dispatchEvent(evt);\n    }\n    event.stopPropagation();\n  };\n  // Call a function (passed as a prop from the parent component)\n  // to handle the user-selected file\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!!event.target.files && event.target.files.length > 0) {\n      const fileUploaded = event.target.files[0];\n      props.handleFile(fileUploaded);\n    }\n  };\n  return (\n    <>\n      <MenuItem onClick={handleClick}>{props.label}</MenuItem>\n      <input\n        type=\"file\"\n        ref={hiddenFileInput}\n        onChange={handleChange}\n        style={{ display: \"none\" }}\n      />\n    </>\n  );\n};\n\nexport default FileUploader;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport NestedMenuItem from \"material-ui-nested-menu-item\";\nimport FileUploader from \"./FileUploader\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action?: () => void;\n  fileLoadedAction?: (fileContents: string) => void;\n  children?: ContextMenuItem[];\n  fileUploader?: boolean;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\ninterface IState {\n  menuOpen: boolean;\n}\n\nconst isTargetFileInput = (target: EventTarget) => {\n  const targetAsInput = target as HTMLInputElement;\n  return !!targetAsInput?.files;\n};\n\nclass ContextMenu extends Component<IProps, IState> {\n  private nestedRef: any;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      menuOpen: true,\n    };\n  }\n\n  render() {\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={(event) => {\n          if (!isTargetFileInput(event.target)) {\n            this.props.hideContextMenu();\n          }\n        }}\n      >\n        <Menu\n          keepMounted\n          open={this.state.menuOpen}\n          onClose={this.handleMenuClosed}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{\n            top: this.props.position.y + 8,\n            left: this.props.position.x + 8,\n          }}\n        >\n          {this.props.items.map((i, index) => this.renderMenuItem(i, index))}\n        </Menu>\n      </div>\n    );\n  }\n\n  private renderMenuItem = (i: ContextMenuItem, index: number) => {\n    if (!!i.children) {\n      return (\n        <NestedMenuItem\n          ref={(val) => {\n            this.nestedRef = val;\n          }}\n          key={`contextMenu-item-${index}`}\n          parentMenuOpen={this.state.menuOpen}\n          label={i.label}\n          onClick={(event) => {\n            if (!!this.nestedRef) {\n              event.stopPropagation();\n              // This is a hack to force the nested menu to open on touch devices.\n              // the `NestedMenuItem` library doesn't correctly support touch events, only hover\n              this.nestedRef.parentElement.focus();\n            }\n          }}\n        >\n          {i.children.map((nestedI, nestedIndex) => {\n            return this.renderMenuItem(nestedI, index * 1000 + nestedIndex);\n          })}\n        </NestedMenuItem>\n      );\n    } else if (!!i.fileUploader) {\n      return (\n        <FileUploader\n          label={i.label}\n          key={`contextMenu-item-${index}`}\n          handleFile={(file) => {\n            // setting up the reader\n            const reader = new FileReader();\n            reader.readAsText(file, \"UTF-8\");\n\n            // here we tell the reader what to do when it's done reading...\n            reader.onload = (readerEvent) => {\n              const content: string = readerEvent.target?.result as string; // this is the content!\n              if (!!i.fileLoadedAction) {\n                i.fileLoadedAction(content);\n              }\n              this.props.hideContextMenu();\n            };\n          }}\n        ></FileUploader>\n      );\n    } else {\n      return (\n        <MenuItem\n          key={`contextMenu-item-${index}`}\n          onClick={this.handleContextItemClicked(i)}\n        >\n          {i.label}\n        </MenuItem>\n      );\n    }\n  };\n\n  private handleMenuClosed = () => {\n    this.setState({\n      menuOpen: false,\n    });\n    this.props.hideContextMenu();\n  };\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    if (!!item.action) {\n      item.action();\n    }\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    if (!!item.action) {\n      if (!!this.nestedRef) {\n        this.nestedRef.blur();\n      }\n      this.props.hideContextMenu();\n    }\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { Vector2d } from \"konva/types/types\";\nimport { Group, Rect, Text } from \"react-konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { PlayerColor } from \"./constants/app-constants\";\n\ninterface IProps {\n  id: string;\n  pos: Vector2d;\n  value: number;\n  color: PlayerColor;\n  updateCounterValueBy: (amount: number) => void;\n  handleContextMenu: (event: KonvaEventObject<PointerEvent>) => void;\n  onDragEnd: (event: KonvaEventObject<DragEvent>) => void;\n}\n\nclass Counter extends Component<IProps> {\n  private touchTimer: any = null;\n\n  render() {\n    return (\n      <Group\n        x={this.props.pos.x}\n        y={this.props.pos.y}\n        draggable={true}\n        onClick={this.cancelBubble}\n        onContextMenu={this.props.handleContextMenu}\n        onDragEnd={this.props.onDragEnd}\n        onTouchStart={this.handleTouchStart}\n        onMouseDown={this.cancelBubble}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEnd}\n      >\n        <Rect\n          cornerRadius={30}\n          width={200}\n          height={100}\n          fill={this.props.color}\n        ></Rect>\n        <Text\n          width={200}\n          height={100}\n          fontSize={36}\n          text={`${this.props.value}`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n        ></Text>\n        <Text\n          x={10}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`-`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleDecrement}\n          onTap={this.handleDecrement}\n        ></Text>\n        <Text\n          x={140}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`+`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleIncrement}\n          onTap={this.handleIncrement}\n        ></Text>\n      </Group>\n    );\n  }\n\n  private cancelBubble = (event: KonvaEventObject<MouseEvent>) => {\n    event.cancelBubble = true;\n  };\n\n  private handleDecrement = () => {\n    this.props.updateCounterValueBy(-1);\n  };\n\n  private handleIncrement = () => {\n    this.props.updateCounterValueBy(1);\n  };\n\n  private handleTouchStart = (event: KonvaEventObject<TouchEvent>) => {\n    event.cancelBubble = true;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.props.handleContextMenu(\n        (event as unknown) as KonvaEventObject<PointerEvent>\n      );\n    }, 750);\n  };\n\n  private handleTouchMove = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleTouchEnd = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n}\n\nexport default Counter;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  inputValue: string = \"\";\n\n  private focusInputField = (input: any) => {\n    if (input) {\n      setTimeout(() => {\n        input.querySelector(\"input\").focus();\n      }, 100);\n    }\n  };\n\n  render() {\n    return (\n      <div\n        onClick={this.cancelBubble}\n        onKeyPress={this.cancelBubble}\n        className=\"token-field-row\"\n      >\n        <TextField\n          ref={this.focusInputField}\n          onKeyPress={this.handleKeyPress}\n          onClick={this.cancelBubble}\n          onChange={(event) => {\n            this.inputValue = event.target.value;\n          }}\n          type=\"number\"\n          variant=\"outlined\"\n        ></TextField>{\" \"}\n      </div>\n    );\n  }\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key.toLocaleLowerCase() === \"enter\") {\n      this.props.loadDeckId(+this.inputValue);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { GamePropertiesMap } from \"./constants/game-type-properties-mapping\";\nimport { GameType } from \"./constants/app-constants\";\ninterface IProps {\n  currentGameType: GameType;\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[][]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble} onKeyPress={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label={\n                GamePropertiesMap[this.props.currentGameType].encounterUiName\n              }\n              variant=\"outlined\"\n            />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      let questCards: string[] = [];\n      let encounterCards: string[] = [];\n      const filteredCards = value.cards\n        // We don't want cards that show up as another card's 'back_link' to be loaded as separate cards\n        .filter((c) => !value.cards.some((oc) => oc.backLink === c.code));\n\n      filteredCards\n        .filter((c) => c.typeCode.toLocaleLowerCase() === \"quest\")\n        .forEach((c) => {\n          questCards = questCards.concat(\n            Array.from({ length: c.quantity }).map((_i) => c.code)\n          );\n        });\n\n      filteredCards\n        .filter((c) => c.typeCode.toLocaleLowerCase() !== \"quest\")\n        .forEach((c) => {\n          encounterCards = encounterCards.concat(\n            Array.from({ length: c.quantity }).map((_i) => c.code)\n          );\n        });\n      let totalCards = [encounterCards];\n      if (questCards.length > 0) {\n        totalCards = [questCards].concat(totalCards);\n      }\n\n      this.props.loadCards(totalCards);\n    }\n  };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { connect } from \"react-redux\";\nimport { GameType } from \"./constants/app-constants\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport {\n  getCardsDataEncounterEntitiesBySetCode,\n  getCardsDataSetDataAsEncounterEntities,\n} from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\ninterface IProps {\n  currentGameType: GameType;\n}\n\nconst mapStateToProps = (state: RootState, ownProps: IProps) => {\n  return {\n    encounterData:\n      ownProps.currentGameType === GameType.LordOfTheRingsLivingCardGame\n        ? getCardsDataSetDataAsEncounterEntities(state)\n        : getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { Rect } from \"react-konva\";\nimport { Vector2d } from \"konva/types/types\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { GameType } from \"./constants/app-constants\";\n\ninterface IProps {\n  currentGameType: GameType;\n  pos: Vector2d;\n  updatePos: (newPos: Vector2d) => void;\n}\n\ninterface IState {\n  img: HTMLImageElement | null;\n}\n\nclass FirstPlayerToken extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      img: null,\n    };\n  }\n\n  public componentDidMount() {\n    const image = new Image();\n    image.onload = () => {\n      this.setState({\n        img: image,\n      });\n    };\n    image.src =\n      process.env.PUBLIC_URL +\n      \"/images/table/first_player_token_\" +\n      this.props.currentGameType +\n      \".png\";\n  }\n\n  render() {\n    return (\n      <Rect\n        x={this.props.pos.x}\n        y={this.props.pos.y}\n        draggable={true}\n        onTouchStart={this.cancelBubble}\n        onMouseDown={this.cancelBubble}\n        onDragEnd={this.handleDragEnd}\n        scale={{\n          x: 160 / (this.state.img?.naturalWidth ?? 1),\n          y: 160 / (this.state.img?.naturalWidth ?? 1),\n        }}\n        width={this.state.img?.naturalWidth ?? 0}\n        height={this.state.img?.naturalHeight ?? 0}\n        fillPatternImage={this.state.img ?? undefined}\n      ></Rect>\n    );\n  }\n\n  private cancelBubble = (\n    e: KonvaEventObject<MouseEvent> | KonvaEventObject<TouchEvent>\n  ) => {\n    e.cancelBubble = true;\n  };\n\n  private handleDragEnd = (event: KonvaEventObject<DragEvent>) => {\n    this.props.updatePos({\n      x: event.target.x(),\n      y: event.target.y(),\n    });\n  };\n}\n\nexport default FirstPlayerToken;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCounters = (state: RootState) =>\n  state.liveState.present.counters;\n\nexport const getCurrentCounters = createSelector(getCounters, (counters) => {\n  return counters.counters;\n});\n\nexport const getFirstPlayerTokenPos = createSelector(\n  getCounters,\n  (counters) => counters.firstPlayerCounterPosition\n);\n","import { connect } from \"react-redux\";\nimport FirstPlayerToken from \"./FirstPlayerToken\";\nimport { moveFirstPlayerCounter } from \"./features/counters/counters.slice\";\nimport { RootState } from \"./store/rootReducer\";\nimport { getFirstPlayerTokenPos } from \"./features/counters/counters.selectors\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    pos: getFirstPlayerTokenPos(state),\n  };\n};\n\nconst FirstPlayerTokenContainer = connect(mapStateToProps, {\n  updatePos: moveFirstPlayerCounter,\n})(FirstPlayerToken);\n\nexport default FirstPlayerTokenContainer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\ninterface IProps {\n  connect: (peerId: string) => void;\n}\n\nclass PeerConnector extends Component<IProps> {\n  public inputRef: HTMLInputElement | null = null;\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble} onKeyPress={this.cancelBubble}>\n        <input\n          ref={(ref) => {\n            if (!ref) return;\n            this.inputRef = ref;\n          }}\n        ></input>\n        <button onClick={this.connect}>Connect</button>\n      </div>\n    );\n  }\n\n  private connect = (_event: any) => {\n    console.log(\"connecting with peer id \" + this.inputRef?.value);\n\n    this.props.connect(this.inputRef?.value || \"\");\n  };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default PeerConnector;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport { CounterTokenType } from \"./constants/card-constants\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\ninterface IProps {\n  id: string;\n  tokenType: CounterTokenType;\n  updated: (payload: {\n    id: string;\n    tokenType: CounterTokenType;\n    value: number;\n  }) => void;\n}\n\nclass TokenValueModifier extends Component<IProps> {\n  inputValue: string = \"0\";\n\n  private focusInputField = (input: any) => {\n    if (input) {\n      setTimeout(() => {\n        input.querySelector(\"input\").focus();\n      }, 100);\n    }\n  };\n\n  render() {\n    return (\n      <div\n        onClick={this.cancelBubble}\n        onKeyPress={this.cancelBubble}\n        className=\"token-field-row\"\n      >\n        <TextField\n          ref={this.focusInputField}\n          onKeyPress={this.handleKeyPress}\n          variant=\"outlined\"\n          type=\"number\"\n          onChange={(event) => {\n            this.inputValue = event.target.value;\n          }}\n        ></TextField>\n        <Button\n          onClick={this.handleClick}\n          style={{ height: \"56px\", marginLeft: \"5px\" }}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          Set\n        </Button>\n      </div>\n    );\n  }\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const code = event.key.toLocaleLowerCase();\n    if (code === \"enter\") {\n      this.complete(+this.inputValue);\n    }\n  };\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    this.complete(+this.inputValue);\n  };\n\n  private complete = (newValue: number) => {\n    this.props.updated({\n      id: this.props.id,\n      tokenType: this.props.tokenType,\n      value: newValue,\n    });\n  };\n\n  // private preventDefault = (\n  //   event: React.MouseEvent<HTMLElement, MouseEvent>\n  // ) => {\n  //   event.preventDefault();\n  // };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default TokenValueModifier;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.handleClick}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    this.props.completed();\n  };\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import IconButton from \"@material-ui/core/IconButton\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TouchMenu.scss\";\n//Icons\nimport FlipIcon from \"@material-ui/icons/Flip\";\nimport OpenWithIcon from \"@material-ui/icons/OpenWith\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport { GameType } from \"./constants/app-constants\";\nimport {\n  GamePropertiesMap,\n  NumericTokenInfo,\n  TokenInfo,\n} from \"./constants/game-type-properties-mapping\";\nimport Button from \"@material-ui/core/Button\";\nimport { StatusTokenType } from \"./constants/card-constants\";\n\ninterface IProps {\n  currentGameType: GameType | null;\n  panMode: boolean;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  exhaustCard: (id?: string) => void;\n  toggleToken: (payload: {\n    id?: string;\n    tokenType: StatusTokenType;\n    value?: boolean;\n  }) => void;\n}\nclass TouchMenu extends Component<IProps> {\n  render() {\n    return (\n      <div className=\"touch-menu\">\n        <IconButton\n          className={this.props.panMode ? \"toggle-on\" : \"\"}\n          onClick={() => {\n            this.props.togglePanMode();\n          }}\n        >\n          <OpenWithIcon fontSize=\"large\" />\n        </IconButton>\n        <IconButton\n          onClick={() => {\n            this.props.flipCards();\n          }}\n        >\n          <FlipIcon fontSize=\"large\" />\n        </IconButton>\n        <IconButton\n          onClick={() => {\n            this.props.exhaustCard();\n          }}\n        >\n          <AutorenewIcon fontSize=\"large\" />\n        </IconButton>\n        {this.renderStatusCardButtons()}\n      </div>\n    );\n  }\n\n  private renderStatusCardButtons = () => {\n    if (!this.props.currentGameType) {\n      return null;\n    }\n    return Object.values(GamePropertiesMap[this.props.currentGameType].tokens)\n      .filter(\n        (tokenInfo): tokenInfo is TokenInfo | NumericTokenInfo => !!tokenInfo\n      )\n      .map((tokenInfo) => {\n        let action: () => void;\n        if ((tokenInfo as NumericTokenInfo).isNumeric) {\n          action = () => {};\n        } else {\n          action = () => {\n            this.props.toggleToken({\n              tokenType: (tokenInfo as TokenInfo).tokenType,\n            });\n          };\n        }\n\n        if (!!tokenInfo.touchMenuIcon) {\n          return (\n            <IconButton onClick={action}>{tokenInfo.touchMenuIcon}</IconButton>\n          );\n        } else if (!!tokenInfo.touchMenuLetter) {\n          return (\n            <Button onClick={action} className=\"text-button\">\n              {tokenInfo.touchMenuLetter}\n            </Button>\n          );\n        }\n        return null;\n      });\n  };\n}\n\nexport default TouchMenu;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"../cards/initialState\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n\nexport const getPlayerColors = createSelector(getGame, (game) => {\n  return game.playerColors;\n});\n\nexport const getPeerId = createSelector(getGame, (game) => game.peerId);\n\nexport const getActiveGameType = createSelector(\n  getGame,\n  (game) => game.activeGameType\n);\n\nexport const getMenuPreviewCard = createSelector(getGame, (game) => {\n  if (!game.menuPreviewCardJsonId) return null;\n\n  const menuPreviewCard: ICardStack = {\n    id: \"menu-preview-card\",\n    controlledBy: \"\",\n    exhausted: false,\n    faceup: true,\n    fill: \"gray\",\n    x: 0,\n    y: 0,\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n    counterTokens: {\n      damage: 0,\n      threat: 0,\n      generic: 0,\n    },\n    selected: false,\n    dragging: false,\n    shuffling: false,\n    cardStack: [{ jsonId: game.menuPreviewCardJsonId }],\n  };\n\n  return menuPreviewCard;\n});\n","import { connect } from \"react-redux\";\nimport TouchMenu from \"./TouchMenu\";\nimport { getPanMode } from \"./features/cards/cards.selectors\";\nimport {\n  exhaustCard,\n  flipCards,\n  togglePanMode,\n  toggleToken,\n} from \"./features/cards/cards.slice\";\nimport { RootState } from \"./store/rootReducer\";\nimport { getGame } from \"./features/game/game.selectors\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    currentGameType: getGame(state).activeGameType,\n    panMode: getPanMode(state),\n  };\n};\n\nconst TouchMenuContainer = connect(mapStateToProps, {\n  togglePanMode,\n  flipCards,\n  exhaustCard,\n  toggleToken,\n})(TouchMenu);\n\nexport default TouchMenuContainer;\n","import * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport { Provider, ReactReduxContext } from \"react-redux\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport CardStackCardSelectorContainer from \"./CardStackCardSelectorContainer\";\nimport {\n  GameType,\n  myPeerRef,\n  PlayerColor,\n  possibleColors,\n} from \"./constants/app-constants\";\nimport {\n  CounterTokenType,\n  StatusTokenType,\n  cardConstants,\n} from \"./constants/card-constants\";\nimport { MISSING_CARD_IMAGE_MAP } from \"./constants/card-missing-image-map\";\nimport { CARD_PACK_REMAPPING } from \"./constants/card-pack-mapping\";\nimport { GamePropertiesMap } from \"./constants/game-type-properties-mapping\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport Counter from \"./Counter\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { CardData } from \"./external-api/common-card-data\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { DrawCardsOutOfCardStackPayload } from \"./features/cards/cards.thunks\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { ICounter } from \"./features/counters/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport FirstPlayerTokenContainer from \"./FirstPlayerTokenContainer\";\nimport \"./Game.scss\";\nimport PeerConnector from \"./PeerConnector\";\nimport TokenValueModifier from \"./TokenValueModifier\";\nimport TopLayer from \"./TopLayer\";\nimport TouchMenuContainer from \"./TouchMenuContainer\";\nimport { getCenter, getDistance } from \"./utilities/geo\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  currentGameType: GameType;\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  panMode: boolean;\n  playerColors: { [key: string]: PlayerColor };\n  menuPreviewCard: ICardStack | null;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id?: string) => void;\n  selectCard: (payload: { id: string; unselectOtherCards: boolean }) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: (payload?: any) => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  setPreviewCardId: (id: string) => void;\n  clearPreviewCard: () => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  allJsonData: (payload: any) => void;\n  shuffleStack: (id?: string) => void;\n  fetchDecklistById: (payload: {\n    gameType: GameType;\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id?: string;\n    tokenType: StatusTokenType;\n    value?: boolean;\n  }) => void;\n  adjustCounterToken: (payload: {\n    id?: string;\n    tokenType: CounterTokenType;\n    delta?: number;\n    value?: number;\n  }) => void;\n  pullCardOutOfCardStack: (payload: {\n    cardStackId: string;\n    jsonId: string;\n    pos: Vector2d;\n  }) => void;\n  addNewCounter: (pos: Vector2d) => void;\n  updateCounterValue: (payload: { id: string; delta: number }) => void;\n  removeCounter: (id: string) => void;\n  moveCounter: (payload: { id: string; newPos: Vector2d }) => void;\n  connectToRemoteGame: (peerId: string) => void;\n  undo: () => void;\n  redo: () => void;\n  counters: ICounter[];\n  requestResync: () => void;\n  peerId: string;\n  dropTargetCardsById: {\n    [key: string]: { ownerRef: string; card: ICardStack | null };\n  };\n  drawCardsOutOfCardStack: (payload: DrawCardsOutOfCardStackPayload) => void;\n  quitGame: () => void;\n  updateCounterColor: (payload: { id: string; newColor: PlayerColor }) => void;\n  createDeckFromTxt: (payload: {\n    gameType: GameType;\n    position: Vector2d;\n    txtContents: string;\n  }) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n  showCardSearch: boolean;\n  cardSearchPosition: Vector2d | null;\n  cardStackForSearching: ICardStack | null;\n  showPeerConnector: boolean;\n  peerConnectorPosition: Vector2d | null;\n  showTokenValueModifier: boolean;\n  tokenValueModifierProps: { id: string; tokenType: CounterTokenType } | null;\n  tokenValueModifierPosition: Vector2d | null;\n  playmatImage: HTMLImageElement | null;\n  previewCardModal: boolean;\n}\nclass Game extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  private touchTimer: any = null;\n\n  private lastCenter: Vector2d | null = null;\n  private lastDist: number = 0;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (!!Konva) {\n      Konva.hitOnDragEnabled = true;\n    }\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n      showTokenValueModifier: false,\n      tokenValueModifierProps: null,\n      tokenValueModifierPosition: null,\n      playmatImage: null,\n      previewCardModal: false,\n    };\n  }\n\n  public componentDidMount() {\n    const image = new Image();\n    image.onload = () => {\n      this.setState({\n        playmatImage: image,\n      });\n    };\n    image.src =\n      process.env.PUBLIC_URL +\n      GamePropertiesMap[this.props.currentGameType].backgroundImageLocation;\n    this.props.loadCardsData();\n    this.props.allJsonData(\"\");\n  }\n\n  public render() {\n    // TODO: This feels like a bad hack. I bet all the\n    //       swallowing of click events is keeping\n    //       focus from behaving 'normally' and doing\n    //       the expected thing with focus. But there are\n    //       a lot of things that don't work quite right\n    //       if the body has focus, so we're going to\n    //       force the game area to have focus if it\n    //       lost it\n    if (document.activeElement === document.body) {\n      const el = document.querySelector(\".play-area\") as HTMLElement;\n      el?.focus();\n    }\n    // END HACK\n\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            currentGameType={this.props.currentGameType}\n            code={this.getCardCode(card)}\n            name={this.getCardName(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTargetColor={\n              this.props.playerColors[\n                this.props.dropTargetCardsById[card.id]?.ownerRef\n              ] ?? \"\"\n            }\n            dragging={card.dragging}\n            shuffling={card.shuffling}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleDoubleTap={this.showOrToggleModalPreviewCard}\n            handleClick={this.handleCardClick(card)}\n            handleHover={this.props.setPreviewCardId}\n            handleHoverLeave={this.props.clearPreviewCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          currentGameType={this.props.currentGameType}\n          name={this.getCardName(card)}\n          code={this.getCardCode(card)}\n          selectedColor={this.props.playerColors[card.controlledBy] ?? \"black\"}\n          controlledBy={card.controlledBy}\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          shuffling={false}\n          imgUrls={this.getImgUrls(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            currentGameType={this.props.currentGameType}\n            name={this.getCardName(card)}\n            code={this.getCardCode(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            shuffling={card.shuffling}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const iAmDragging = this.props.cards.cards.some(\n      (c) => c.dragging && c.controlledBy === myPeerRef\n    );\n\n    const possiblePreviewCards = !!this.props.menuPreviewCard\n      ? [this.props.menuPreviewCard]\n      : this.props.cards.cards.filter(\n          (card) =>\n            !!this.props.gameState.previewCard &&\n            card.id === this.props.gameState.previewCard.id\n        );\n\n    const previewCards = this.stage\n      ? possiblePreviewCards\n          .filter((_card) => !this.state.selecting && !iAmDragging)\n          .map((card) => {\n            const isHorizontal = HORIZONTAL_TYPE_CODES.includes(\n              this.getCardType(card)\n            );\n            const imgUrls = this.getImgUrls(card);\n            const rawPos = this.getRawPreviewCardPosition(isHorizontal);\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n\n            return imgUrls.some(\n              (url) => url.indexOf(\"card_back\") !== -1\n            ) ? null : (\n              <Card\n                currentGameType={this.props.currentGameType}\n                name={this.getCardName(card)}\n                code={this.getCardCode(card)}\n                selectedColor={\n                  this.props.playerColors[card.controlledBy] ?? \"black\"\n                }\n                controlledBy={card.controlledBy}\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={isHorizontal}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                shuffling={false}\n                imgUrls={imgUrls}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={\n                  cardConstants.CARD_PREVIEW_HEIGHT /\n                  this.props.gameState.stageZoom.y\n                }\n                width={\n                  cardConstants.CARD_PREVIEW_WIDTH /\n                  this.props.gameState.stageZoom.x\n                }\n              />\n            );\n          })\n          .filter((c): c is JSX.Element => c !== null)\n      : [];\n\n    return (\n      <div\n        className=\"play-area\"\n        tabIndex={1}\n        onKeyDown={this.handleKeyDown}\n        onKeyPress={this.handleKeyPress}\n      >\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderPreviewCardModal()}\n        {this.renderTouchMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        {this.renderCardSearch()}\n        {this.renderPeerConnector()}\n        {this.renderTokenModifier()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchStart={this.handleTouchStart}\n              onTouchMove={this.handleTouchMove}\n              onTouchEnd={this.handleTouchEnd}\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer>\n                  <Rect\n                    scale={{\n                      x: 2880 / (this.state.playmatImage?.naturalWidth ?? 1),\n                      y: 2880 / (this.state.playmatImage?.naturalWidth ?? 1),\n                    }}\n                    width={this.state.playmatImage?.naturalWidth ?? 0}\n                    height={this.state.playmatImage?.naturalHeight ?? 0}\n                    fillPatternImage={this.state.playmatImage ?? undefined}\n                  ></Rect>\n                </Layer>\n                <Layer>\n                  {this.props.counters.map((counter) => (\n                    <Counter\n                      key={`${counter.id}-counter`}\n                      id={counter.id}\n                      pos={counter.position}\n                      value={counter.value}\n                      color={counter.color}\n                      updateCounterValueBy={this.handleCounterValueUpdate(\n                        counter.id\n                      )}\n                      handleContextMenu={this.handleCounterContextMenu(\n                        counter.id\n                      )}\n                      onDragEnd={this.handleCounterDrag(counter.id)}\n                    ></Counter>\n                  ))}\n                </Layer>\n                <Layer preventDefault={true}>\n                  {ghostCards.concat(staticCards).concat(movingCards)}\n\n                  <FirstPlayerTokenContainer\n                    currentGameType={this.props.currentGameType}\n                  ></FirstPlayerTokenContainer>\n\n                  {previewCards}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"yellow\"\n                    strokeWidth={4}\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private handleCounterValueUpdate = (id: string) => (delta: number) => {\n    this.props.updateCounterValue({ id, delta });\n  };\n\n  private handleCounterDrag = (id: string) => (\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    this.props.moveCounter({\n      id,\n      newPos: {\n        x: event.target.x(),\n        y: event.target.y(),\n      },\n    });\n  };\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from{\" \"}\n        {GamePropertiesMap[this.props.currentGameType].deckSite}\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderPreviewCardModal = () => {\n    if (!this.state.previewCardModal) return null;\n    return (\n      <TopLayer\n        position={{ x: 0, y: 0 }}\n        completed={() => {\n          this.props.clearPreviewCard();\n          this.setState({\n            previewCardModal: false,\n          });\n        }}\n      ></TopLayer>\n    );\n  };\n\n  private renderTouchMenu = () => {\n    if (this.props.cards.cards.length === 0) return null;\n    return <TouchMenuContainer></TouchMenuContainer>;\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          currentGameType={this.props.currentGameType}\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderCardSearch = () => {\n    if (!this.state.showCardSearch) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.cardSearchPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing card search position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.cardStackForSearching ? (\n      <TopLayer position={pos} completed={this.clearCardSearch}>\n        <CardStackCardSelectorContainer\n          card={this.state.cardStackForSearching}\n          cardSelected={this.handleCardSelectedFromCardStack(\n            this.state.cardStackForSearching.id,\n            pos\n          )}\n        />\n      </TopLayer>\n    ) : null;\n  };\n\n  private renderPeerConnector = () => {\n    if (!this.state.showPeerConnector) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.peerConnectorPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing peer connector position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.showPeerConnector ? (\n      <TopLayer position={pos} completed={this.clearPeerConnector}>\n        <PeerConnector connect={this.handlePeerConnect}></PeerConnector>\n      </TopLayer>\n    ) : null;\n  };\n\n  private renderTokenModifier = () => {\n    if (!this.state.showTokenValueModifier) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.tokenValueModifierPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing token Modifier position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.showTokenValueModifier &&\n      !!this.state.tokenValueModifierProps ? (\n      <TopLayer position={pos} completed={this.clearTokenValueModifier}>\n        <TokenValueModifier\n          id={this.state.tokenValueModifierProps.id}\n          tokenType={this.state.tokenValueModifierProps.tokenType}\n          updated={(payload) => {\n            this.props.adjustCounterToken(payload);\n            this.clearTokenValueModifier();\n          }}\n        ></TokenValueModifier>\n      </TopLayer>\n    ) : null;\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[][]) => {\n    this.clearEncounterImporter();\n    cards.forEach((c, index) => {\n      this.props.addCardStack({\n        position: {\n          x: position.x + (cardConstants.CARD_WIDTH + 10) * index,\n          y: position.y,\n        },\n        cardJsonIds: c,\n      });\n    });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({\n      gameType: this.props.currentGameType,\n      decklistId: id,\n      position,\n    });\n  };\n\n  private handlePeerConnect = (peerId: string) => {\n    this.clearPeerConnector();\n    this.props.connectToRemoteGame(peerId);\n  };\n\n  private handleCardSelectedFromCardStack = (\n    cardStackId: string,\n    pos: Vector2d\n  ) => (jsonId: string) => {\n    this.clearCardSearch();\n    this.props.pullCardOutOfCardStack({ cardStackId, jsonId, pos });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearTokenValueModifier = () => {\n    this.setState({\n      showTokenValueModifier: false,\n      tokenValueModifierProps: null,\n      tokenValueModifierPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private clearCardSearch = () => {\n    this.setState({\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    });\n  };\n\n  private clearPeerConnector = () => {\n    this.setState({\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.state.showContextMenu) {\n      return;\n    }\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCounterContextMenu = (counterId: string) => (\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const counter = this.props.counters.find((c) => c.id === counterId);\n\n    const menuItems: ContextMenuItem[] = [\n      {\n        label: \"Remove\",\n        action: () => {\n          this.props.removeCounter(counterId);\n        },\n      },\n      {\n        label: \"Reset\",\n        action: () => {\n          this.props.updateCounterValue({\n            id: counterId,\n            delta: (counter?.value ?? 0) * -1,\n          });\n        },\n      },\n      {\n        label: \"Set Color\",\n        children: possibleColors.map((color) => {\n          return {\n            label: color,\n            action: () => {\n              this.props.updateCounterColor({ id: counterId, newColor: color });\n            },\n          };\n        }),\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // We want to unselect all the other cards if the card isn't actively selected\n    const cardStack = this.props.cards.cards.find((c) => c.id === cardId);\n\n    // Next, select the card that was right-clicked\n    this.props.selectCard({\n      id: cardId,\n      unselectOtherCards: !!cardStack ? !cardStack.selected : true,\n    });\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack();\n        },\n      });\n\n      menuItems.push({\n        label: \"Find Specific Card\",\n        action: () => {\n          if (!!card) {\n            this.setState({\n              showCardSearch: true,\n              cardSearchPosition: this.stage?.getPointerPosition() ?? null,\n              cardStackForSearching: card,\n            });\n          }\n        },\n      });\n    }\n\n    const tokenInfoForGameType =\n      GamePropertiesMap[this.props.currentGameType].tokens;\n\n    if (!!tokenInfoForGameType.stunned) {\n      menuItems.push({\n        label: !!currentStatusTokens.stunned\n          ? tokenInfoForGameType.stunned.menuRemoveText\n          : tokenInfoForGameType.stunned.menuText,\n        action: () => {\n          this.props.toggleToken({\n            id: card?.id || \"\",\n            tokenType: StatusTokenType.Stunned,\n            value: !currentStatusTokens.stunned,\n          });\n        },\n      });\n    }\n\n    if (!!tokenInfoForGameType.confused) {\n      menuItems.push({\n        label: !!currentStatusTokens.confused\n          ? tokenInfoForGameType.confused.menuRemoveText\n          : tokenInfoForGameType.confused.menuText,\n        action: () => {\n          this.props.toggleToken({\n            id: card?.id || \"\",\n            tokenType: StatusTokenType.Confused,\n            value: !currentStatusTokens.confused,\n          });\n        },\n      });\n    }\n\n    if (!!tokenInfoForGameType.tough) {\n      menuItems.push({\n        label: !!currentStatusTokens.tough\n          ? tokenInfoForGameType.tough.menuRemoveText\n          : tokenInfoForGameType.tough.menuText,\n        action: () => {\n          this.props.toggleToken({\n            id: card?.id || \"\",\n            tokenType: StatusTokenType.Tough,\n            value: !currentStatusTokens.tough,\n          });\n        },\n      });\n    }\n\n    if (!!tokenInfoForGameType.damage) {\n      menuItems.push({\n        label: tokenInfoForGameType.damage.menuText,\n        action: () => {\n          this.setState({\n            showContextMenu: false,\n            contextMenuItems: [],\n            contextMenuPosition: null,\n\n            showTokenValueModifier: true,\n            tokenValueModifierProps: {\n              id: card?.id || \"\",\n              tokenType: CounterTokenType.Damage,\n            },\n            tokenValueModifierPosition:\n              this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      });\n    }\n\n    if (!!tokenInfoForGameType.threat) {\n      menuItems.push({\n        label: tokenInfoForGameType.threat.menuText,\n        action: () => {\n          this.setState({\n            showContextMenu: false,\n            contextMenuItems: [],\n            contextMenuPosition: null,\n\n            showTokenValueModifier: true,\n            tokenValueModifierProps: {\n              id: card?.id || \"\",\n              tokenType: CounterTokenType.Threat,\n            },\n            tokenValueModifierPosition:\n              this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      });\n    }\n\n    if (!!tokenInfoForGameType.generic) {\n      menuItems.push({\n        label: tokenInfoForGameType.generic.menuText,\n        action: () => {\n          this.setState({\n            showContextMenu: false,\n            contextMenuItems: [],\n            contextMenuPosition: null,\n\n            showTokenValueModifier: true,\n            tokenValueModifierProps: {\n              id: card?.id || \"\",\n              tokenType: CounterTokenType.Generic,\n            },\n            tokenValueModifierPosition:\n              this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      });\n    }\n\n    menuItems.push({\n      label: \"Remove All Tokens\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          value: 0,\n        });\n\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          value: 0,\n        });\n\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          value: 0,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardClick = (card: ICardStack) => (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n\n    if (card.selected && modifierKeyHeld) {\n      this.props.toggleSelectCard(cardId);\n    } else {\n      this.props.selectCard({\n        id: cardId,\n        unselectOtherCards: !modifierKeyHeld,\n      });\n    }\n  };\n\n  private handleSelectAndExhaust = (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n    this.props.selectCard({ id: cardId, unselectOtherCards: !modifierKeyHeld });\n    this.props.exhaustCard(cardId);\n  };\n\n  private showOrToggleModalPreviewCard = (\n    cardId: string,\n    _event: KonvaEventObject<TouchEvent>\n  ) => {\n    if (\n      !!this.props.gameState.previewCard &&\n      this.props.gameState.previewCard.id === cardId\n    ) {\n      this.props.clearPreviewCard();\n    } else {\n      this.setState({\n        previewCardModal: true,\n      });\n      this.props.setPreviewCardId(cardId);\n    }\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter(\n        (c) => c.selected && c.controlledBy === myPeerRef\n      ).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x:\n            draggingCard.x +\n            (draggingCard.exhausted\n              ? cardConstants.CARD_HEIGHT\n              : cardConstants.CARD_WIDTH) /\n              2,\n          y:\n            draggingCard.y -\n            (draggingCard.exhausted\n              ? cardConstants.CARD_WIDTH\n              : cardConstants.CARD_HEIGHT) /\n              2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 50) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n    const modifier: boolean = event.ctrlKey || event.metaKey;\n    const code = event.key.toLocaleLowerCase();\n    const intCode = parseInt(code);\n    if (code === \"p\") {\n      this.props.togglePanMode();\n    } else if (code === \"f\") {\n      this.props.flipCards();\n    } else if (code === \"e\") {\n      this.props.exhaustCard();\n    } else if (code === \"s\") {\n      this.props.shuffleStack();\n    } else if (!Number.isNaN(intCode)) {\n      // if a ctrl / cmd key was held, we're\n      // adding tokens\n      if (modifier) {\n      } else {\n        // First, get the selected card stack\n        const mySelectedCards = this.props.cards.cards.filter(\n          (c) => c.selected && c.controlledBy === myPeerRef\n        );\n        if (mySelectedCards.length !== 1) {\n          console.log(\n            \"will not be drawing any cards because the number of selected stacks is \" +\n              mySelectedCards.length\n          );\n        } else {\n          this.props.drawCardsOutOfCardStack({\n            cardStackId: mySelectedCards[0].id,\n            numberToDraw: intCode,\n          });\n        }\n      }\n    }\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    const code = event.key.toLocaleLowerCase();\n    const intCode = parseInt(code);\n\n    if ((event.ctrlKey || event.metaKey) && !Number.isNaN(intCode)) {\n      const tokenInfoForGameType =\n        GamePropertiesMap[this.props.currentGameType].tokens;\n      switch (intCode) {\n        case 1:\n          if (!!tokenInfoForGameType.damage) {\n            this.props.adjustCounterToken({\n              tokenType: CounterTokenType.Damage,\n              delta: 1,\n            });\n          }\n          break;\n        case 2:\n          if (!!tokenInfoForGameType.threat) {\n            this.props.adjustCounterToken({\n              tokenType: CounterTokenType.Threat,\n              delta: 1,\n            });\n          }\n          break;\n\n        case 3:\n          if (!!tokenInfoForGameType.generic) {\n            this.props.adjustCounterToken({\n              tokenType: CounterTokenType.Generic,\n              delta: 1,\n            });\n          }\n          break;\n        case 4:\n          if (!!tokenInfoForGameType.damage) {\n            this.props.adjustCounterToken({\n              tokenType: CounterTokenType.Damage,\n              delta: -1,\n            });\n          }\n          break;\n        case 5:\n          if (!!tokenInfoForGameType.threat) {\n            this.props.adjustCounterToken({\n              tokenType: CounterTokenType.Threat,\n              delta: -1,\n            });\n          }\n          break;\n\n        case 6:\n          if (!!tokenInfoForGameType.generic) {\n            this.props.adjustCounterToken({\n              tokenType: CounterTokenType.Generic,\n              delta: -1,\n            });\n          }\n          break;\n      }\n      event.preventDefault();\n    }\n\n    if (\n      event.shiftKey &&\n      (event.ctrlKey || event.metaKey) &&\n      event.key === \"z\"\n    ) {\n      this.props.redo();\n    } else if ((event.ctrlKey || event.metaKey) && event.key === \"z\") {\n      event.preventDefault();\n      this.props.undo();\n    }\n  };\n\n  private getRawPreviewCardPosition = (horizontal: boolean): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    const screenMidPointY = window.innerHeight / 2;\n\n    const widthToUse = horizontal\n      ? cardConstants.CARD_PREVIEW_HEIGHT\n      : cardConstants.CARD_PREVIEW_WIDTH;\n    const heightToUse = horizontal\n      ? cardConstants.CARD_PREVIEW_WIDTH\n      : cardConstants.CARD_PREVIEW_HEIGHT;\n\n    if (this.state.previewCardModal) {\n      return {\n        x: screenMidPointX,\n        y: screenMidPointY,\n      };\n    }\n\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - widthToUse / 2,\n          y: heightToUse / 2,\n        }\n      : {\n          x: widthToUse / 2,\n          y: heightToUse / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (\n    event: KonvaEventObject<MouseEvent> | KonvaEventObject<TouchEvent>\n  ) => {\n    if (\n      (event.evt instanceof MouseEvent && event.evt.button === 0) ||\n      event.evt instanceof TouchEvent\n    ) {\n      // Only do something if it's the primary button (not a right-click)\n      const pos = this.getRelativePositionFromTarget(this.stage);\n\n      this.setState({\n        selectStartPos: {\n          x: pos.x,\n          y: pos.y,\n        },\n        selecting: true,\n      });\n    }\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleTouchStart = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.handleContextMenu(event);\n    }, 750);\n\n    if (!this.props.panMode) {\n      this.handleMouseDown(event);\n    }\n  };\n\n  private handleTouchMove = (e: any) => {\n    e.evt.preventDefault();\n\n    var touch1 = e.evt.touches[0];\n    var touch2 = e.evt.touches[1];\n\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    if (touch1 && touch2) {\n      this.handleMultiTouch(touch1, touch2);\n    } else {\n      this.handleMouseMove(e);\n    }\n  };\n\n  private handleMultiTouch = (touch1: any, touch2: any) => {\n    if (!this.stage) {\n      return;\n    }\n    // if the stage was under Konva's drag&drop\n    // we need to stop it, and implement our own pan logic with two pointers\n    if (this.stage.isDragging()) {\n      this.stage.stopDrag();\n    }\n\n    const p1 = {\n      x: touch1.clientX,\n      y: touch1.clientY,\n    };\n    const p2 = {\n      x: touch2.clientX,\n      y: touch2.clientY,\n    };\n\n    if (!this.lastCenter) {\n      this.lastCenter = getCenter(p1, p2);\n      return;\n    }\n    const newCenter = getCenter(p1, p2);\n\n    const dist = getDistance(p1, p2);\n\n    if (!this.lastDist) {\n      this.lastDist = dist;\n    }\n\n    // local coordinates of center point\n    const pointTo = {\n      x: (newCenter.x - this.stage.x()) / this.props.gameState.stageZoom.x,\n      y: (newCenter.y - this.stage.y()) / this.props.gameState.stageZoom.y,\n    };\n\n    const scale = this.props.gameState.stageZoom.x * (dist / this.lastDist);\n    this.props.updateZoom({ x: scale, y: scale });\n\n    // calculate new position of the stage\n    const dx = newCenter.x - this.lastCenter.x;\n    const dy = newCenter.y - this.lastCenter.y;\n\n    const newPos = {\n      x: newCenter.x - pointTo.x * scale + dx,\n      y: newCenter.y - pointTo.y * scale + dy,\n    };\n\n    this.props.updatePosition(newPos);\n\n    this.lastDist = dist;\n    this.lastCenter = newCenter;\n  };\n\n  private handleTouchEnd = (event: KonvaEventObject<TouchEvent>) => {\n    this.lastDist = 0;\n    this.lastCenter = null;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    if (!this.props.panMode) {\n      this.handleMouseUp();\n    }\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (\n    event: KonvaEventObject<PointerEvent> | KonvaEventObject<TouchEvent>\n  ): void => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Undo\",\n        action: this.props.undo,\n      },\n      {\n        label: \"Redo\",\n        action: this.props.redo,\n      },\n      {\n        label: \"Load Deck by ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Deck from txt file\",\n        fileLoadedAction: (txtContents: string) => {\n          this.props.createDeckFromTxt({\n            gameType: this.props.currentGameType,\n            position: this.stage?.getPointerPosition() ?? { x: 0, y: 0 },\n            txtContents,\n          });\n        },\n        fileUploader: true,\n      },\n      {\n        label: `Load ${\n          GamePropertiesMap[this.props.currentGameType].encounterUiName\n        }`,\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Create new counter\",\n        action: () => {\n          this.props.addNewCounter(\n            this.getRelativePositionFromTarget(this.stage) ?? { x: 0, y: 0 }\n          );\n        },\n      },\n      { label: \"Reset Game\", action: this.props.resetApp },\n      {\n        label: \"Quit Game\",\n        action: () => {\n          this.props.quitGame();\n          this.props.resetApp();\n        },\n      },\n      {\n        label: \"Connect to Remote Game\",\n        action: () => {\n          this.setState({\n            showPeerConnector: true,\n            peerConnectorPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Request resync from Remote Game\",\n        action: this.props.requestResync,\n      },\n      {\n        label: `Peer id is ${this.props.peerId}`,\n        action: () => {},\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return (cardData?.typeCode ?? \"\").toLocaleLowerCase();\n  };\n\n  private getCardName = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return this.props.cardsData[cardInQuestion.jsonId]?.name ?? \"\";\n  };\n\n  private getCardCode = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return (\n      this.props.cardsData[cardInQuestion.jsonId]?.code ??\n      `code missing for ${cardInQuestion.jsonId}`\n    );\n  };\n\n  private checkMissingImageMap(code: string): string | null {\n    return MISSING_CARD_IMAGE_MAP[code] ?? null;\n  }\n\n  private generateLCGCDNImageUrl(card: CardData, faceup: boolean): string {\n    if (!card) {\n      return `https://lcgcdn.s3.amazonaws.com/mc/NOPE.jpg`;\n    }\n\n    // get the first two digits\n    let codeToUse = card.code;\n\n    if (!faceup && !!card.backLink) {\n      codeToUse = card.backLink;\n    }\n\n    const groupCode =\n      CARD_PACK_REMAPPING[card.extraInfo.packCode ?? \"\"] ??\n      codeToUse.substring(0, 2);\n    let cardCode = codeToUse.substring(2);\n\n    //trim leading \"0\" chars\n    while (cardCode[0] === \"0\") {\n      cardCode = cardCode.substring(1);\n    }\n\n    cardCode = cardCode.toLocaleUpperCase();\n\n    let cardSuffix = \"\";\n\n    if (!!card.doubleSided) {\n      cardSuffix = faceup ? \"A\" : \"B\";\n    }\n\n    return `https://lcgcdn.s3.amazonaws.com/mc/MC${groupCode}en_${cardCode}${cardSuffix}.jpg`;\n  }\n\n  private getImgUrls = (card: ICardStack): string[] => {\n    if (Object.keys(this.props.cardsData).length === 0) return [];\n\n    let urls: string[] = [];\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    if (!topCardData) {\n      return [];\n    }\n\n    let cardData: CardData | null = topCardData;\n\n    if (!!cardData.images) {\n      if (!card.faceup) {\n        if (!cardData.images.back) {\n          return [\n            topCardData.extraInfo.factionCode === \"encounter\"\n              ? process.env.PUBLIC_URL +\n                \"/images/standard/encounter_card_back_\" +\n                this.props.currentGameType +\n                \".png\"\n              : process.env.PUBLIC_URL +\n                \"/images/standard/card_back_\" +\n                this.props.currentGameType +\n                \".png\",\n          ];\n        } else {\n          return [cardData.images.back];\n        }\n      } else {\n        return [cardData.images.front];\n      }\n    }\n\n    if (!card.faceup) {\n      if (!!topCardData.backLink || !!topCardData.doubleSided) {\n        urls = [\n          this.generateLCGCDNImageUrl(topCardData, card.faceup),\n          // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.png`,\n          // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.jpg`,\n          // process.env.PUBLIC_URL +\n          //   \"/images/cards/\" +\n          //   bottomCardData.octgn_id +\n          //   \".b.jpg\",\n        ];\n      } else {\n        cardData = null;\n        urls = [\n          topCardData.extraInfo.factionCode === \"encounter\"\n            ? process.env.PUBLIC_URL +\n              \"/images/standard/encounter_card_back_\" +\n              this.props.currentGameType +\n              \".png\"\n            : process.env.PUBLIC_URL +\n              \"/images/standard/card_back_\" +\n              this.props.currentGameType +\n              \".png\",\n        ];\n      }\n    } else {\n      urls = [\n        this.generateLCGCDNImageUrl(topCardData, card.faceup),\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.png`,\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.jpg`,\n        // process.env.PUBLIC_URL +\n        //   \"/images/cards/\" +\n        //   topCardData.octgn_id +\n        //   \".jpg\",\n      ];\n    }\n\n    let codeForMissingCheck = \"\";\n\n    if (!!cardData) {\n      if (card.faceup) {\n        codeForMissingCheck = cardData.code;\n      } else {\n        if (!!cardData.backLink) {\n          codeForMissingCheck = cardData.backLink;\n        } else if (cardData.doubleSided) {\n          codeForMissingCheck = `${cardData.code}_double_sided_back`;\n        }\n      }\n    }\n\n    const missingImageOverride = !!cardData\n      ? this.checkMissingImageMap(codeForMissingCheck)\n      : null;\n\n    if (!!missingImageOverride) {\n      urls.unshift(missingImageOverride);\n    }\n\n    return urls;\n  };\n}\n\nexport default Game;\n","export const packList = [\n\"ant.json\",\n\"ant_encounter.json\",\n\"bkw.json\",\n\"bkw_encounter.json\",\n\"cap.json\",\n\"cap_encounter.json\",\n\"core.json\",\n\"core_encounter.json\",\n\"drs.json\",\n\"drs_encounter.json\",\n\"gob_encounter.json\",\n\"hlk.json\",\n\"hlk_encounter.json\",\n\"msm.json\",\n\"msm_encounter.json\",\n\"qsv.json\",\n\"qsv_encounter.json\",\n\"ron_encounter.json\",\n\"scw.json\",\n\"scw_encounter.json\",\n\"thor.json\",\n\"thor_encounter.json\",\n\"toafk_encounter.json\",\n\"trors.json\",\n\"trors_encounter.json\",\n\"twc_encounter.json\",\n\"wsp.json\",\n\"wsp_encounter.json\",\n];","export const packList = [\n\"A Journey To Rhosgobel.json\",\n\"A Journey to Rhosgobel Nightmare.json\",\n\"A Knife in the Dark Nightmare.json\",\n\"A Shadow in the East.json\",\n\"A Shadow of the Past Nightmare.json\",\n\"A Storm on Cobas Haven Nightmare.json\",\n\"A Storm on Cobas Haven.json\",\n\"Across the Ettenmoors Nightmare.json\",\n\"Across the Ettenmoors.json\",\n\"Among the Outlaws.json\",\n\"Assault on Osgiliath Nightmare.json\",\n\"Assault on Osgiliath.json\",\n\"Attack on Dol Guldur.json\",\n\"Beneath the Sands.json\",\n\"Breaking of the Fellowship Nightmare.json\",\n\"Celebrimbor's Secret Nightmare.json\",\n\"Celebrimbor's Secret.json\",\n\"Challenge of the Wainriders.json\",\n\"Children of Eorl.json\",\n\"Conflict at the Carrock Nightmare.json\",\n\"Conflict at the Carrock.json\",\n\"Core Set.json\",\n\"Deadmen's Dike Nightmare.json\",\n\"Dungeons Deep and Caverns Dim Nightmare.json\",\n\"Encounter at Amon Dîn Nightmare.json\",\n\"Encounter at Amon Dîn.json\",\n\"Escape From Dol Guldur Nightmare.json\",\n\"Escape from Khazad-dûm.json\",\n\"Escape from Mount Gram Nightmare.json\",\n\"Escape from Mount Gram.json\",\n\"Fire in the Night.json\",\n\"First Age.json\",\n\"Flies and Spiders Nightmare.json\",\n\"Flight from Moria Nightmare.json\",\n\"Flight of the Stormcaller Nightmare.json\",\n\"Flight of the Stormcaller.json\",\n\"Flight to the Ford Nightmare.json\",\n\"Fog on the Barrow-downs.json\",\n\"Foundations of Stone Nightmare.json\",\n\"Foundations of Stone.json\",\n\"Heirs of Númenor.json\",\n\"Helm's Deep Nightmare.json\",\n\"Into Fangorn Nightmare.json\",\n\"Into Ithilien Nightmare.json\",\n\"Into the Pit Nightmare.json\",\n\"Intruders in Chetwood Nightmare.json\",\n\"Journey Along the Anduin Nightmare.json\",\n\"Journey in the Dark Nightmare.json\",\n\"Journey to the Cross-roads Nightmare.json\",\n\"Khazad-dûm.json\",\n\"Mount Gundabad.json\",\n\"Murder at the Prancing Pony.json\",\n\"Over the Misty Mountains Grim Nightmare.json\",\n\"Passage Through Mirkwood Nightmare.json\",\n\"Peril in Pelargir Nightmare.json\",\n\"Race Across Harad.json\",\n\"Raid on the Grey Havens Nightmare.json\",\n\"Return to Mirkwood Nightmare.json\",\n\"Return to Mirkwood.json\",\n\"Road to Rivendell Nightmare.json\",\n\"Road to Rivendell.json\",\n\"Roam Across Rhovanion.json\",\n\"Shadow and Flame Nightmare.json\",\n\"Shadow and Flame.json\",\n\"Shelob's Lair Nightmare.json\",\n\"Temple of the Deceived Nightmare.json\",\n\"Temple of the Deceived.json\",\n\"The Antlered Crown Nightmare.json\",\n\"The Antlered Crown.json\",\n\"The Battle of Carn Dûm Nightmare.json\",\n\"The Battle of Carn Dûm.json\",\n\"The Battle of Five Armies Nightmare.json\",\n\"The Battle of Lake-town.json\",\n\"The Betrayal of Mîm.json\",\n\"The Black Riders.json\",\n\"The Black Serpent.json\",\n\"The Blood of Gondor Nightmare.json\",\n\"The Blood of Gondor.json\",\n\"The City of Corsairs Nightmare.json\",\n\"The City of Corsairs.json\",\n\"The City of Ulfast.json\",\n\"The Crossings of Poros.json\",\n\"The Dead Marshes Nightmare.json\",\n\"The Dead Marshes.json\",\n\"The Dread Realm Nightmare.json\",\n\"The Dread Realm.json\",\n\"The Drowned Ruins Nightmare.json\",\n\"The Drowned Ruins.json\",\n\"The Drúadan Forest Nightmare.json\",\n\"The Drúadan Forest.json\",\n\"The Dungeons of Cirith Gurat.json\",\n\"The Dunland Trap Nightmare.json\",\n\"The Dunland Trap.json\",\n\"The Fall of Nargothrond.json\",\n\"The Fate of Númenor Nightmare.json\",\n\"The Fate of Wilderland.json\",\n\"The Flame of the West.json\",\n\"The Fords of Isen Nightmare.json\",\n\"The Fortress of Nurn.json\",\n\"The Ghost of Framsburg.json\",\n\"The Grey Havens.json\",\n\"The Hills of Emyn Muil Nightmare.json\",\n\"The Hills of Emyn Muil.json\",\n\"The Hobbit: On the Doorstep.json\",\n\"The Hobbit: Over Hill and Under Hill.json\",\n\"The Hunt for Gollum Nightmare.json\",\n\"The Hunt for Gollum.json\",\n\"The Hunt for the Dreadnaught.json\",\n\"The Land of Shadow.json\",\n\"The Land of Sorrow.json\",\n\"The Lonely Mountain Nightmare.json\",\n\"The Long Dark Nightmare.json\",\n\"The Long Dark.json\",\n\"The Lost Realm.json\",\n\"The Massing at Osgiliath.json\",\n\"The Mines of Moria.json\",\n\"The Morgul Vale Nightmare.json\",\n\"The Morgul Vale.json\",\n\"The Mountain of Fire.json\",\n\"The Mûmakil.json\",\n\"The Nîn-in-Eilph Nightmare.json\",\n\"The Nîn-in-Eilph.json\",\n\"The Old Forest.json\",\n\"The Passage of the Marshes Nightmare.json\",\n\"The Redhorn Gate Nightmare.json\",\n\"The Redhorn Gate.json\",\n\"The Ring Goes South Nightmare.json\",\n\"The Road Darkens.json\",\n\"The Road to Isengard Nightmare.json\",\n\"The Ruins of Belegost.json\",\n\"The Sands of Harad.json\",\n\"The Seventh Level Nightmare.json\",\n\"The Siege of Annúminas.json\",\n\"The Siege of Cair Andros Nightmare.json\",\n\"The Steward's Fear Nightmare.json\",\n\"The Steward's Fear.json\",\n\"The Stone of Erech.json\",\n\"The Thing in the Depths Nightmare.json\",\n\"The Thing in the Depths.json\",\n\"The Three Trials Nightmare.json\",\n\"The Three Trials.json\",\n\"The Treachery of Rhudaur Nightmare.json\",\n\"The Treachery of Rhudaur.json\",\n\"The Treason of Saruman.json\",\n\"The Uruk-hai Nightmare.json\",\n\"The Voice of Isengard.json\",\n\"The Wastes of Eriador Nightmare.json\",\n\"The Wastes of Eriador.json\",\n\"The Watcher in the Water Nightmare.json\",\n\"The Watcher in the Water.json\",\n\"The Weather Hills Nightmare.json\",\n\"The Wilds of Rhovanion.json\",\n\"The Withered Heath.json\",\n\"The Wizard's Quest.json\",\n\"The Woodland Realm.json\",\n\"To Catch an Orc Nightmare.json\",\n\"Trial Upon the Marches.json\",\n\"Trouble in Tharbad Nightmare.json\",\n\"Trouble in Tharbad.json\",\n\"Two-Player Limited Edition Starter.json\",\n\"Under the Ash Mountains.json\",\n\"Voyage Across Belegaer Nightmare.json\",\n\"We Must Away, Ere Break of Day Nightmare.json\",\n\"Wrath and Ruin.json\",\n];","import { Action, ThunkAction } from \"@reduxjs/toolkit\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { CardPack as CardPackMarvel } from \"../../external-api/marvel-card-data\";\nimport {\n  CardPack as CardPackLOTR,\n  Scenario,\n} from \"../../external-api/beorn-json-data\";\nimport { packList as marvelPackList } from \"../../generated/packsList\";\nimport { packList as lotrPackList } from \"../../generated/packsList_lotr\";\nimport scenarioListLOTR from \"../../external/ringsteki-json-data/scenarios.json\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  loadCardsDataForPack,\n  loadCardsForEncounterSet,\n} from \"./cards-data.slice\";\nimport { GameType } from \"../../constants/app-constants\";\n\nexport const allJsonData = (): ThunkAction<\n  void,\n  RootState,\n  unknown,\n  Action<string>\n> => async (dispatch) => {\n  let resultsList = await Promise.all(\n    marvelPackList.map((pack) => getSpecificMarvelPack(pack))\n  );\n\n  resultsList.forEach((result) => {\n    if (result.res.status === 200) {\n      dispatch(\n        loadCardsDataForPack({\n          packType: GameType.MarvelChampions,\n          pack: result.res.data as any,\n          pack_code: result.packCode,\n        })\n      );\n    } else {\n      console.error(\"Failed to load some json data\");\n    }\n  });\n\n  const resultsListLOTR = await Promise.all(\n    lotrPackList.map((pack) => getSpecificLOTRPack(pack))\n  );\n\n  resultsListLOTR.forEach((result) => {\n    if (result.res.status === 200) {\n      dispatch(\n        loadCardsDataForPack({\n          packType: GameType.LordOfTheRingsLivingCardGame,\n          pack: result.res.data as any,\n          pack_code: result.packCode,\n        })\n      );\n    } else {\n      console.error(\"Failed to load some json data\");\n    }\n  });\n\n  const resultsListLOTRScenarios = await Promise.all(\n    scenarioListLOTR.map((scenario) => getSpecificLOTRScenario(scenario.Title))\n  );\n\n  resultsListLOTRScenarios.forEach((result) => {\n    if (result.status === 200) {\n      dispatch(\n        loadCardsForEncounterSet({\n          setCode: result.data.Slug,\n          cards: result.data.AllCards,\n        })\n      );\n    } else {\n      console.error(\"Failed to load some json data\");\n    }\n  });\n};\n\nconst getSpecificMarvelPack = async (\n  packName: string\n): Promise<{ res: AxiosResponse<CardPackMarvel>; packCode: string }> => {\n  const response = await axios.get<CardPackMarvel>(\n    process.env.PUBLIC_URL + \"/json_data/\" + packName\n  );\n  return {\n    res: response,\n    packCode: packName.split(\".json\")[0],\n  };\n};\n\nconst getSpecificLOTRPack = async (\n  packName: string\n): Promise<{ res: AxiosResponse<CardPackLOTR>; packCode: string }> => {\n  const response = await axios.get<CardPackLOTR>(\n    process.env.PUBLIC_URL + \"/json_data/\" + packName\n  );\n  return {\n    res: response,\n    packCode: packName.split(\".json\")[0],\n  };\n};\n\nconst getSpecificLOTRScenario = async (\n  scenario: string\n): Promise<AxiosResponse<Scenario>> => {\n  const response = await axios.get<Scenario>(\n    process.env.PUBLIC_URL + \"/json_data/scenarios/\" + scenario + \".json\"\n  );\n  return response;\n};\n","import { connect } from \"react-redux\";\nimport { ActionCreators } from \"redux-undo\";\nimport Game from \"./Game\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport {\n  getCards,\n  getDropTargetCardsById,\n  getPanMode,\n} from \"./features/cards/cards.selectors\";\nimport {\n  adjustCounterToken,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  selectCard,\n  selectMultipleCards,\n  togglePanMode,\n  toggleSelectCard,\n  toggleToken,\n  unselectAllCards,\n  unselectCard,\n} from \"./features/cards/cards.slice\";\nimport {\n  addCardStack,\n  fetchDecklistById,\n  pullCardOutOfCardStack,\n  startCardMove,\n  shuffleStack,\n  drawCardsOutOfCardStack,\n  createDeckFromTxt,\n} from \"./features/cards/cards.thunks\";\nimport { allJsonData } from \"./features/cards-data/cards-data.thunks\";\nimport {\n  getGame,\n  getMenuPreviewCard,\n  getPeerId,\n  getPlayerColors,\n} from \"./features/game/game.selectors\";\nimport {\n  connectToRemoteGame,\n  updatePosition,\n  updateZoom,\n  requestResync,\n  setPreviewCardId,\n  clearPreviewCard,\n  quitGame,\n} from \"./features/game/game.slice\";\n\nimport {\n  moveCounter,\n  removeCounter,\n  updateCounterValue,\n  updateCounterColor,\n} from \"./features/counters/counters.slice\";\nimport { addNewCounter } from \"./features/counters/counters.thunks\";\nimport { resetApp } from \"./store/global.actions\";\nimport { RootState } from \"./store/rootReducer\";\nimport { getCurrentCounters } from \"./features/counters/counters.selectors\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    playerColors: getPlayerColors(state),\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n    counters: getCurrentCounters(state),\n    peerId: getPeerId(state),\n    dropTargetCardsById: getDropTargetCardsById(state),\n    menuPreviewCard: getMenuPreviewCard(state),\n  };\n};\n\nconst GameContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  allJsonData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n  connectToRemoteGame,\n  requestResync,\n  undo: ActionCreators.undo,\n  redo: ActionCreators.redo,\n  drawCardsOutOfCardStack,\n  setPreviewCardId,\n  clearPreviewCard,\n  quitGame,\n  updateCounterColor,\n  createDeckFromTxt,\n})(Game);\n\nexport default GameContainer;\n","import { Vector2d } from \"konva/types/types\";\nimport { Action } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { addNewCounterWithId } from \"./counters.actions\";\n\nexport const addNewCounter = (\n  pos: Vector2d\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    pos,\n    id: uuidv4(),\n  };\n  dispatch(addNewCounterWithId(payloadWithId));\n};\n","import { Vector2d } from \"konva/types/types\";\nimport { CardData } from \"../external-api/common-card-data\";\n\nexport const convertMarvelTxtToDeckInfo = (\n  heroDataByName: { [key: string]: CardData },\n  playerCardDataByName: { [key: string]: CardData },\n  position: Vector2d,\n  txtContents: string\n) => {\n  const nonEmptyLines = txtContents\n    .split(\"\\n\")\n    .map((l) => l.trim())\n    .filter((l) => !!l);\n\n  let heroName = \"\";\n  const packLineIndex = nonEmptyLines.findIndex((l) =>\n    l.toLocaleLowerCase().startsWith(\"pack\")\n  );\n  if (packLineIndex !== -1) {\n    heroName = nonEmptyLines[packLineIndex - 1];\n  }\n\n  const hero = heroDataByName[heroName];\n  if (!hero) {\n    throw new Error(`Could not find hero with name ${heroName}`);\n  }\n\n  // Mock out the slots\n  const pattern = /^\\dx/;\n  const slotLines = nonEmptyLines.filter((l) => l.match(pattern)?.index === 0);\n  let slots: { [key: string]: number } = {};\n\n  slotLines.forEach((sl) => {\n    // first character should be a number\n    const quantity = parseInt(sl[0]);\n    if (Number.isNaN(quantity)) {\n      throw new Error(\"Could not get number from txt file for card\");\n    }\n\n    const cardName = sl.split(pattern)[1].split(\"(\")[0].trim();\n    const card = playerCardDataByName[cardName];\n    slots[card.code] = quantity;\n  });\n\n  console.log(heroName);\n  return {\n    data: {\n      investigator_code: hero.code,\n      slots,\n    },\n  };\n};\n","import React from \"react\";\nimport { GameType } from \"./constants/app-constants\";\nimport GameContainer from \"./GameContainer\";\nimport \"./App.scss\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\ninterface IProps {\n  activeGameType: GameType | null;\n  updateActiveGameType: (val: GameType) => void;\n}\n\nconst App = (props: IProps) => {\n  return !!props.activeGameType ? (\n    <GameContainer currentGameType={props.activeGameType}></GameContainer>\n  ) : (\n    renderGamePicker(props)\n  );\n};\n\nconst camelCaseToSpaces = (str: string) => {\n  // insert a space before all caps\n  return (\n    str\n      .replace(/([A-Z])/g, \" $1\")\n      // uppercase the first character\n      .replace(/^./, (s) => {\n        return s.toUpperCase();\n      })\n  );\n};\n\nconst renderGamePicker = (props: IProps) => {\n  return (\n    <div className=\"game-picker\">\n      <h1>Card Game Playground</h1>\n      <FormControl className=\"select\">\n        <InputLabel id=\"game-picker-label\">Select Game</InputLabel>\n        <Select\n          id=\"game-picker\"\n          labelId=\"game-picker-label\"\n          onChange={(e) => {\n            props.updateActiveGameType(e.target.value as GameType);\n          }}\n        >\n          {Object.entries(GameType).map(([key, value]) => {\n            const label = camelCaseToSpaces(key);\n            return <MenuItem value={value}>{label}</MenuItem>;\n          })}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\nimport { getActiveGameType } from \"./features/game/game.selectors\";\nimport { updateActiveGameType } from \"./features/game/game.slice\";\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    activeGameType: getActiveGameType(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  updateActiveGameType,\n})(App);\n\nexport default AppContainer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\nimport AppContainer from \"./AppContainer\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}