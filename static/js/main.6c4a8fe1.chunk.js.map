{"version":3,"sources":["../node_modules/peerjs/dist sync","constants/card-constants.ts","CardTokens.tsx","features/cards/cards.selectors.ts","CardTokensContainer.tsx","constants/app-constants.ts","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/cards/cards.actions.ts","constants/card-pack-mapping.ts","features/cards/cards.thunks.ts","store/global.actions.ts","TopLayer.tsx","CardStackCardSelector.tsx","CardStackCardSelectorContainer.tsx","Counter.tsx","PeerConnector.tsx","constants/card-missing-image-map.ts","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","features/counters/counters.actions.ts","features/counters/initialState.ts","features/counters/counters.slice.ts","features/counters/counters.selectors.ts","AppContainer.tsx","features/counters/counters.thunks.ts","serviceWorker.ts","store/rootReducer.ts","store/peer-js-redux-middleware.ts","store/configureStore.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","cardConstants","CardTokens","props","damageImg","threatImg","genericImg","unmounted","state","imagesLoaded","damage","threat","generic","Image","onload","setState","card","counterTokens","src","process","prevProps","prevState","this","damageX","x","naturalWidth","damageY","y","showDamage","damageToken","width","height","naturalHeight","fillPatternImage","damageText","text","fill","align","verticalAlign","fontSize","threatX","threatY","showThreat","threatToken","threatText","genericX","genericY","showGeneric","Component","getCards","liveState","present","cards","getCardMapById","createSelector","reduce","map","shouldShowPreview","previewCard","every","dragging","getPanMode","panMode","getDropTargetCardsById","returnVal","Object","entries","dropTargetCards","forEach","key","value","ownerRef","CardTokensContainer","connect","myPeerRef","uuidv4","HORIZONTAL_TYPE_CODES","stringArraysEqual","array1","array2","length","index","Card","imgs","stunnedImg","confusedImg","toughImg","touchTimer","initCardImages","imgUrls","img","imageLoaded","onerror","imageLoadFailed","imgUrl","renderUnanimatedCard","heightToUse","widthToUse","imgToUse","find","i","complete","undefined","scale","getScale","offset","native","rotation","exhausted","cornerRadius","stroke","dropTargetColor","strokeWidth","fillPatternRotation","shouldRenderImageHorizontal","typeCode","fillPatternScaleX","fillPatternScaleY","shadowColor","controlledBy","selectedColor","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","handleTouchStart","onTouchMove","handleTouchMove","onTouchEnd","handleTouchEnd","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","cardStackOffset","cardStack","numCardsInStack","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","stunnedToken","getTokenInSlot","confusedToken","confused","toughToken","tough","cardTokens","renderCardName","event","dx","target","dy","cancelBubble","clearTimeout","setTimeout","handleHover","handleHoverLeave","prevImgUrls","renderCard","cardWidth","cardHeight","textOffset","name","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","some","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","Menu","keepMounted","open","onClose","anchorReference","anchorPosition","top","position","left","MenuItem","label","DeckLoader","stopPropagation","handleKeyDown","loadDeckId","currentTarget","onKeyDown","EncounterLoader","handleSelected","_event","encounterCards","c","concat","Array","from","quantity","_i","loadCards","onKeyPress","Autocomplete","options","encounterData","getOptionLabel","option","setData","style","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","values","encounterCard","setCode","set_code","push","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","getCenter","p1","p2","loadState","serializedState","localStorage","getItem","baseState","JSON","parse","err","console","error","localStorageState","StatusTokenType","CounterTokenType","initialState","ghostCards","addCardStackWithId","createAction","pullCardOutOfCardStackWithId","drawCardsOutOfCardStackWithIds","startCardMoveWithSplitStackId","replaceCardStack","CARD_PACK_REMAPPING","bkw","cap","drs","hlk","trors","twc","EXTRA_CARDS","doctor_strange","jsonId","ant","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSet","data","investigator_code","heroSetCode","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeckData","heroEncounterDeck","cd","extraCards","heroId","dataId","extraHeroCards","relatedEncounterDeck","encounterDeckId","relatedObligationDeck","obligationDeckId","shuffle","array","temporaryValue","randomIndex","returnArray","stringify","currentIndex","floor","random","resetApp","receiveRemoteGameState","getCardStackWithId","mutateCardWithId","ref","callback","cardToUpdate","unselectAllCardsReducer","ACTOR_REF","cardsSlice","createSlice","reducers","selectCard","unselectOtherCards","unselectCard","toggleSelectCard","exhaustCard","cardMove","movedCards","primaryCard","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCard","selectMultipleCards","ids","unselectAllCards","hoverCard","hoverLeaveCard","togglePanMode","flipCards","faceup","reverse","resetCards","toggleToken","cardToToggle","statusTokens","tokenType","adjustCounterToken","delta","extraReducers","builder","addCase","cardToReplaceStack","newStack","cardJsonIds","cardStackToUse","cardStackId","newCardStack","newCard","assign","cardToStartMoving","splitTopCard","cardToMove","topCard","shift","splitCardId","actorRef","foreachSelectedAndControlledCard","numberToDraw","idsToUse","sourceCardStackId","topCardDetails","fulfilled","log","heroCard","mainDeckStack","slots","cardDetails","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","completed","containerStyle","className","children","CardStackCardSelector","cardsDataInStack","cardSelected","cardsDataEntities","CardStackCardSelectorContainer","Counter","handleDecrement","updateCounterValueBy","handleIncrement","pos","PeerConnector","inputRef","MISSING_CARD_IMAGE_MAP","App","stage","lastCenter","lastDist","handleCounterValueUpdate","updateCounterValue","handleCounterDrag","moveCounter","newPos","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","handleLoadEncounter","renderCardSearch","showCardSearch","cardSearchPosition","cardStackForSearching","clearCardSearch","handleCardSelectedFromCardStack","renderPeerConnector","showPeerConnector","peerConnectorPosition","clearPeerConnector","handlePeerConnect","addCardStack","peerId","connectToRemoteGame","pullCardOutOfCardStack","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","updatePosition","handleCounterContextMenu","counterId","menuItems","removeCounter","handleCardContextMenu","cardId","currentStatusTokens","shuffleStack","Stunned","Confused","Tough","Damage","Threat","Generic","handleCardClick","modifierKeyHeld","shiftKey","metaKey","ctrlKey","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","startCardMove","handleKeyPress","toLocaleLowerCase","intCode","parseInt","Number","isNaN","mySelectedCards","drawCardsOutOfCardStack","redo","undo","getRawPreviewCardPosition","horizontal","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","button","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","touch1","touches","touch2","handleMultiTouch","handleMouseMove","isDragging","stopDrag","clientX","clientY","newCenter","dist","pointTo","addNewCounter","requestResync","getCardType","getCardName","cardInQuestion","getCardCode","getImgUrls","urls","topCardData","cardData","back_link","double_sided","generateLCGCDNImageUrl","faction_code","missingImageOverride","checkMissingImageMap","unshift","Konva","hitOnDragEnabled","loadCardsData","staticCards","playerColors","dropTargetCardsById","tokens","movingCards","previewCards","showPreview","isHorizontal","rawPos","previewPos","url","tabIndex","Consumer","store","stagePosition","innerHeight","onMouseUp","onMouseMove","onWheel","counters","counter","codeToUse","groupCode","pack_code","substring","cardCode","toLocaleUpperCase","cardSuffix","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","SetData","card_set_type_code","getGame","game","getPlayerColors","getPeerId","gameSlice","setPlayerColor","color","setPeerId","addNewCounterWithId","countersSlice","getCurrentCounters","AppContainer","dispatch","payloadWithId","stackToShuffle","shuffledStack","ActionCreators","possibleIds","payloadWithIds","Boolean","location","hostname","match","undoableState","combineReducers","rootReducer","undoable","limit","groupBy","groupByActionTypes","excludeAction","blacklistRemoteActions","setupConnection","conn","storeAPI","on","INITIAL_STATE_MSG","RESYNC","send","REMOTE_ACTION","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","activeCon","cgpPeer","Peer","debug","setPlayerColorAction","metadata","peerConnection","onconnectionstatechange","ev","connectionState","next","rtkConfigureStore","reducer","middleware","devTools","subscribe","throttle","blacklistStateKeys","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6c4a8fe1.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 255;","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect, Text } from \"react-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\ninterface IProps {\n  x: number;\n  y: number;\n  card: ICardStack;\n}\n\ninterface IState {\n  imagesLoaded: {\n    damage: boolean;\n    threat: boolean;\n    generic: boolean;\n  };\n}\n\nclass CardTokens extends Component<IProps, IState> {\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imagesLoaded: {\n        damage: false,\n        threat: false,\n        generic: false,\n      },\n    };\n\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // DAMAGE\n    this.damageImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: true,\n            threat: this.state.imagesLoaded.threat,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.damage) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    this.threatImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: true,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.threat) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // GENERIC\n    this.genericImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: this.state.imagesLoaded.threat,\n            generic: true,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.generic) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.damage &&\n      !prevProps.card?.counterTokens.damage &&\n      !!this.props.card?.counterTokens.damage\n    ) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    if (\n      !this.state.imagesLoaded.threat &&\n      !prevProps.card?.counterTokens.threat &&\n      !!this.props.card?.counterTokens.threat\n    ) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.generic &&\n      !prevProps.card?.counterTokens.generic &&\n      !!this.props.card?.counterTokens.generic\n    ) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    const damageX = this.props.x - this.damageImg.naturalWidth / 2;\n    const damageY = this.props.y - cardConstants.CARD_HEIGHT / 2 + 20;\n    const showDamage =\n      this.state.imagesLoaded.damage && !!this.props.card.counterTokens.damage;\n\n    const damageToken = showDamage ? (\n      <Rect\n        key={`${this.props.card.id}-damageToken`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        fillPatternImage={this.damageImg}\n      ></Rect>\n    ) : null;\n\n    const damageText = showDamage ? (\n      <Text\n        key={`${this.props.card.id}-damageText`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        text={`${this.props.card.counterTokens.damage}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const threatX = this.props.x - this.threatImg.naturalWidth / 2;\n    const threatY = damageY + this.damageImg.naturalHeight + 5;\n    const showThreat =\n      this.state.imagesLoaded.threat && !!this.props.card.counterTokens.threat;\n\n    const threatToken = showThreat ? (\n      <Rect\n        key={`${this.props.card.id}-threatToken`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        fillPatternImage={this.threatImg}\n      ></Rect>\n    ) : null;\n\n    const threatText = showThreat ? (\n      <Text\n        key={`${this.props.card.id}-threatText`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        text={`${this.props.card.counterTokens.threat}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const genericX = this.props.x - this.threatImg.naturalWidth / 2;\n    const genericY = threatY + this.threatImg.naturalHeight + 5;\n    const showGeneric =\n      this.state.imagesLoaded.generic &&\n      !!this.props.card.counterTokens.generic;\n\n    const genericToken = showGeneric ? (\n      <Rect\n        key={`${this.props.card.id}-genericToken`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        fillPatternImage={this.genericImg}\n      ></Rect>\n    ) : null;\n\n    const genericText = showGeneric ? (\n      <Text\n        key={`${this.props.card.id}-genericText`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        text={`${this.props.card.counterTokens.generic}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    return [\n      damageToken,\n      damageText,\n      threatToken,\n      threatText,\n      genericToken,\n      genericText,\n    ];\n  }\n}\n\nexport default CardTokens;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.liveState.present.cards;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) =>\n  state.liveState.present.cards.panMode;\n\nexport const getDropTargetCardsById = createSelector(getCards, (cards) => {\n  const returnVal: {\n    [key: string]: { ownerRef: string; card: ICardStack | null };\n  } = {};\n  Object.entries(cards.dropTargetCards).forEach(([key, value]) => {\n    if (!!value) {\n      returnVal[value.id] = { ownerRef: key, card: value };\n    }\n  });\n\n  return returnVal;\n});\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const myPeerRef = uuidv4();\n\nexport type PlayerColor =\n  | \"red\"\n  | \"cyan\"\n  | \"green\"\n  | \"blue\"\n  | \"magnenta\"\n  | \"yellow\";\n\nexport const possibleColors: PlayerColor[] = [\n  \"red\",\n  \"cyan\",\n  \"green\",\n  \"blue\",\n  \"magnenta\",\n  \"yellow\",\n];\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect, Text } from \"react-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { myPeerRef, PlayerColor } from \"./constants/app-constants\";\nimport { cardConstants } from \"./constants/card-constants\";\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  name: string;\n  code: string;\n  selectedColor: PlayerColor;\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDoubleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTargetColor?: string;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrls: string[];\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  imageLoadFailed: number;\n  prevImgUrls: string[];\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nconst stringArraysEqual = (array1: string[], array2: string[]) => {\n  return (\n    array1.length === array2.length &&\n    array1.every((value, index) => {\n      return value === array2[index];\n    })\n  );\n};\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (!stringArraysEqual(props.imgUrls, state.prevImgUrls ?? [])) {\n      return {\n        imageLoaded: false,\n        imageLoadFailed: 0,\n        prevImgUrls: props.imgUrls,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private imgs: HTMLImageElement[] = [];\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private unmounted: boolean;\n  private touchTimer: any = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      imageLoadFailed: 0,\n      prevImgUrls: this.props.imgUrls,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.initCardImages(props);\n\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      !stringArraysEqual(prevProps.imgUrls, this.props.imgUrls)\n    ) {\n      this.setState({\n        imageLoaded: false,\n        imageLoadFailed: 0,\n      });\n      this.initCardImages(this.props);\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  private initCardImages = (props: IProps) => {\n    this.imgs = props.imgUrls.map(() => new Image());\n\n    // When the image loads, set a flag in the state\n    this.imgs.forEach(\n      (img) =>\n        (img.onload = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoaded: true,\n            });\n          }\n        })\n    );\n\n    this.imgs.forEach(\n      (img) =>\n        (img.onerror = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoadFailed: this.state.imageLoadFailed + 1,\n            });\n          }\n        })\n    );\n\n    props.imgUrls.forEach((imgUrl, index) => (this.imgs[index].src = imgUrl));\n  };\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.renderCard(this.state.imageLoaded);\n  }\n\n  private renderCard(imageLoaded: boolean) {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderUnanimatedCard(heightToUse, widthToUse, imageLoaded);\n  }\n\n  private renderUnanimatedCard = (\n    heightToUse: number,\n    widthToUse: number,\n    imageLoaded: boolean\n  ) => {\n    const imgToUse = imageLoaded\n      ? this.imgs.find((i) => i.complete && i.naturalHeight !== 0)\n      : undefined;\n\n    const scale = this.getScale(imgToUse, widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTargetColor ?? \"\"}\n        strokeWidth={!!this.props.dropTargetColor ? 2 : 0}\n        fillPatternRotation={\n          !imageLoaded ||\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={imgToUse}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        fill={imageLoaded ? undefined : \"gray\"}\n        shadowColor={\n          !!this.props.controlledBy ? this.props.selectedColor : \"black\"\n        }\n        shadowBlur={this.props.dragging ? 20 : this.props.selected ? 10 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={\n          this.props.controlledBy === \"\" ||\n          this.props.controlledBy === myPeerRef\n        }\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEnd}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens =\n      this.props.dragging || this.props.isGhost ? null : (\n        <CardTokensContainer\n          key={`${this.props.id}-cardTokens`}\n          id={this.props.id}\n          x={this.props.x}\n          y={this.props.y}\n        ></CardTokensContainer>\n      );\n\n    const noImageCardNameText = this.renderCardName(\n      offset,\n      widthToUse,\n      heightToUse\n    );\n\n    return [\n      cardStack,\n      card,\n      noImageCardNameText,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private renderCardName(\n    offset: Vector2d,\n    cardWidth: number,\n    cardHeight: number\n  ) {\n    const textOffset = { x: offset.x - 10, y: offset.y - 20 };\n    const textItem =\n      this.state.imageLoadFailed === this.props.imgUrls.length ? (\n        <Text\n          key={`${this.props.id}-cardnametext`}\n          offset={textOffset}\n          x={this.props.x}\n          y={this.props.y}\n          width={cardWidth - 10}\n          height={cardHeight - 20}\n          fontSize={24}\n          text={`${this.props.name} ${this.props.code}`}\n          draggable={\n            this.props.controlledBy === \"\" ||\n            this.props.controlledBy === myPeerRef\n          }\n          onDragStart={this.handleDragStart}\n          onDragMove={this.handleDragMove}\n          onDragEnd={this.handleDragEnd}\n          onDblClick={this.handleDoubleClick}\n          onDblTap={this.handleDoubleClick}\n          onClick={this.handleClick}\n          onTap={this.handleClick}\n          onMouseDown={this.handleMouseDown}\n          onTouchStart={this.handleMouseDown}\n          onMouseOver={this.handleMouseOver}\n          onMouseOut={this.handleMouseOut}\n          onContextMenu={this.handleContextMenu}\n        ></Text>\n      ) : null;\n\n    return textItem;\n  }\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrls.some((i) => i.includes(\"standard\")) &&\n      this.props.imgUrls.some((i) => i.includes(\"_back\"))\n    );\n  }\n\n  private getScale(\n    img: HTMLImageElement | undefined,\n    widthToUse: number,\n    heightToUse: number\n  ) {\n    const width = !!img ? widthToUse / img.naturalWidth : widthToUse;\n\n    const widthHorizontal = !!img ? heightToUse / img.naturalWidth : widthToUse;\n\n    const height = !!img ? heightToUse / img.naturalHeight : heightToUse;\n\n    const heightHorizontal = !!img\n      ? widthToUse / img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id, event);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id, event);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleTouchStart = (event: KonvaEventObject<TouchEvent>) => {\n    event.cancelBubble = true;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.handleContextMenu(\n        (event as unknown) as KonvaEventObject<PointerEvent>\n      );\n    }, 750);\n  };\n\n  private handleTouchMove = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleTouchEnd = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <Menu\n          keepMounted\n          open={true}\n          onClose={this.props.hideContextMenu}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{\n            top: this.props.position.y + 8,\n            left: this.props.position.x + 8,\n          }}\n        >\n          {this.props.items.map((i, index) => (\n            <MenuItem\n              key={`contextMenu-item-${index}`}\n              onClick={this.handleContextItemClicked(i)}\n            >\n              {i.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble} onKeyPress={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      let encounterCards: string[] = [];\n      value.cards.forEach((c) => {\n        encounterCards = encounterCards.concat(\n          Array.from({ length: c.quantity }).map((_i) => c.code)\n        );\n      });\n      this.props.loadCards(encounterCards);\n    }\n  };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n\nexport const getCenter = (p1: Vector2d, p2: Vector2d) => {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    const baseState = JSON.parse(serializedState || \"{}\");\n\n    return baseState.present ?? baseState;\n  } catch (err) {\n    console.error(\"problem parsing\");\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n    console.error(\"Error writing state to local storage\");\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { CounterTokenType, StatusTokenType } from \"./cards.slice\";\n\nexport interface ICardStack {\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n  counterTokens: {\n    [K in CounterTokenType]: number;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCards: { [key: string]: ICardStack | null };\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"liveState\")?.cards ?? {};\n\n// Make sure initially, none of the cards are \"owned\" / \"selected\"\nif (!!localStorageState.cards) {\n  localStorageState.cards.forEach((c) => {\n    c.controlledBy = \"\";\n    c.selected = false;\n  });\n}\n\nconst defaultState: ICardsState = {\n  cards: [],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCards: {},\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { fetchDecklistById } from \"./cards.thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport {\n  addCardStackWithId,\n  drawCardsOutOfCardStackWithIds,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\nexport enum CounterTokenType {\n  Damage = \"damage\",\n  Threat = \"threat\",\n  Generic = \"generic\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  ref: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (\n    cardToUpdate &&\n    (cardToUpdate.controlledBy === \"\" || cardToUpdate.controlledBy === ref)\n  ) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedAndControlledCard = (\n  state: ICardsState,\n  actorRef: string,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => card.selected && card.controlledBy === actorRef)\n    .forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; unselectOtherCards: boolean }>\n> = (state, action) => {\n  if (action.payload.unselectOtherCards) {\n    unselectAllCardsReducer(state, action);\n  }\n\n  mutateCardWithId(\n    state,\n    action.payload.id,\n    (action as any).ACTOR_REF,\n    (card) => {\n      card.selected = true;\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  );\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = false;\n    card.controlledBy = \"\";\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = !card.selected;\n    if (!card.selected) {\n      card.controlledBy = \"\";\n    } else {\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === (action as any).ACTOR_REF &&\n        (card.id === action.payload || card.selected)\n    )\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack | null = null;\n\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload.id ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one. But only if the card is owned / controlled by us\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  if (\n    !!primaryCard &&\n    (primaryCard as ICardStack).controlledBy === (action as any).ACTOR_REF\n  ) {\n    foreachUnselectedCard(state, (card) => {\n      const distance = getDistance(\n        { x: card.x, y: card.y },\n        !!primaryCard ? { x: primaryCard.x, y: primaryCard.y } : { x: 0, y: 0 }\n      );\n      if (distance < CARD_DROP_TARGET_DISTANCE) {\n        possibleDropTargets.push({\n          distance,\n          card,\n        });\n      }\n    });\n  }\n\n  state.dropTargetCards[(action as any).ACTOR_REF] =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCards[(action as any).ACTOR_REF]) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCards[(action as any).ACTOR_REF]) {\n    state.cards = state.cards.filter(\n      (card) =>\n        !(\n          card.id === action.payload ||\n          (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n        )\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCards[(action as any).ACTOR_REF]?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCards[(action as any).ACTOR_REF] = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (\n        card &&\n        (card.controlledBy === \"\" ||\n          card.controlledBy === (action as any).ACTOR_REF)\n      ) {\n        card.selected = true;\n        card.controlledBy = (action as any).ACTOR_REF;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState, PayloadAction<any>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === \"\" ||\n        card.controlledBy === (action as any).ACTOR_REF\n    )\n    .forEach((card) => {\n      card.selected = false;\n      card.controlledBy = \"\";\n    });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.selected &&\n        (card.controlledBy === \"\" ||\n          card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n\nconst adjustCounterTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: CounterTokenType; delta: number }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.counterTokens[action.payload.tokenType] +=\n      action.payload.delta;\n    if (cardToToggle.counterTokens[action.payload.tokenType] < 0) {\n      cardToToggle.counterTokens[action.payload.tokenType] = 0;\n    }\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    resetCards: resetCardsReducer,\n    toggleToken: toggleTokenReducer,\n    adjustCounterToken: adjustCounterTokenReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.cards = action.payload.liveState.present.cards.cards;\n      state.ghostCards = action.payload.liveState.present.cards.ghostCards;\n    });\n\n    builder.addCase(replaceCardStack, (state, action) => {\n      const cardToReplaceStack = state.cards.find(\n        (c) => c.id === action.payload.id\n      );\n      if (!!cardToReplaceStack) {\n        cardToReplaceStack.cardStack = action.payload.newStack;\n      }\n    });\n\n    builder.addCase(resetApp, (state) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCards = {};\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(addCardStackWithId, (state, action) => {\n      const newStack: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.id,\n        cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(newStack);\n    });\n\n    builder.addCase(pullCardOutOfCardStackWithId, (state, action) => {\n      const cardStackToUse = state.cards.find(\n        (c) => c.id === action.payload.cardStackId\n      );\n      if (!!cardStackToUse && cardStackToUse.cardStack.length > 1) {\n        const newCardStack: ICardDetails[] = [\n          { jsonId: action.payload.jsonId },\n        ];\n        const newCard = Object.assign({}, cardStackToUse, {\n          cardStack: newCardStack,\n        });\n        newCard.id = action.payload.id;\n        newCard.selected = true;\n        newCard.controlledBy = (action as any).ACTOR_REF;\n        newCard.x = newCard.x + cardConstants.CARD_WIDTH + 5;\n\n        cardStackToUse.cardStack = cardStackToUse.cardStack.filter(\n          (c) => c.jsonId !== action.payload.jsonId\n        );\n        cardStackToUse.selected = false;\n        cardStackToUse.controlledBy = \"\";\n\n        state.cards.push(newCard);\n      }\n    });\n\n    builder.addCase(startCardMoveWithSplitStackId, (state, action) => {\n      // first, if the card moving isn't currently selected, clear all _our_ selected cards\n      const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n      if (cardToStartMoving && !cardToStartMoving.selected) {\n        state.cards = state.cards.map((card) => {\n          if (\n            card.controlledBy === \"\" ||\n            card.controlledBy === (action as any).ACTOR_REF\n          ) {\n            card.selected = card.id === action.payload.id;\n            if (card.selected) {\n              card.controlledBy = (action as any).ACTOR_REF;\n            } else {\n              card.controlledBy = \"\";\n            }\n          }\n          return card;\n        });\n      }\n\n      // If we are splitting, make a new stack of cards\n      if (action.payload.splitTopCard) {\n        const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n        if (!cardToMove) {\n          throw new Error(\"Expected to find card\");\n        }\n\n        cardToMove.selected = false;\n        cardToMove.controlledBy = \"\";\n\n        const topCard = cardToMove.cardStack.shift();\n        const newCard = Object.assign({}, cardToMove, {\n          selected: true,\n          controlledBy: (action as any).ACTOR_REF,\n          dragging: true,\n          cardStack: [topCard],\n        });\n\n        cardToMove.id = action.payload.splitCardId;\n\n        state.cards.push(newCard);\n      }\n\n      // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n      state.ghostCards = [];\n\n      if (!action.payload.splitTopCard) {\n        foreachSelectedAndControlledCard(\n          state,\n          (action as any).ACTOR_REF,\n          (card) => {\n            card.dragging = true;\n            state.ghostCards.push(Object.assign({}, card));\n          }\n        );\n      }\n\n      //Finally, if we have a preview card, clear it\n      state.previewCard = null;\n    });\n\n    builder.addCase(drawCardsOutOfCardStackWithIds, (state, action) => {\n      if (action.payload.numberToDraw !== action.payload.idsToUse.length) {\n        throw new Error(\"Did not receive the expected number of ids\");\n      }\n\n      // First, unselect everything else of ours\n      unselectAllCardsReducer(state, (action as unknown) as any);\n\n      // Get the cardstack in question\n      let cardStackToUse = state.cards.find(\n        (c) => c.id === action.payload.cardStackId\n      );\n\n      if (!cardStackToUse) {\n        throw new Error(\n          `Couldn't find card stack with id ${action.payload.cardStackId}`\n        );\n      }\n\n      const sourceCardStackId = cardStackToUse.id;\n\n      //Next, for each card we should draw, remove it from the stack and make a new stack, which should be selected\n      for (let index = 0; index < action.payload.numberToDraw; index++) {\n        if (!!cardStackToUse) {\n          const topCardDetails = cardStackToUse.cardStack.shift();\n          if (!topCardDetails) {\n            throw new Error(\"Expected to find a top card, but didn't\");\n          }\n          const newCardStack: ICardDetails[] = [\n            { jsonId: topCardDetails.jsonId },\n          ];\n          const newCard = Object.assign({}, cardStackToUse, {\n            cardStack: newCardStack,\n          });\n          newCard.id = action.payload.idsToUse[index];\n          newCard.selected = true;\n          newCard.controlledBy = (action as any).ACTOR_REF;\n          newCard.faceup = true;\n          newCard.x = newCard.x + (cardConstants.CARD_WIDTH + 5) * (index + 1);\n          newCard.y += cardConstants.CARD_HEIGHT;\n\n          if (cardStackToUse.cardStack.length === 0) {\n            // we went through all the cards, remove the original card\n            state.cards = state.cards.filter((c) => c.id !== sourceCardStackId);\n            cardStackToUse = undefined;\n          }\n\n          state.cards.push(newCard);\n        }\n      }\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.heroId,\n        cardStack: [\n          { jsonId: action.payload.data.investigator_code },\n          ...action.payload.extraHeroCards,\n        ],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.dataId,\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.encounterDeckId,\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.obligationDeckId,\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  resetCards,\n  toggleToken,\n  adjustCounterToken,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { ICardDetails } from \"./initialState\";\n\nexport interface AddCardStackWithIdPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n  id: string;\n}\n\nexport interface PullCardOutOfCardStackWithIdPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n  id: string;\n}\n\nexport interface StartCardMoveWithSplitStackIdPayload {\n  id: string;\n  splitTopCard: boolean;\n  splitCardId: string;\n}\n\nexport interface DrawCardsOutOfCardStackWithIdsPayload {\n  cardStackId: string;\n  numberToDraw: number;\n  idsToUse: string[];\n}\n\nexport interface ReplaceCardStackPayload {\n  id: string;\n  newStack: ICardDetails[];\n}\n\nexport const addCardStackWithId = createAction<AddCardStackWithIdPayload>(\n  \"addCardStackWithId\"\n);\n\nexport const pullCardOutOfCardStackWithId = createAction<PullCardOutOfCardStackWithIdPayload>(\n  \"pullCardOutOfCardStackWithId\"\n);\n\nexport const drawCardsOutOfCardStackWithIds = createAction<DrawCardsOutOfCardStackWithIdsPayload>(\n  \"drawCardsOutOfCardStackWithIds\"\n);\n\nexport const startCardMoveWithSplitStackId = createAction<StartCardMoveWithSplitStackIdPayload>(\n  \"startCardMoveWithSplitStackId\"\n);\n\nexport const replaceCardStack = createAction<ReplaceCardStackPayload>(\n  \"replaceCardStack\"\n);\n","import { ICardDetails } from \"../features/cards/initialState\";\n\n// For some reason, the codes from marvelcdb and the images from cardgamedb can be off\nexport const CARD_PACK_REMAPPING: { [key: string]: string } = {\n  bkw: \"07\",\n  cap: \"04\",\n  drs: \"08\",\n  hlk: \"09\",\n  trors: \"10\",\n  twc: \"03\",\n};\n\n// export const EXTRA_CARDS: { [key: string]: { [key: string]: number } } = {\n//   doctor_strange: {\n//     \"09032\": 1,\n//     \"09033\": 1,\n//     \"09034\": 1,\n//     \"09035\": 1,\n//     \"09036\": 1,\n//   },\n//   ant: {\n//     \"12001c\": 1,\n//   },\n// };\n\nexport const EXTRA_CARDS: { [key: string]: ICardDetails[] } = {\n  doctor_strange: [\n    { jsonId: \"09032\" },\n    { jsonId: \"09033\" },\n    { jsonId: \"09034\" },\n    { jsonId: \"09035\" },\n    { jsonId: \"09036\" },\n  ],\n  ant: [{ jsonId: \"12001c\" }],\n};\n","import { Action, createAsyncThunk, ThunkAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  addCardStackWithId,\n  drawCardsOutOfCardStackWithIds,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\nimport { ICardDetails } from \"./initialState\";\nimport { getCards } from \"./cards.selectors\";\nimport { EXTRA_CARDS } from \"../../constants/card-pack-mapping\";\n\ninterface AddCardStackPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n}\n\nexport interface PullCardOutOfCardStackPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n}\n\nexport interface StartCardMovePayload {\n  id: string;\n  splitTopCard: boolean;\n}\n\nexport interface DrawCardsOutOfCardStackPayload {\n  cardStackId: string;\n  numberToDraw: number;\n}\n\nexport const shuffleStack = (\n  id: string\n): ThunkAction<void, RootState, unknown, Action<string>> => (\n  dispatch,\n  getState\n) => {\n  const cardsState = getCards(getState());\n  const stackToShuffle = cardsState.cards.find((c) => c.id === id);\n  if (!!stackToShuffle) {\n    const shuffledStack = shuffle(stackToShuffle.cardStack);\n    dispatch(replaceCardStack({ id, newStack: shuffledStack }));\n  }\n};\n\nexport const addCardStack = (\n  payload: AddCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(addCardStackWithId(payloadWithId));\n};\n\nexport const pullCardOutOfCardStack = (\n  payload: PullCardOutOfCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(pullCardOutOfCardStackWithId(payloadWithId));\n};\n\nexport const startCardMove = (\n  payload: StartCardMovePayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    splitCardId: uuidv4(),\n  };\n  dispatch(startCardMoveWithSplitStackId(payloadWithId));\n};\n\nexport const drawCardsOutOfCardStack = (\n  payload: DrawCardsOutOfCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const possibleIds = Array.from({ length: payload.numberToDraw }).map((_i) =>\n    uuidv4()\n  );\n  const payloadWithIds = {\n    ...payload,\n    idsToUse: possibleIds,\n  };\n  dispatch(drawCardsOutOfCardStackWithIds(payloadWithIds));\n};\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSet = heroCardsData[response.data.investigator_code];\n    const heroSetCode = heroSet.set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          (value.set_code === `${heroSetCode}` ||\n            value.set_code === `${heroSetCode}_nemesis`) &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    // get the encounter cards for this deck\n    const heroEncounterDeckData = Object.values(encounterCardsData).filter(\n      (value) =>\n        value.set_code === `${heroSetCode}_nemesis` &&\n        value.type_code !== \"obligation\"\n    );\n\n    let heroEncounterDeck: string[] = [];\n    heroEncounterDeckData.forEach((cd) => {\n      heroEncounterDeck = heroEncounterDeck.concat(\n        Array.from({ length: cd.quantity }).map((_i) => cd.code)\n      );\n    });\n\n    // check to see if there are any special extra cards for this hero\n    const extraCards = EXTRA_CARDS[heroSetCode ?? \"\"] ?? [];\n\n    // response.data.slots = { ...extraCards, ...response.data.slots };\n\n    return {\n      position: payload.position,\n      heroId: uuidv4(),\n      data: response.data,\n      dataId: uuidv4(),\n      extraHeroCards: extraCards,\n      relatedEncounterDeck: heroEncounterDeck,\n      encounterDeckId: uuidv4(),\n      relatedObligationDeck: heroObligationDeck,\n      obligationDeckId: uuidv4(),\n    };\n  }\n);\n\nconst shuffle = (array: ICardDetails[]): ICardDetails[] => {\n  const returnArray = JSON.parse(JSON.stringify(array));\n  var currentIndex = returnArray.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = returnArray[currentIndex];\n    returnArray[currentIndex] = returnArray[randomIndex];\n    returnArray[randomIndex] = temporaryValue;\n  }\n\n  return returnArray;\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"./rootReducer\";\n\nexport const resetApp = createAction(\"resetAction\");\n\nexport const receiveRemoteGameState = createAction<RootState>(\n  \"receiveRemoteGameState\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.handleClick}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    this.props.completed();\n  };\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { ICardStack } from \"./features/cards/initialState\";\ninterface IProps {\n  cardsDataEntities: ICardData;\n  card: ICardStack;\n  cardSelected: (jsonId: string) => void;\n}\n\nclass CardStackCardSelector extends Component<IProps> {\n  private cardsDataInStack: CardData[] = [];\n\n  constructor(props: IProps) {\n    super(props);\n    this.cardsDataInStack = props.card.cardStack.map((c) => {\n      return this.props.cardsDataEntities[c.jsonId];\n    });\n  }\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble} onKeyPress={this.cancelBubble}>\n        <Autocomplete\n          id=\"cardstack-card-selector-combobox\"\n          options={this.cardsDataInStack}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Find Card...\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: CardData | null) => {\n    if (!!value && !!this.props.cardSelected) {\n      this.props.cardSelected(value.code);\n    }\n  };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default CardStackCardSelector;\n","import { connect } from \"react-redux\";\nimport CardStackCardSelector from \"./CardStackCardSelector\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cardsDataEntities: getCardsDataEntities(state),\n  };\n};\n\nconst CardStackCardSelectorContainer = connect(\n  mapStateToProps,\n  {}\n)(CardStackCardSelector);\n\nexport default CardStackCardSelectorContainer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { Vector2d } from \"konva/types/types\";\nimport { Group, Rect, Text } from \"react-konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\n\ninterface IProps {\n  id: string;\n  pos: Vector2d;\n  value: number;\n  updateCounterValueBy: (amount: number) => void;\n  handleContextMenu: (event: KonvaEventObject<PointerEvent>) => void;\n  onDragEnd: (event: KonvaEventObject<DragEvent>) => void;\n}\n\nclass Counter extends Component<IProps> {\n  private touchTimer: any = null;\n\n  render() {\n    return (\n      <Group\n        x={this.props.pos.x}\n        y={this.props.pos.y}\n        draggable={true}\n        onContextMenu={this.props.handleContextMenu}\n        onDragEnd={this.props.onDragEnd}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEnd}\n      >\n        <Rect cornerRadius={30} width={200} height={100} fill={\"red\"}></Rect>\n        <Text\n          width={200}\n          height={100}\n          fontSize={36}\n          text={`${this.props.value}`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n        ></Text>\n        <Text\n          x={10}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`-`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleDecrement}\n          onTap={this.handleDecrement}\n        ></Text>\n        <Text\n          x={140}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`+`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleIncrement}\n          onTap={this.handleIncrement}\n        ></Text>\n      </Group>\n    );\n  }\n\n  private handleDecrement = () => {\n    this.props.updateCounterValueBy(-1);\n  };\n\n  private handleIncrement = () => {\n    this.props.updateCounterValueBy(1);\n  };\n\n  private handleTouchStart = (event: KonvaEventObject<TouchEvent>) => {\n    event.cancelBubble = true;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.props.handleContextMenu(\n        (event as unknown) as KonvaEventObject<PointerEvent>\n      );\n    }, 750);\n  };\n\n  private handleTouchMove = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleTouchEnd = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n}\n\nexport default Counter;\n","import { Component } from \"react\";\nimport * as React from \"react\";\ninterface IProps {\n  connect: (peerId: string) => void;\n}\n\nclass PeerConnector extends Component<IProps> {\n  public inputRef: HTMLInputElement | null = null;\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble} onKeyPress={this.cancelBubble}>\n        <input\n          ref={(ref) => {\n            if (!ref) return;\n            this.inputRef = ref;\n          }}\n        ></input>\n        <button onClick={this.connect}>Connect</button>\n      </div>\n    );\n  }\n\n  private connect = (_event: any) => {\n    console.log(\"connecting with peer id \" + this.inputRef?.value);\n\n    this.props.connect(this.inputRef?.value || \"\");\n  };\n\n  private cancelBubble = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n  };\n}\n\nexport default PeerConnector;\n","export const MISSING_CARD_IMAGE_MAP: { [key: string]: string } = {\n  \"02001a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"8665869b-fae4-494e-91d1-1e8c308220c2\" +\n    \".jpg\",\n\n  \"02001b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"8665869b-fae4-494e-91d1-1e8c308220c2\" +\n    \".b.jpg\",\n\n  \"02002a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"cfd051be-4ade-4cf8-b575-4b673cfa9a92\" +\n    \".jpg\",\n\n  \"02002b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"cfd051be-4ade-4cf8-b575-4b673cfa9a92\" +\n    \".b.jpg\",\n\n  \"02003a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b16187a4-3f29-4a4b-8b66-6e8c7524c402\" +\n    \".jpg\",\n\n  \"02003b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b16187a4-3f29-4a4b-8b66-6e8c7524c402\" +\n    \".b.jpg\",\n\n  \"02004\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b35084d9-3a2b-418c-b1a4-e4929de16a2c\" +\n    \".jpg\",\n\n  \"02005\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"1eae757a-25b2-4b29-a8e7-f43b12c531b0\" +\n    \".jpg\",\n\n  \"02006a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"0a59161d-7db6-4328-9eeb-1906ce8715a5\" +\n    \".jpg\",\n\n  \"02006b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"0a59161d-7db6-4328-9eeb-1906ce8715a5\" +\n    \".b.jpg\",\n  \"14001a\": process.env.PUBLIC_URL + \"/images/missing/qsv.a.jpg\",\n  \"14001b\": process.env.PUBLIC_URL + \"/images/missing/qsv.b.jpg\",\n};\n","import { ReactReduxContext, Provider } from \"react-redux\";\nimport * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport {\n  CounterTokenType,\n  StatusTokenType,\n} from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getCenter, getDistance } from \"./utilities/geo\";\nimport CardStackCardSelectorContainer from \"./CardStackCardSelectorContainer\";\nimport Counter from \"./Counter\";\nimport PeerConnector from \"./PeerConnector\";\nimport { myPeerRef, PlayerColor } from \"./constants/app-constants\";\nimport { ICounter } from \"./features/counters/initialState\";\nimport { MISSING_CARD_IMAGE_MAP } from \"./constants/card-missing-image-map\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { CARD_PACK_REMAPPING } from \"./constants/card-pack-mapping\";\nimport { DrawCardsOutOfCardStackPayload } from \"./features/cards/cards.thunks\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  playerColors: { [key: string]: PlayerColor };\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (payload: { id: string; unselectOtherCards: boolean }) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: (payload?: any) => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n  adjustCounterToken: (payload: {\n    id: string;\n    tokenType: CounterTokenType;\n    delta: number;\n  }) => void;\n  pullCardOutOfCardStack: (payload: {\n    cardStackId: string;\n    jsonId: string;\n    pos: Vector2d;\n  }) => void;\n  addNewCounter: (pos: Vector2d) => void;\n  updateCounterValue: (payload: { id: string; delta: number }) => void;\n  removeCounter: (id: string) => void;\n  moveCounter: (payload: { id: string; newPos: Vector2d }) => void;\n  connectToRemoteGame: (peerId: string) => void;\n  undo: () => void;\n  redo: () => void;\n  counters: ICounter[];\n  requestResync: () => void;\n  peerId: string;\n  dropTargetCardsById: {\n    [key: string]: { ownerRef: string; card: ICardStack | null };\n  };\n  drawCardsOutOfCardStack: (payload: DrawCardsOutOfCardStackPayload) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n  showCardSearch: boolean;\n  cardSearchPosition: Vector2d | null;\n  cardStackForSearching: ICardStack | null;\n  showPeerConnector: boolean;\n  peerConnectorPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  private touchTimer: any = null;\n\n  private lastCenter: Vector2d | null = null;\n  private lastDist: number = 0;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (!!Konva) {\n      Konva.hitOnDragEnabled = true;\n    }\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            code={this.getCardCode(card)}\n            name={this.getCardName(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTargetColor={\n              this.props.playerColors[\n                this.props.dropTargetCardsById[card.id]?.ownerRef\n              ] ?? \"\"\n            }\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.handleCardClick(card)}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          name={this.getCardName(card)}\n          code={this.getCardCode(card)}\n          selectedColor={this.props.playerColors[card.controlledBy] ?? \"black\"}\n          controlledBy={card.controlledBy}\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrls={this.getImgUrls(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            name={this.getCardName(card)}\n            code={this.getCardCode(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const isHorizontal = HORIZONTAL_TYPE_CODES.includes(\n              this.getCardType(card)\n            );\n            const imgUrls = this.getImgUrls(card);\n            const rawPos = this.getRawPreviewCardPosition(isHorizontal);\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n\n            return imgUrls.some(\n              (url) => url.indexOf(\"card_back\") !== -1\n            ) ? null : (\n              <Card\n                name={this.getCardName(card)}\n                code={this.getCardCode(card)}\n                selectedColor={\n                  this.props.playerColors[card.controlledBy] ?? \"black\"\n                }\n                controlledBy={card.controlledBy}\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={isHorizontal}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrls={imgUrls}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={\n                  cardConstants.CARD_PREVIEW_HEIGHT /\n                  this.props.gameState.stageZoom.y\n                }\n                width={\n                  cardConstants.CARD_PREVIEW_WIDTH /\n                  this.props.gameState.stageZoom.x\n                }\n              />\n            );\n          })\n          .filter((c): c is JSX.Element => c !== null)\n      : [];\n\n    return (\n      <div\n        className=\"play-area\"\n        tabIndex={1}\n        onKeyDown={this.handleKeyDown}\n        onKeyPress={this.handleKeyPress}\n      >\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        {this.renderCardSearch()}\n        {this.renderPeerConnector()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchStart={this.handleTouchStart}\n              onTouchMove={this.handleTouchMove}\n              onTouchEnd={this.handleTouchEnd}\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer>\n                  {this.props.counters.map((counter) => (\n                    <Counter\n                      key={`${counter.id}-counter`}\n                      id={counter.id}\n                      pos={counter.position}\n                      value={counter.value}\n                      updateCounterValueBy={this.handleCounterValueUpdate(\n                        counter.id\n                      )}\n                      handleContextMenu={this.handleCounterContextMenu(\n                        counter.id\n                      )}\n                      onDragEnd={this.handleCounterDrag(counter.id)}\n                    ></Counter>\n                  ))}\n                </Layer>\n                <Layer preventDefault={true}>\n                  {staticCards\n                    .concat(ghostCards)\n                    .concat(movingCards)\n                    .concat(previewCards)}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"black\"\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private handleCounterValueUpdate = (id: string) => (delta: number) => {\n    this.props.updateCounterValue({ id, delta });\n  };\n\n  private handleCounterDrag = (id: string) => (\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    this.props.moveCounter({\n      id,\n      newPos: {\n        x: event.target.x(),\n        y: event.target.y(),\n      },\n    });\n  };\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderCardSearch = () => {\n    if (!this.state.showCardSearch) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.cardSearchPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing card search position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.cardStackForSearching ? (\n      <TopLayer position={pos} completed={this.clearCardSearch}>\n        <CardStackCardSelectorContainer\n          card={this.state.cardStackForSearching}\n          cardSelected={this.handleCardSelectedFromCardStack(\n            this.state.cardStackForSearching.id,\n            pos\n          )}\n        />\n      </TopLayer>\n    ) : null;\n  };\n\n  private renderPeerConnector = () => {\n    if (!this.state.showPeerConnector) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.peerConnectorPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing peer connector position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.showPeerConnector ? (\n      <TopLayer position={pos} completed={this.clearPeerConnector}>\n        <PeerConnector connect={this.handlePeerConnect}></PeerConnector>\n      </TopLayer>\n    ) : null;\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private handlePeerConnect = (peerId: string) => {\n    this.clearPeerConnector();\n    this.props.connectToRemoteGame(peerId);\n  };\n\n  private handleCardSelectedFromCardStack = (\n    cardStackId: string,\n    pos: Vector2d\n  ) => (jsonId: string) => {\n    this.clearCardSearch();\n    this.props.pullCardOutOfCardStack({ cardStackId, jsonId, pos });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private clearCardSearch = () => {\n    this.setState({\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    });\n  };\n\n  private clearPeerConnector = () => {\n    this.setState({\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.state.showContextMenu) {\n      return;\n    }\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCounterContextMenu = (counterId: string) => (\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Remove\",\n        action: () => {\n          this.props.removeCounter(counterId);\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard({ id: cardId, unselectOtherCards: false });\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n\n      menuItems.push({\n        label: \"Find Specific Card\",\n        action: () => {\n          if (!!card) {\n            this.setState({\n              showCardSearch: true,\n              cardSearchPosition: this.stage?.getPointerPosition() ?? null,\n              cardStackForSearching: card,\n            });\n          }\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: -1,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardClick = (card: ICardStack) => (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n\n    if (card.selected && modifierKeyHeld) {\n      this.props.toggleSelectCard(cardId);\n    } else {\n      this.props.selectCard({\n        id: cardId,\n        unselectOtherCards: !modifierKeyHeld,\n      });\n    }\n  };\n\n  private handleSelectAndExhaust = (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n    this.props.selectCard({ id: cardId, unselectOtherCards: !modifierKeyHeld });\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter(\n        (c) => c.selected && c.controlledBy === myPeerRef\n      ).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 50) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n    const code = event.key.toLocaleLowerCase();\n    const intCode = parseInt(code);\n    if (code === \"s\") {\n      this.props.togglePanMode();\n    } else if (code === \"f\") {\n      this.props.flipCards();\n    } else if (!Number.isNaN(intCode)) {\n      // First, get the selected card stack\n      const mySelectedCards = this.props.cards.cards.filter(\n        (c) => c.selected && c.controlledBy === myPeerRef\n      );\n      if (mySelectedCards.length !== 1) {\n        console.log(\n          \"will not be drawing any cards because the number of selected stacks is \" +\n            mySelectedCards.length\n        );\n      } else {\n        this.props.drawCardsOutOfCardStack({\n          cardStackId: mySelectedCards[0].id,\n          numberToDraw: intCode,\n        });\n      }\n    }\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (\n      event.shiftKey &&\n      (event.ctrlKey || event.metaKey) &&\n      event.key === \"z\"\n    ) {\n      this.props.redo();\n    } else if ((event.ctrlKey || event.metaKey) && event.key === \"z\") {\n      event.preventDefault();\n      this.props.undo();\n    }\n  };\n\n  private getRawPreviewCardPosition = (horizontal: boolean): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n\n    const widthToUse = horizontal\n      ? cardConstants.CARD_PREVIEW_HEIGHT\n      : cardConstants.CARD_PREVIEW_WIDTH;\n    const heightToUse = horizontal\n      ? cardConstants.CARD_PREVIEW_WIDTH\n      : cardConstants.CARD_PREVIEW_HEIGHT;\n\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - widthToUse / 2,\n          y: heightToUse / 2,\n        }\n      : {\n          x: widthToUse / 2,\n          y: heightToUse / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: KonvaEventObject<MouseEvent>) => {\n    if (event.evt.button === 0) {\n      // Only do something if it's the primary button (not a right-click)\n      const pos = this.getRelativePositionFromTarget(this.stage);\n\n      this.setState({\n        selectStartPos: {\n          x: pos.x,\n          y: pos.y,\n        },\n        selecting: true,\n      });\n    }\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleTouchStart = (event: any) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.handleContextMenu(event);\n    }, 750);\n  };\n\n  private handleTouchMove = (e: any) => {\n    e.evt.preventDefault();\n\n    var touch1 = e.evt.touches[0];\n    var touch2 = e.evt.touches[1];\n\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    if (touch1 && touch2) {\n      this.handleMultiTouch(touch1, touch2);\n    } else if (!this.props.panMode) {\n      this.handleMouseMove(e);\n    }\n  };\n\n  private handleMultiTouch = (touch1: any, touch2: any) => {\n    if (!this.stage) {\n      return;\n    }\n    // if the stage was under Konva's drag&drop\n    // we need to stop it, and implement our own pan logic with two pointers\n    if (this.stage.isDragging()) {\n      this.stage.stopDrag();\n    }\n\n    const p1 = {\n      x: touch1.clientX,\n      y: touch1.clientY,\n    };\n    const p2 = {\n      x: touch2.clientX,\n      y: touch2.clientY,\n    };\n\n    if (!this.lastCenter) {\n      this.lastCenter = getCenter(p1, p2);\n      return;\n    }\n    const newCenter = getCenter(p1, p2);\n\n    const dist = getDistance(p1, p2);\n\n    if (!this.lastDist) {\n      this.lastDist = dist;\n    }\n\n    // local coordinates of center point\n    const pointTo = {\n      x: (newCenter.x - this.stage.x()) / this.props.gameState.stageZoom.x,\n      y: (newCenter.y - this.stage.y()) / this.props.gameState.stageZoom.y,\n    };\n\n    const scale = this.props.gameState.stageZoom.x * (dist / this.lastDist);\n    this.props.updateZoom({ x: scale, y: scale });\n\n    // calculate new position of the stage\n    const dx = newCenter.x - this.lastCenter.x;\n    const dy = newCenter.y - this.lastCenter.y;\n\n    const newPos = {\n      x: newCenter.x - pointTo.x * scale + dx,\n      y: newCenter.y - pointTo.y * scale + dy,\n    };\n\n    this.props.updatePosition(newPos);\n\n    this.lastDist = dist;\n    this.lastCenter = newCenter;\n  };\n\n  private handleTouchEnd = (event: any) => {\n    this.lastDist = 0;\n    this.lastCenter = null;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Undo\",\n        action: this.props.undo,\n      },\n      {\n        label: \"Redo\",\n        action: this.props.redo,\n      },\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Create new counter\",\n        action: () => {\n          this.props.addNewCounter(\n            this.getRelativePositionFromTarget(this.stage) ?? { x: 0, y: 0 }\n          );\n        },\n      },\n      { label: \"Reset Game\", action: this.props.resetApp },\n      {\n        label: \"Connect to Remote Game\",\n        action: () => {\n          this.setState({\n            showPeerConnector: true,\n            peerConnectorPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Request resync from Remote Game\",\n        action: this.props.requestResync,\n      },\n      {\n        label: `Peer id is ${this.props.peerId}`,\n        action: () => {},\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getCardName = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return this.props.cardsData[cardInQuestion.jsonId]?.name ?? \"\";\n  };\n\n  private getCardCode = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return this.props.cardsData[cardInQuestion.jsonId]?.code ?? \"code missing\";\n  };\n\n  private checkMissingImageMap(code: string): string | null {\n    return MISSING_CARD_IMAGE_MAP[code] ?? null;\n  }\n\n  private generateLCGCDNImageUrl(card: CardData, faceup: boolean): string {\n    // get the first two digits\n\n    let codeToUse = card.code;\n\n    if (!faceup && !!card.back_link) {\n      codeToUse = card.back_link;\n    }\n\n    const groupCode =\n      CARD_PACK_REMAPPING[card.pack_code] ?? codeToUse.substring(0, 2);\n    let cardCode = codeToUse.substring(2);\n\n    //trim leading \"0\" chars\n    while (cardCode[0] === \"0\") {\n      cardCode = cardCode.substring(1);\n    }\n\n    cardCode = cardCode.toLocaleUpperCase();\n\n    let cardSuffix = \"\";\n\n    if (!!card.double_sided) {\n      cardSuffix = faceup ? \"A\" : \"B\";\n    }\n\n    return `https://lcgcdn.s3.amazonaws.com/mc/MC${groupCode}en_${cardCode}${cardSuffix}.jpg`;\n  }\n\n  private getImgUrls = (card: ICardStack): string[] => {\n    if (Object.keys(this.props.cardsData).length === 0) return [];\n\n    let urls: string[] = [];\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    let cardData: CardData | null = topCardData;\n\n    if (!card.faceup) {\n      if (!!topCardData.back_link || !!topCardData.double_sided) {\n        urls = [\n          this.generateLCGCDNImageUrl(topCardData, card.faceup),\n          // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.png`,\n          // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.jpg`,\n          // process.env.PUBLIC_URL +\n          //   \"/images/cards/\" +\n          //   bottomCardData.octgn_id +\n          //   \".b.jpg\",\n        ];\n      } else {\n        cardData = null;\n        urls = [\n          topCardData.faction_code === \"encounter\"\n            ? process.env.PUBLIC_URL +\n              \"/images/standard/encounter_card_back.png\"\n            : process.env.PUBLIC_URL + \"/images/standard/card_back.png\",\n        ];\n      }\n    } else {\n      urls = [\n        this.generateLCGCDNImageUrl(topCardData, card.faceup),\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.png`,\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.jpg`,\n        // process.env.PUBLIC_URL +\n        //   \"/images/cards/\" +\n        //   topCardData.octgn_id +\n        //   \".jpg\",\n      ];\n    }\n\n    const missingImageOverride = !!cardData\n      ? this.checkMissingImageMap(\n          card.faceup ? cardData.code : cardData.back_link ?? \"\"\n        )\n      : null;\n\n    if (!!missingImageOverride) {\n      urls.unshift(missingImageOverride);\n    }\n\n    return urls;\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n\nexport const getPlayerColors = createSelector(getGame, (game) => {\n  return game.playerColors;\n});\n\nexport const getPeerId = createSelector(getGame, (game) => game.peerId);\n","import { Vector2d } from \"konva/types/types\";\nimport { myPeerRef, PlayerColor } from \"../../constants/app-constants\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n  playerColors: { [key: string]: PlayerColor };\n  peerId: string;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nlocalStorageState.playerColors = {};\nlocalStorageState.playerColors[myPeerRef] = \"red\";\nlocalStorageState.peerId = \"\";\n\nconst defaultState: IGameState = {\n  playerColors: {},\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n  peerId: \"\",\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { PlayerColor } from \"../../constants/app-constants\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { IGameState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\nconst connectToRemoteGameReducer: CaseReducer<\n  IGameState,\n  PayloadAction<string>\n> = () => {};\n\nconst setPlayerColorReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ ref: string; color: PlayerColor }>\n> = (state, action) => {\n  state.playerColors[action.payload.ref] = action.payload.color;\n};\n\nconst setPeerIdReducer: CaseReducer<IGameState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.peerId = action.payload;\n};\n\nconst requestResyncReducer: CaseReducer<IGameState> = () => {};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n    connectToRemoteGame: connectToRemoteGameReducer,\n    setPlayerColor: setPlayerColorReducer,\n    setPeerId: setPeerIdReducer,\n    requestResync: requestResyncReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n    });\n  },\n});\n\nexport const {\n  updateZoom,\n  updatePosition,\n  connectToRemoteGame,\n  setPlayerColor,\n  setPeerId,\n  requestResync,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\n\nexport interface AddNewCounterWithIdPayload {\n  pos: Vector2d;\n  id: string;\n}\n\nexport const addNewCounterWithId = createAction<AddNewCounterWithIdPayload>(\n  \"addNewCounterWithId\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface ICountersState {\n  counters: ICounter[];\n}\n\nexport interface ICounter {\n  id: string;\n  position: Vector2d;\n  value: number;\n}\n\nconst localStorageState: ICountersState =\n  loadState(\"liveState\")?.counters ?? {};\n\nconst defaultState: ICountersState = {\n  counters: [],\n};\nexport const initialState: ICountersState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport { addNewCounterWithId } from \"./counters.actions\";\nimport { ICountersState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateCounterValueReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; delta: number }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.value += action.payload.delta;\n    if (counter.value < 0) {\n      counter.value = 0;\n    }\n  }\n};\n\nconst removeCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<string>\n> = (state, action) => {\n  state.counters = state.counters.filter((c) => c.id !== action.payload);\n};\n\nconst moveCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; newPos: Vector2d }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.position = {\n      x: action.payload.newPos.x,\n      y: action.payload.newPos.y,\n    };\n  }\n};\n\n// slice\nconst countersSlice = createSlice({\n  name: \"counters\",\n  initialState: initialState,\n  reducers: {\n    updateCounterValue: updateCounterValueReducer,\n    removeCounter: removeCounterReducer,\n    moveCounter: moveCounterReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.counters = action.payload.liveState.present.counters.counters;\n    });\n\n    builder.addCase(resetApp, (state, action) => {\n      state.counters = [];\n    });\n\n    builder.addCase(addNewCounterWithId, (state, action) => {\n      state.counters.push({\n        id: action.payload.id,\n        position: action.payload.pos,\n        value: 0,\n      });\n    });\n  },\n});\n\nexport const {\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n} = countersSlice.actions;\n\nexport default countersSlice.reducer;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCounters = (state: RootState) =>\n  state.liveState.present.counters;\n\nexport const getCurrentCounters = createSelector(getCounters, (counters) => {\n  return counters.counters;\n});\n","import { connect } from \"react-redux\";\nimport { ActionCreators } from \"redux-undo\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport {\n  getCards,\n  getDropTargetCardsById,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  adjustCounterToken,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  togglePanMode,\n  toggleSelectCard,\n  toggleToken,\n  unselectAllCards,\n  unselectCard,\n} from \"./features/cards/cards.slice\";\nimport {\n  addCardStack,\n  fetchDecklistById,\n  pullCardOutOfCardStack,\n  startCardMove,\n  shuffleStack,\n  drawCardsOutOfCardStack,\n} from \"./features/cards/cards.thunks\";\nimport {\n  getGame,\n  getPeerId,\n  getPlayerColors,\n} from \"./features/game/game.selectors\";\nimport {\n  connectToRemoteGame,\n  updatePosition,\n  updateZoom,\n  requestResync,\n} from \"./features/game/game.slice\";\n\nimport {\n  moveCounter,\n  removeCounter,\n  updateCounterValue,\n} from \"./features/counters/counters.slice\";\nimport { addNewCounter } from \"./features/counters/counters.thunks\";\nimport { resetApp } from \"./store/global.actions\";\nimport { RootState } from \"./store/rootReducer\";\nimport { getCurrentCounters } from \"./features/counters/counters.selectors\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    playerColors: getPlayerColors(state),\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n    counters: getCurrentCounters(state),\n    peerId: getPeerId(state),\n    dropTargetCardsById: getDropTargetCardsById(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n  connectToRemoteGame,\n  requestResync,\n  undo: ActionCreators.undo,\n  redo: ActionCreators.redo,\n  drawCardsOutOfCardStack,\n})(App);\n\nexport default AppContainer;\n","import { Vector2d } from \"konva/types/types\";\nimport { Action } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { addNewCounterWithId } from \"./counters.actions\";\n\nexport const addNewCounter = (\n  pos: Vector2d\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    pos,\n    id: uuidv4(),\n  };\n  dispatch(addNewCounterWithId(payloadWithId));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport undoable, { excludeAction, groupByActionTypes } from \"redux-undo\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport { startCardMoveWithSplitStackId } from \"../features/cards/cards.actions\";\nimport cards, {\n  cardMove,\n  hoverCard,\n  hoverLeaveCard,\n} from \"../features/cards/cards.slice\";\nimport game from \"../features/game/game.slice\";\n\nimport counters, { moveCounter } from \"../features/counters/counters.slice\";\n\nconst undoableState = combineReducers({\n  counters,\n  cards,\n});\n\nconst rootReducer = combineReducers({\n  game,\n  cardsData,\n  liveState: undoable(undoableState, {\n    limit: 20,\n    groupBy: groupByActionTypes([moveCounter.type]),\n    filter: excludeAction([\n      startCardMoveWithSplitStackId.type,\n      cardMove.type,\n      hoverCard.type,\n      hoverLeaveCard.type,\n    ]),\n  }),\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import Peer from \"peerjs\";\nimport { myPeerRef } from \"../constants/app-constants\";\nimport {\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n} from \"../features/cards/cards.slice\";\nimport {\n  connectToRemoteGame,\n  requestResync,\n  setPeerId,\n  setPlayerColor,\n  updatePosition,\n  updateZoom,\n} from \"../features/game/game.slice\";\nimport { receiveRemoteGameState } from \"./global.actions\";\n\nconst DEBUG = false;\n\nconst blacklistRemoteActions = {\n  [connectToRemoteGame.type]: true,\n  [updatePosition.type]: true,\n  [updateZoom.type]: true,\n  [hoverCard.type]: true,\n  [hoverLeaveCard.type]: true,\n  [togglePanMode.type]: true,\n  [receiveRemoteGameState.type]: true,\n  [requestResync.type]: true,\n};\n\nconst log = (...args: any[]) => {\n  if (DEBUG) {\n    console.log(args[0], args[1]);\n  }\n};\n\nconst setupConnection = (conn: any, storeAPI: any) => {\n  conn.on(\"data\", (data: any) => {\n    if (!data.INITIAL_STATE_MSG) {\n      if (!!data.RESYNC) {\n        log(\"received request for resync\");\n        conn.send({\n          INITIAL_STATE_MSG: true,\n          state: storeAPI.getState(),\n        });\n      } else {\n        log(\"recieved remote action\", data);\n        data.REMOTE_ACTION = true;\n        log(\"dispatching remote action\", data);\n        storeAPI.dispatch(data);\n      }\n    } else {\n      console.log(\"going to replace (most of) state with\", data.state);\n      setTimeout(() => {\n        storeAPI.dispatch(receiveRemoteGameState(data.state));\n      }, 0);\n    }\n  });\n};\n\nexport const peerJSMiddleware = (storeAPI: any) => {\n  const cgpPeer = new Peer(undefined, { debug: 0 });\n  let activeCon: Peer.DataConnection;\n  cgpPeer.on(\"error\", (err) => {\n    console.error(\"*****************Server error\");\n    console.error(err);\n  });\n\n  cgpPeer.on(\"disconnected\", () => {\n    console.log(\"****Peer server connection disconnected\");\n  });\n\n  cgpPeer.on(\"open\", (id) => {\n    console.log(\"My peer ID is: \" + id);\n    storeAPI.dispatch(setPeerId(id));\n  });\n\n  cgpPeer.on(\"connection\", (conn) => {\n    console.log(\"Connection received!\");\n    activeCon = conn;\n    setupConnection(activeCon, storeAPI);\n\n    activeCon.on(\"open\", () => {\n      console.log(\"connection ready for data\");\n      log(\"going to send initial state\", storeAPI.getState());\n      activeCon.send({\n        INITIAL_STATE_MSG: true,\n        state: storeAPI.getState(),\n      });\n      // TODO: more complicated logic to handle multiple connections. Right now\n      // this just changes the connecting client to blue\n      const setPlayerColorAction = setPlayerColor({\n        ref: activeCon.metadata.ref,\n        color: \"blue\",\n      });\n      activeCon.send(setPlayerColorAction);\n      activeCon.send(\n        setPlayerColor({\n          ref: myPeerRef,\n          color: \"red\",\n        })\n      );\n      storeAPI.dispatch(setPlayerColorAction);\n    });\n\n    activeCon.on(\"error\", (err) => {\n      console.error(\"****************Connection error:\", err);\n    });\n\n    activeCon.on(\"close\", () => {\n      console.log(\"******connection closed for ref \" + activeCon.metadata.ref);\n    });\n\n    activeCon.peerConnection.onconnectionstatechange = (ev: Event) => {\n      console.log(`connection state changed`);\n      console.log(ev);\n      console.log(activeCon.peerConnection.connectionState);\n      if (\n        activeCon.peerConnection.connectionState === \"closed\" ||\n        activeCon.peerConnection.connectionState === \"disconnected\"\n      ) {\n        console.log(\n          \"CLEARING CLIENT OWNED CARDS for \" + activeCon.metadata.ref\n        );\n      }\n    };\n  });\n  return (next: any) => (action: any) => {\n    log(\"received local action\", action);\n\n    // If this isn't a REMOTE action, add our ref onto it\n    if (!action.REMOTE_ACTION) {\n      action.ACTOR_REF = myPeerRef;\n    } else if (!action.ACTOR_REF) {\n      console.error(`Received a REMOTE action without an ACTOR_REF:`);\n      console.log(action);\n    }\n\n    if (action.type === connectToRemoteGame.type) {\n      console.log(\"going to connect to peer \" + action.payload);\n      activeCon = cgpPeer.connect(action.payload, {\n        metadata: { ref: myPeerRef },\n      });\n      setupConnection(activeCon, storeAPI);\n    } else if (action.type === requestResync.type) {\n      if (!!activeCon) {\n        activeCon.send({ RESYNC: true });\n      }\n    }\n\n    if (\n      !action.REMOTE_ACTION &&\n      !!activeCon &&\n      !blacklistRemoteActions[action.type]\n    ) {\n      log(\"going to send action to peer!\");\n      activeCon.send(action);\n    }\n\n    return next(action);\n  };\n};\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\nimport { peerJSMiddleware } from \"./peer-js-redux-middleware\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n}).concat(peerJSMiddleware);\n\nexport default function configureStore() {\n  console.log(\"configuring store. NODE_ENV is \" + process.env.NODE_ENV);\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}