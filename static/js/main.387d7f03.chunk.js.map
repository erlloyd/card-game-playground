{"version":3,"sources":["constants/card-constants.ts","Card.tsx","App.tsx","features/cards/cards.slice.ts","features/cards/initialState.ts","features/cards/cards.selectors.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","Card","props","img","unmounted","handleDoubleClick","id","handleDragStart","event","handleDragMove","dx","target","x","dy","y","handleDragEnd","dragging","handleClick","cancelBubble","handleMouseDown","handleMouseOver","handleHover","handleMouseOut","handleHoverLeave","state","imageLoaded","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","heightToUse","height","widthToUse","width","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","selected","strokeWidth","fillPatternImage","fillPatternScaleX","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","opacity","isGhost","draggable","onDragStart","onDragMove","onDragEnd","onDblClick","onDblTap","onClick","onTap","onMouseDown","onTouchStart","onMouseOver","onMouseOut","Component","App","stage","handleKeyPress","which","keyCode","togglePanMode","getRelativePositionFromTarget","posParam","transform","getAbsoluteTransform","copy","invert","pos","getPointerPosition","point","currentTarget","selectStartPos","selecting","getSelectionRectInfo","selectRect","Math","abs","handleMouseUp","drewASelectionRect","selectedCards","cards","reduce","currSelectedCards","card","Intersects","push","selectMultipleCards","ids","map","handleMouseMove","staticCards","filter","key","fill","startCardMove","cardMove","endCardMove","exhaustCard","selectCard","hoverCard","hoverLeaveCard","cardsData","length","process","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","window","innerWidth","previewPos","tabIndex","onKeyPress","ref","innerHeight","unselectAllCards","panMode","onMouseUp","onMouseMove","onTouchMove","preventDefault","concat","getCardWithId","find","cardsSlice","createSlice","name","initialState","reducers","action","callback","cardToUpdate","mutateCardWithId","payload","forEach","cardToStartMoving","foreachSelectedCard","Object","assign","movedCards","movedCard","splice","indexOf","actions","getCards","shouldShowPreview","createSelector","every","getPanMode","AppContainer","connect","CoreSet","slice","loadData","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","store","rtkConfigureStore","reducer","middleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.387d7f03.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { animated, Spring } from 'react-spring/renderprops-konva';\nimport { cardConstants } from './constants/card-constants';\n\ninterface IProps {\n  dragging: boolean,\n  exhausted: boolean,\n  fill: string,\n  handleClick?: (id: number) => void,\n  handleDoubleClick?: (id: number) => void,\n  handleDragStart?: (id: number) => void,\n  handleDragMove?: (info: {id: number, dx: number, dy: number}) => void,\n  handleDragEnd?: (id: number) => void,\n  handleHover?: (id: number) => void,\n  handleHoverLeave?: (id: number) => void,\n  id: number,\n  selected: boolean,\n  x: number,\n  y: number,\n  width?: number,\n  height?: number,\n  imgUrl: string,\n  isGhost?: boolean,\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props)\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    }\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (!this.state.imageLoaded && this.props.imgUrl && this.props.imgUrl !== this.img.src) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return (\n      this.state.imageLoaded ?\n      <Spring\n        native={true}\n        to={{\n            rotation: this.props.exhausted ? 90 : 0\n        }}>\n        {(animatedProps: any) => (\n            <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n                x: widthToUse / 2,\n                y: heightToUse / 2,\n            }}\n            stroke={this.props.selected ? 'blue' : ''}\n            strokeWidth= {this.props.selected ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={this.state.imageLoaded ? widthToUse / this.img.naturalWidth : widthToUse}\n            fillPatternScaleY={this.state.imageLoaded ? heightToUse / this.img.naturalHeight : heightToUse}\n            shadowBlur={this.props.dragging ? 10 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            />\n        )}\n      </Spring> : null\n    );\n  }\n\n  private handleDoubleClick = () => {\n    if(this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  }\n\n  private handleDragStart = (event: any) => {\n    if(this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id);\n    }\n  }\n\n  private handleDragMove = (event: any) => {\n    if(this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y\n      });\n    }\n  }\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  }\n\n  private handleClick = (event: any) => {\n    if(this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  }\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  }\n\n  private handleMouseOver = () => {\n    if(this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  }\n\n  private handleMouseOut = () => {\n    if(this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  }\n};\n\nexport default Card;","import * as Intersects from 'intersects';\nimport { Component } from 'react';\nimport * as React from 'react';\nimport { Layer, Rect, Stage } from 'react-konva';\nimport Konva from 'konva';\nimport { cardConstants } from './constants/card-constants';\nimport './App.css';\nimport Card from './Card';\nimport { CardData } from './external-api/marvel-card-data';\nimport { ICard, ICardsState } from './features/cards/initialState';\nimport { Vector2d } from 'konva/types/types';\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: CardData[];\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: {id: number, dx: number, dy: number}) => void;\n  endCardMove: (id: number) => void;\n  exhaustCard: (id: number) => void;\n  selectCard: (id: number) => void;\n  startCardMove: (id: number) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: {ids: number[]}) => void;\n  hoverCard: (id: number) => void;\n  hoverLeaveCard: (id: number) => void;\n  togglePanMode: () => void;\n  loadData: any;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  },\n  selectStartPos: {\n    x: number;\n    y: number;\n  },\n  selecting: boolean;\n}\nclass App extends Component<IProps, IState> {\n\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props)\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n    }\n  }\n\n  public componentDidMount() {\n    // this.props.loadData();\n  }\n\n  public render() {\n    \n    const staticCards = this.props.cards.cards\n    .filter(card => !card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.props.startCardMove}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            imgUrl={this.props.cardsData.length > 0 ? process.env.PUBLIC_URL + '/images/cards/18ae183c-de26-4369-8a41-424d58f01631.jpg'/*this.props.cardsData[card.id].Front.ImagePath*/  : ''}\n          />\n      )}\n    );\n\n    const ghostCards = this.props.cards.ghostCards\n    .map(\n      card => {\n        return (\n          <Card key={`ghost${card.id}`}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.props.cardsData.length > 0 ? process.env.PUBLIC_URL + '/images/cards/18ae183c-de26-4369-8a41-424d58f01631.jpg'/*this.props.cardsData[card.id].Front.ImagePath*/  : ''}\n            isGhost={true}\n          />\n        );\n      }\n    )\n\n    const movingCards = this.props.cards.cards\n    .filter(card => card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.props.startCardMove}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            imgUrl={this.props.cardsData.length > 0 ? process.env.PUBLIC_URL + '/images/cards/18ae183c-de26-4369-8a41-424d58f01631.jpg'/*this.props.cardsData[card.id].Front.ImagePath*/  : ''}\n          />\n      )}\n    );\n\n    const previewCards = this.props.cards.cards\n    .filter(card => !this.state.selecting && this.props.showPreview && !!this.props.cards.previewCard && (card.id === this.props.cards.previewCard.id))\n    .map(\n      card => {\n        const rawPos: Vector2d = {\n          x: window.innerWidth - (cardConstants.CARD_PREVIEW_WIDTH / 2),\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n        const previewPos = this.getRelativePositionFromTarget(this.stage, rawPos);\n        return (\n        <Card\n            key={`preview${card.id}`}\n            id={card.id}\n            x={previewPos.x}\n            y={previewPos.y}\n            exhausted={false}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.props.cardsData.length > 0 ? process.env.PUBLIC_URL + '/images/cards/18ae183c-de26-4369-8a41-424d58f01631.jpg'/*this.props.cardsData[card.id].Front.ImagePath*/  : ''}\n            height={cardConstants.CARD_PREVIEW_HEIGHT}\n            width={cardConstants.CARD_PREVIEW_WIDTH}\n          />\n      )}\n    );\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        <Stage\n          ref={(ref) => {this.stage = ref;}}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={this.props.unselectAllCards}\n          onTap={this.props.unselectAllCards}\n          onMouseDown={this.props.panMode ? () => {} : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? () => {} : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          draggable={this.props.panMode}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragStart={() => {console.log('STAGE onDragStart')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragMove={() => {console.log('STAGE onDragMove')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragEnd={() => {console.log('STAGE onDragEnd')}}\n          preventDefault={true}>\n\n          <Layer\n            preventDefault={true}>\n            {staticCards.concat(ghostCards).concat(movingCards).concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"/>\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if(code === 115) {\n      this.props.togglePanMode();\n    }\n  }\n \n  private getRelativePositionFromTarget= (target: any, posParam?: Vector2d) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos);\n  }\n\n  private handleMouseDown = (event: any) => {\n\n    const pos = this.getRelativePositionFromTarget(event.currentTarget);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n  }\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x: selectRect.width < 0 ? selectStartPos.x + selectRect.width : selectStartPos.x,\n      y: selectRect.height < 0 ? selectStartPos.y + selectRect.height : selectStartPos.y,\n    };\n  }\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICard[]>( \n        (currSelectedCards, card) =>{\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50, \n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT)\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },[]);\n\n      this.props.selectMultipleCards({ ids: selectedCards.map(card => card.id) });\n    }\n    \n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0\n      },\n      selecting: false,\n    });\n  }\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      })\n    }\n    event.cancelBubble = true;\n  }\n}\n\nexport default App;","import { createSlice, PayloadAction, CaseReducer } from '@reduxjs/toolkit'\nimport { initialState, ICardsState, ICard } from './initialState';\n\n// Helper methods\nconst getCardWithId = (state: ICardsState, id: number ): ICard | undefined => {\n  return state.cards.find( (card) => card.id === id);\n}\n\nconst mutateCardWithId = (state: ICardsState, id: number, callback: (card: ICard) => void ) => {\n  const cardToUpdate = getCardWithId(state, id);\n  if (cardToUpdate) { callback(cardToUpdate) }\n}\n\nconst foreachSelectedCard = (state: ICardsState, callback: (card: ICard) => void ) => {\n  state.cards.filter(card => card.selected).forEach(card => callback(card));\n}\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected; \n  });\n}\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  state.cards\n    .filter( card => card.id === action.payload || card.selected)\n    .forEach( (card) => {\n      card.exhausted = !card.exhausted;\n    })\n}\n\nconst startCardMoveReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardWithId(state, action.payload);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map(card => {\n      card.selected = card.id === action.payload;\n      return card;\n    });\n  }\n\n  // Now all selected cards should be put into ghost cards\n  state.ghostCards = [];\n\n  foreachSelectedCard(state, card => { \n    card.dragging = true;\n    state.ghostCards.push(Object.assign({}, card));\n  });\n}\n\nconst cardMoveReducer: CaseReducer<ICardsState, PayloadAction<{id: number, dx: number, dy: number}>> = (state, action) => {\n  const movedCards: ICard[] = [];\n  \n  state.cards\n  .filter((card) => card.id === action.payload.id || card.selected)\n  .forEach( (card) => {\n    card.x += action.payload.dx;\n    card.y += action.payload.dy;\n\n    movedCards.push(card);\n  });\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time \n  // or something, and the array could be a selector\n  movedCards.forEach(movedCard => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n}\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  state.cards\n  .filter((card) => card.id === action.payload || card.selected)\n  .forEach((card) =>{\n    card.dragging = false;\n  });\n\n  state.ghostCards = [];\n}\n\nconst selectMultipleCardsReducer: CaseReducer<ICardsState, PayloadAction<{ ids: number[]}>> = (state, action) => {\n  action.payload.ids\n  .map( id => state.cards.find(card => card.id === id))\n  .forEach( card => {\n    if (card) {\n      card.selected = true;\n    }\n  });\n}\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach( (card) => {\n    card.selected = false;\n  });\n}\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    }\n  } else if ( action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n}\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n}\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n}\n// Selectors\n\n\n// slice\n\nconst cardsSlice = createSlice({\n  name: 'cards',\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n  },\n});\n\nexport const { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","export interface ICard {\n  dragging: boolean;\n  exhausted: boolean;\n  fill: string;\n  id: number;\n  selected: boolean;\n  x: number;\n  y: number;\n}\n\nexport interface IPreviewCard {\n  id: number;\n}\n\nexport interface ICardsState {\n  cards: ICard[];\n  ghostCards: ICard[];\n  previewCard: IPreviewCard | null;\n  panMode: boolean;\n}\n\nexport const initialState: ICardsState = {\n  cards: [\n    {\n      dragging: false,\n      exhausted: false,\n      fill: 'red',\n      id: 0,\n      selected: false,\n      x: 200,\n      y: 200\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      fill: 'red',\n      id: 1,\n      selected: false,\n      x: 400,\n      y: 400\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      fill: 'red',\n      id: 2,\n      selected: false,\n      x: 200,\n      y: 600\n    },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  panMode: true,\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../../store/rootReducer';\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every(card => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;","import {connect} from 'react-redux';\n// import Types from 'Types';\nimport App from './App';\nimport { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n} from './features/cards/cards.slice'\n// import * as cardActions from './features/cards/actions';\n// import { shouldShowPreview } from './features/cards/selectors';\n// import { get3RandomPlayerCardDatas } from './features/cardsData/selectors';\n// import * as cardThunks from './features/cardsData/thunks';\n// import * as CoreSet from './external/ringsteki-json-data/packs/Core Set.json';\nimport CoreSet from './external/marvelsdb-json-data/pack/core.json'\n\nimport { RootState } from './store/rootReducer';\nimport { shouldShowPreview, getCards, getPanMode } from './features/cards/cards.selectors';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: /* CoreSet.cards.slice(0, 3) */CoreSet.slice(0, 3), //get3RandomPlayerCardDatas(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n  }\n}\n\n// const mapDispatchToProps = {\n//   selectCard,\n// }\n\nconst AppContainer = connect(\n  mapStateToProps,\n  {\n    cardMove,\n    endCardMove,\n    exhaustCard,\n    loadData: () => {},\n    selectCard,\n    selectMultipleCards,\n    startCardMove,\n    unselectAllCards,\n    hoverCard,\n    hoverLeaveCard,\n    togglePanMode,\n    // loadData: cardThunks.loadAllCardDataFromJSON,\n  }\n)(App);\n\nexport default AppContainer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport cards from '../features/cards/cards.slice';\n// import cardsData from '../features/cardsData/reducer'\n\nconst rootReducer = combineReducers({\n  cards,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import { configureStore as rtkConfigureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: false,\n})\n\nexport default function configureStore() {\n  \n  return rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  })\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}