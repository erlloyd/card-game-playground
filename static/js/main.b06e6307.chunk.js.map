{"version":3,"sources":["features/cards/cards.slice.ts","constants/card-constants.ts","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.async-thunks.ts","store/global.actions.ts","TopLayer.tsx","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/cards/cards.selectors.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["StatusTokenType","cardConstants","HORIZONTAL_TYPE_CODES","Card","props","img","stunnedImg","confusedImg","toughImg","damageImg","threatImg","genericImg","unmounted","renderAnimated","renderAnimatedCard","heightToUse","widthToUse","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","x","y","width","height","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","state","imageLoaded","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","dragging","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","id","renderUnanimatedCard","scale","getScale","card","fillPatternRotation","shouldRenderImageHorizontal","typeCode","cardStackOffset","cardStack","numCardsInStack","fill","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","getTokenInSlot","confused","tough","event","dx","target","dy","cancelBubble","handleHover","handleHoverLeave","localStorage","getItem","prevImgUrl","imgUrl","Image","onload","setState","src","process","prevProps","prevState","this","renderCard","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","Component","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","menuStyle","top","position","left","className","style","map","i","index","label","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","EncounterLoader","handleSelected","_event","loadCards","cards","c","code","Autocomplete","options","encounterData","getOptionLabel","option","setData","name","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","createSelector","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","Object","values","forEach","encounterCard","setCode","set_code","push","entries","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","connect","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","loadState","serializedState","JSON","parse","err","localStorageState","initialState","ghostCards","previewCard","dropTargetCard","panMode","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSetCode","data","investigator_code","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeck","relatedEncounterDeck","relatedObligationDeck","resetApp","createAction","getCardStackWithId","find","mutateCardWithId","callback","cardToUpdate","cardsSlice","createSlice","reducers","selectCard","unselectCard","toggleSelectCard","exhaustCard","startCardMove","cardToStartMoving","splitTopCard","cardToMove","Error","topCard","shift","newCard","assign","uuidv4","foreachSelectedCard","cardMove","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCards","concat","length","selectMultipleCards","ids","unselectAllCards","hoverCard","cardToPreview","faceup","hoverLeaveCard","togglePanMode","flipCards","reverse","shuffleStack","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","resetCards","addCardStack","newStack","cardJsonIds","jsonId","statusTokens","toggleToken","cardToToggle","tokenType","extraReducers","builder","addCase","fulfilled","console","log","heroCard","mainDeckStack","slots","cardDetails","Array","from","keys","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","containerStyle","completed","children","App","stage","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","pos","clearEncounterImporter","handleLoadEncounter","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","newPos","updatePosition","handleCardContextMenu","cardId","currentStatusTokens","menuItems","Stunned","Confused","Tough","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","handleKeyPress","which","keyCode","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","reduce","currSelectedCards","Intersects","handleMouseMove","getCardType","getImgUrl","topCardData","bottomCardData","back_link","double_sided","octgn_id","loadCardsData","staticCards","tokens","damage","threat","generic","movingCards","previewCards","showPreview","rawPos","previewPos","tabIndex","onKeyPress","ref","stagePosition","innerHeight","onMouseUp","onMouseMove","onTouchMove","onWheel","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","error","SetData","card_set_type_code","getCards","shouldShowPreview","every","getPanMode","getGame","game","gameSlice","AppContainer","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","store","rtkConfigureStore","reducer","middleware","subscribe","throttle","blacklistStateKeys","stringify","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+0maAgBYA,E,mIChBCC,EACE,IADFA,EAEC,IAFDA,EAGU,IAHVA,EAIS,ICMTC,EAAwB,CAAC,cAAe,eAugBtCC,E,kDApbb,WAAYC,GAAgB,IAAD,oCACzB,cAAMA,IAXAC,SAUmB,IATnBC,gBASmB,IARnBC,iBAQmB,IAPnBC,cAOmB,IANnBC,eAMmB,IALnBC,eAKmB,IAJnBC,gBAImB,IAHnBC,eAGmB,IAFnBC,gBAA0B,EAEP,EA0JnBC,mBAAqB,SAACC,EAAqBC,GACjD,OACE,cAAC,SAAD,CAEEC,QAAQ,EACRC,GAAI,CACFC,SAAU,EAAKf,MAAMgB,UAAY,GAAK,GAJ1C,SAOG,SAACC,GAAD,OACC,cAAC,WAASC,KAAV,2BACMD,GADN,IAEEE,aAAc,EACdC,EAAG,EAAKpB,MAAMoB,EACdC,EAAG,EAAKrB,MAAMqB,EACdC,MAAOV,EACPW,OAAQZ,EACRa,OAAQ,CACNJ,EAAGR,EAAa,EAChBS,EAAGV,EAAc,GAEnBc,OAAQ,EAAKzB,MAAM0B,WAAa,OAAS,GACzCC,YAAa,EAAK3B,MAAM0B,WAAa,EAAI,EACzCE,iBAAkB,EAAK3B,IACvB4B,kBACE,EAAKC,MAAMC,YACPnB,EAAa,EAAKX,IAAI+B,aACtBpB,EAENqB,kBACE,EAAKH,MAAMC,YACPpB,EAAc,EAAKV,IAAIiC,cACvBvB,EAENwB,WAAY,EAAKnC,MAAMoC,SAAW,GAAK,EAAKpC,MAAMqC,SAAW,EAAI,EACjEC,QAAS,EAAKtC,MAAMuC,QAAU,GAAM,EACpCC,WAAW,EACXC,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,UAAW,EAAKC,cAChBC,WAAY,EAAKC,kBACjBC,SAAU,EAAKD,kBACfE,QAAS,EAAKC,YACdC,MAAO,EAAKD,YACZE,YAAa,EAAKC,gBAClBC,aAAc,EAAKD,gBACnBE,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,cAAe,EAAKC,uBA9C1B,UACU,EAAK7D,MAAM8D,GADrB,WA5JuB,EAiNnBC,qBAAuB,SAACpD,EAAqBC,GAAwB,IAAD,MACpEoD,EAAQ,EAAKC,SAASrD,EAAYD,GAClCa,EAAS,CACbJ,EAAGR,EAAa,EAChBS,EAAGV,EAAc,GAGbuD,EACJ,cAAC,IAAD,CAEErD,QAAQ,EACRE,SAAU,EAAKf,MAAMgB,UAAY,GAAK,EACtCG,aAAc,EACdC,EAAG,EAAKpB,MAAMoB,EACdC,EAAG,EAAKrB,MAAMqB,EACdC,MAAOV,EACPW,OAAQZ,EACRa,OAAQA,EACRC,OAAQ,EAAKzB,MAAM0B,WAAa,OAAS,GACzCC,YAAa,EAAK3B,MAAM0B,WAAa,EAAI,EACzCyC,oBACE,EAAKC,4BACH,EAAKpE,MAAMqE,UAAY,GACvBvE,GAEE,IACA,EAEN8B,iBAAkB,EAAK3B,IACvB4B,kBAAmBmC,EAAM1C,MACzBW,kBAAmB+B,EAAMzC,OACzBY,WAAY,EAAKnC,MAAMoC,SAAW,GAAK,EAAKpC,MAAMqC,SAAW,EAAI,EACjEC,QAAS,EAAKtC,MAAMuC,QAAU,GAAM,EACpCC,WAAW,EACXC,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,UAAW,EAAKC,cAChBC,WAAY,EAAKC,kBACjBC,SAAU,EAAKD,kBACfE,QAAS,EAAKC,YACdC,MAAO,EAAKD,YACZE,YAAa,EAAKC,gBAClBC,aAAc,EAAKD,gBACnBE,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,cAAe,EAAKC,mBArCtB,UACU,EAAK7D,MAAM8D,GADrB,UAyCIQ,EAAkB,CACtBlD,EAAGI,EAAOJ,EAAI,EACdC,EAAGG,EAAOH,EAAI,GAGVkD,GACH,EAAKvE,MAAMwE,iBAAmB,GAAK,EAClC,cAAC,IAAD,CAEE3D,QAAQ,EACRE,SAAU,EAAKf,MAAMgB,UAAY,GAAK,EACtCG,aAAc,CAAC,EAAG,EAAG,EAAG,GACxBC,EAAG,EAAKpB,MAAMoB,EACdC,EAAG,EAAKrB,MAAMqB,EACdC,MAAOV,EACPW,OAAQZ,EACRa,OAAQ8C,EACRhC,QAAS,EAAKtC,MAAMuC,QAAU,GAAM,EACpCkC,KAAM,OACNtC,WAAY,EAAKnC,MAAMoC,SAAW,GAAK,EAAKpC,MAAMqC,SAAW,EAAI,GAZnE,UACU,EAAKrC,MAAM8D,GADrB,eAcE,KAEAY,KACH,UAAC,EAAK1E,MAAM2E,iBAAZ,aAAC,EAAsBC,UAAW,EAAK9C,MAAM+C,kBAAkBD,QAqBlE,MAAO,CAACL,EAAWL,EAnBE,EAAKY,eACxBJ,EACA,EAAKxE,WACLsB,EACA,GAEoB,EAAKsD,kBACxB,UAAC,EAAK9E,MAAM2E,iBAAZ,aAAC,EAAsBI,WAAY,EAAKjD,MAAM+C,kBAAkBE,SACjE,EAAK5E,YACLqB,EACA,GAEiB,EAAKsD,kBACrB,UAAC,EAAK9E,MAAM2E,iBAAZ,aAAC,EAAsBK,QAAS,EAAKlD,MAAM+C,kBAAkBG,MAC9D,EAAK5E,SACLoB,EACA,KA5SuB,EA0XnBqC,kBAAoB,SAACoB,GACrB,EAAKjF,MAAM6D,mBACf,EAAK7D,MAAM6D,kBAAkB,EAAK7D,MAAM8D,GAAImB,IA5XrB,EAgYnBjC,kBAAoB,WACtB,EAAKhD,MAAMgD,mBACb,EAAKhD,MAAMgD,kBAAkB,EAAKhD,MAAM8D,KAlYjB,EAsYnBpB,gBAAkB,SAACuC,GACrB,EAAKjF,MAAM0C,iBACb,EAAK1C,MAAM0C,gBAAgB,EAAK1C,MAAM8D,GAAImB,IAxYnB,EA4YnBrC,eAAiB,SAACqC,GACpB,EAAKjF,MAAM4C,gBACb,EAAK5C,MAAM4C,eAAe,CACxBkB,GAAI,EAAK9D,MAAM8D,GACfoB,GAAID,EAAME,OAAO/D,IAAM,EAAKpB,MAAMoB,EAClCgE,GAAIH,EAAME,OAAO9D,IAAM,EAAKrB,MAAMqB,KAjZb,EAsZnByB,cAAgB,WAClB,EAAK9C,MAAM8C,eAAiB,EAAK9C,MAAMoC,UACzC,EAAKpC,MAAM8C,cAAc,EAAK9C,MAAM8D,KAxZb,EA4ZnBX,YAAc,SAAC8B,GACjB,EAAKjF,MAAMmD,cACb,EAAKnD,MAAMmD,YAAY,EAAKnD,MAAM8D,IAClCmB,EAAMI,cAAe,IA/ZE,EAmanB/B,gBAAkB,SAAC2B,GACzBA,EAAMI,cAAe,GApaI,EAuanB5B,gBAAkB,WACpB,EAAKzD,MAAMsF,aACb,EAAKtF,MAAMsF,YAAY,EAAKtF,MAAM8D,KAzaX,EA6anBH,eAAiB,WACnB,EAAK3D,MAAMuF,kBACb,EAAKvF,MAAMuF,iBAAiB,EAAKvF,MAAM8D,KA5arC0B,aAAaC,QAAQ,yBACvB,EAAKhF,gBAAiB,GAGxB,EAAKD,WAAY,EAEjB,EAAKsB,MAAQ,CACXC,aAAa,EACb2D,WAAY,EAAK1F,MAAM2F,OACvBd,kBAAmB,CACjBD,SAAS,EACTG,UAAU,EACVC,OAAO,IAIX,EAAK/E,IAAM,IAAI2F,MACf,EAAK1F,WAAa,IAAI0F,MACtB,EAAKzF,YAAc,IAAIyF,MACvB,EAAKxF,SAAW,IAAIwF,MACpB,EAAKvF,UAAY,IAAIuF,MACrB,EAAKtF,UAAY,IAAIsF,MACrB,EAAKrF,WAAa,IAAIqF,MAGtB,EAAK3F,IAAI4F,OAAS,WACX,EAAKrF,WACR,EAAKsF,SAAS,CACZ/D,aAAa,KAKf/B,EAAM2F,SACR,EAAK1F,IAAI8F,IAAM/F,EAAM2F,QAIvB,EAAKzF,WAAW2F,OAAS,WAClB,EAAKrF,WACR,EAAKsF,SAAS,CACZjB,kBAAmB,CACjBD,SAAS,EACTG,SAAU,EAAKjD,MAAM+C,kBAAkBE,SACvCC,MAAO,EAAKlD,MAAM+C,kBAAkBG,WAMvC,UAAChF,EAAM2E,iBAAP,aAAC,EAAiBC,WACrB,EAAK1E,WAAW6F,IACdC,qDAIJ,EAAK7F,YAAY0F,OAAS,WACnB,EAAKrF,WACR,EAAKsF,SAAS,CACZjB,kBAAmB,CACjBD,QAAS,EAAK9C,MAAM+C,kBAAkBD,QACtCG,UAAU,EACVC,MAAO,EAAKlD,MAAM+C,kBAAkBG,WAMvC,UAAChF,EAAM2E,iBAAP,aAAC,EAAiBI,YACrB,EAAK5E,YAAY4F,IACfC,sDAIJ,EAAK5F,SAASyF,OAAS,WAChB,EAAKrF,WACR,EAAKsF,SAAS,CACZjB,kBAAmB,CACjBD,QAAS,EAAK9C,MAAM+C,kBAAkBD,QACtCG,SAAU,EAAKjD,MAAM+C,kBAAkBE,SACvCC,OAAO,OAMV,UAAChF,EAAM2E,iBAAP,aAAC,EAAiBK,SACrB,EAAK5E,SAAS2F,IAAMC,mDA1FG,E,0EA1BKhG,EAAe8B,GAC7C,OAAI9B,EAAM2F,SAAW7D,EAAM4D,WAClB,CACL3D,aAAa,EACb2D,WAAY1F,EAAM2F,OAClBd,kBAAmB,CACjBD,QAAS9C,EAAM+C,kBAAkBD,QACjCG,SAAUjD,EAAM+C,kBAAkBE,SAClCC,MAAOlD,EAAM+C,kBAAkBG,QAK9B,S,wDA2GiBiB,EAAmBC,GAAoB,IAAD,aAE3DC,KAAKrE,MAAMC,aACZoE,KAAKnG,MAAM2F,QACXQ,KAAKnG,MAAM2F,SAAWQ,KAAKlG,IAAI8F,MAE/BI,KAAKlG,IAAI8F,IAAMI,KAAKnG,MAAM2F,QAKzBQ,KAAKrE,MAAM+C,kBAAkBD,UAC9B,UAACqB,EAAUtB,iBAAX,aAAC,EAAqBC,YACrB,UAACuB,KAAKnG,MAAM2E,iBAAZ,aAAC,EAAsBC,WAExBuB,KAAKjG,WAAW6F,IACdC,qDAKDG,KAAKrE,MAAM+C,kBAAkBE,WAC9B,UAACkB,EAAUtB,iBAAX,aAAC,EAAqBI,aACrB,UAACoB,KAAKnG,MAAM2E,iBAAZ,aAAC,EAAsBI,YAExBoB,KAAKhG,YAAY4F,IACfC,sDAKDG,KAAKrE,MAAM+C,kBAAkBG,QAC9B,UAACiB,EAAUtB,iBAAX,aAAC,EAAqBK,UACrB,UAACmB,KAAKnG,MAAM2E,iBAAZ,aAAC,EAAsBK,SAExBmB,KAAK/F,SAAS2F,IAAMC,qD,0CAKtBG,KAAK3F,WAAY,I,6CAIjB2F,KAAK3F,WAAY,I,+BAIjB,OAAO2F,KAAKrE,MAAMC,YAAcoE,KAAKC,aAAe,O,mCAIpD,IAAMzF,EAAcwF,KAAKnG,MAAMuB,QAAU1B,EACnCe,EAAauF,KAAKnG,MAAMsB,OAASzB,EAEvC,OAAOsG,KAAK1F,eACR0F,KAAKzF,mBAAmBC,EAAaC,GACrCuF,KAAKpC,qBAAqBpD,EAAaC,K,qCA4J3CyF,EACApG,EACAuB,EACA8E,GAEA,IAAMC,EAAa,CACjBjF,MAAOrB,EAAI+B,aAAe,EAC1BT,OAAQtB,EAAIiC,cAAgB,GAGxBsE,EAAgB,CACpBpF,EAAGI,EAAOJ,EAAIvB,EAA2B0G,EAAWjF,MAAQ,EAC5DD,EAAGG,EAAOH,EAAIkF,EAAWhF,OAAS+E,EAAO,GAAKA,EAAO,GAAK,IAG5D,OAAOD,EACL,cAAC,IAAD,CAEExF,QAAQ,EACRM,aAAc,EACdC,EAAG+E,KAAKnG,MAAMoB,EACdC,EAAG8E,KAAKnG,MAAMqB,EACdC,MAAOiF,EAAWjF,MAClBC,OAAQgF,EAAWhF,OACnBM,kBAAmB,GACnBI,kBAAmB,GACnBT,OAAQgF,EACR5E,iBAAkB3B,GAXpB,UACUkG,KAAKnG,MAAM8D,GADrB,kBACiCwC,IAY/B,O,kDAIJG,EACAC,GAEA,OAAOA,EAAUC,SAASF,KAAUN,KAAKS,gB,+BAU1BhG,EAAoBD,GACnC,IAAMW,EAAQ6E,KAAKrE,MAAMC,YACrBnB,EAAauF,KAAKlG,IAAI+B,aACtBpB,EAEEiG,EAAkBV,KAAKrE,MAAMC,YAC/BpB,EAAcwF,KAAKlG,IAAI+B,aACvBpB,EAEEW,EAAS4E,KAAKrE,MAAMC,YACtBpB,EAAcwF,KAAKlG,IAAIiC,cACvBvB,EAEEmG,EAAmBX,KAAKrE,MAAMC,YAChCnB,EAAauF,KAAKlG,IAAIiC,cACtBvB,EAEJ,OAAOwF,KAAK/B,4BACV+B,KAAKnG,MAAMqE,UAAY,GACvBvE,GAEE,CAAEwB,MAAOuF,EAAiBtF,OAAQuF,GAClC,CAAExF,QAAOC,Y,oCA7Bc,IAAD,IAC1B,OACE,UAAA4E,KAAKnG,MAAM2F,cAAX,eAAmBgB,SAAS,eAA5B,UACAR,KAAKnG,MAAM2F,cADX,aACA,EAAmBgB,SAAS,c,GAzXfI,aCCJC,E,4MAfLC,eAAiB,SACvBhC,GAEAA,EAAMgC,kB,EAGAC,yBAA2B,SAACC,GAAD,OAA2B,WAC5DA,EAAKC,SACC,EAAKpH,MAAMqH,oBACf,EAAKrH,MAAMqH,mBAAmB,EAAKrH,MAAMsH,MAAM,IAEjD,EAAKtH,MAAMuH,oB,uDA7CH,IAAD,OACDC,EAAiC,CACrCC,IAAI,GAAD,OAAKtB,KAAKnG,MAAM0H,SAASrG,EAAI,EAA7B,MACHsG,KAAK,GAAD,OAAKxB,KAAKnG,MAAM0H,SAAStG,EAAI,EAA7B,OAGN,OACE,qBACE0C,GAAG,qBACHF,cAAeuC,KAAKc,eACpB/D,QAASiD,KAAKnG,MAAMuH,gBAHtB,SAKE,qBACEK,UAAU,eACVC,MAAOL,EACP5D,cAAeuC,KAAKc,eACpB/D,QAASiD,KAAKnG,MAAMuH,gBAJtB,SAMGpB,KAAKnG,MAAMsH,MAAMQ,KAAI,SAACC,EAAGC,GAAJ,OACpB,8BACE,wBACEJ,UAAU,oBACVhE,cAAe,EAAKqD,eACpB/D,QAAS,EAAKgE,yBAAyBa,GAHzC,SAKGA,EAAEE,SANP,4BAA+BD,e,GApBjBjB,aCaXmB,E,4MAXL7C,aAAe,SAACJ,GACtBA,EAAMkD,mB,EAGAC,cAAgB,SAACnD,GACL,UAAdA,EAAMoD,KACR,EAAKrI,MAAMsI,YAAYrD,EAAMsD,cAAcC,Q,uDAf7C,OACE,uBACEC,UAAWtC,KAAKiC,cAChBlF,QAASiD,KAAKd,aACdoB,KAAK,e,GANYM,a,kBCgCV2B,E,4MAXLC,eAAiB,SAACC,EAAaJ,GAC/BA,GACJ,EAAKxI,MAAM6I,UAAUL,EAAMM,MAAMhB,KAAI,SAACiB,GAAD,OAAOA,EAAEC,U,EAI1C3D,aAAe,SAACJ,GACtBA,EAAMkD,mB,uDAvBN,OACE,qBAAKjF,QAASiD,KAAKd,aAAnB,SACE,cAAC4D,EAAA,EAAD,CACEnF,GAAG,4BACHoF,QAAS/C,KAAKnG,MAAMmJ,eAAiB,GACrCC,eAAgB,SAACC,GAAD,OAAYA,EAAOC,QAAQC,MAC3C1B,MAAO,CAAEvG,MAAO,KAChBkI,SAAUrD,KAAKwC,eACfc,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBzB,MAAM,gBAAgB2B,QAAQ,uB,GAXnC7C,a,gBCCjB8C,EAAe,SAAC/H,GAAD,OAAsBA,EAAMgI,WAE3CC,EAAuBC,YAClCH,GACA,SAACC,GACC,OAAO,2BAAKA,EAAUG,UAAaH,EAAUI,sBAIpCC,EAA2BH,YACtCH,GACA,SAACC,GACC,OAAOA,EAAUG,YAIRG,EAAgCJ,YAC3CH,GACA,SAACC,GACC,OAAOA,EAAUI,qBAIRG,EAAsBL,YAAeH,GAAc,SAACC,GAC/D,OAAOA,EAAUR,WAGNgB,EAAyCN,YACpDI,EACAC,GACA,SAACH,EAAmBZ,GAClB,IAAMiB,EAAoD,GAW1D,OATAC,OAAOC,OAAOP,GAAmBQ,SAAQ,SAACC,GACxC,IAAMC,EAAUD,EAAcE,UAAY,UACpCN,EAAmBK,GACvBL,EAAmBK,GAASE,KAAKH,GAEjCJ,EAAmBK,GAAW,CAACD,MAI5BH,OAAOO,QAAQR,GACnBzC,KAAI,mCAAEO,EAAF,KAAOG,EAAP,WAAmB,CACtBoC,QAASvC,EACTiB,QAASA,EAAQjB,GACjBS,MAAON,MAERwC,QACC,SAACC,GAAD,MAC8B,YAA5BA,EAAI3B,QAAQ4B,aACgB,SAA5BD,EAAI3B,QAAQ4B,eAEfC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9B,QAAQC,KAAO8B,EAAE/B,QAAQC,KAAO,GAAK,QClD/C+B,EAFkBC,aANT,SAACzJ,GACvB,MAAO,CACLqH,cAAemB,EAAuCxI,MAIA,GAAzByJ,CAA6B7C,G,QCVjD8C,EAAc,SAACC,EAAkBC,GAC5C,IAAMC,EAASF,EAAOrK,EAAIsK,EAAOtK,EAC3BwK,EAASH,EAAOpK,EAAIqK,EAAOrK,EACjC,OAAOwK,KAAKC,KAAKH,EAASA,EAASC,EAASA,ICHjCG,EAAY,SAAC1D,GACxB,IACE,IAAM2D,EAAkBxG,aAAaC,QAAQ4C,GAC7C,OAAwB,OAApB2D,EACK,GAEFC,KAAKC,MAAMF,GAClB,MAAOG,GACP,MAAO,KCyBLC,EAAiCL,EAAU,SA2CpCM,EAAyB,2BA1CJ,CAChCvD,MAAO,GAmCPwD,WAAY,GACZC,YAAa,KACbC,eAAgB,KAChBC,SAAS,IAKNL,G,qDCvEQM,EAAoBC,YAC/B,2BAD+C,uCAE/C,WAAOC,EAAqDC,GAA5D,2BAAAzB,EAAA,sEACyB0B,IAAMC,IAAN,oDACwBH,EAAQI,aAFzD,cACQC,EADR,OAIQnL,EAAmB+K,EAASK,WAC5BC,EAAgBhD,EAAyBrI,GACzCsL,EAAcD,EAAcF,EAASI,KAAKC,mBAAmBzC,SAC7D0C,EAAqBnD,EAA8BtI,GAEnD0L,EAAqBhD,OAAOO,QAAQwC,GACvCvC,QACC,mCAAQxC,GAAR,kBACEA,EAAMqC,WAAN,UAAsBuC,IACF,eAApB5E,EAAMiF,aAET3F,KAAI,mCAAEO,EAAF,iBAAmBA,KAEpBqF,EAAoBlD,OAAOO,QAAQwC,GACtCvC,QAAO,oDAAyBH,WAAN,UAAsBuC,EAAtB,eAC1BtF,KAAI,mCAAEO,EAAF,iBAAmBA,KAnB5B,kBAqBS,CACLX,SAAUkF,EAAQlF,SAClB2F,KAAMJ,EAASI,KACfM,qBAAsBD,EACtBE,sBAAuBJ,IAzB3B,4CAF+C,yDCPpCK,EAAWC,YAAa,gB,SZczBlO,K,kBAAAA,E,oBAAAA,E,eAAAA,M,KAOZ,IAAMmO,EAAqB,SACzBjM,EACAgC,GAEA,OAAOhC,EAAMgH,MAAMkF,MAAK,SAAC9J,GAAD,OAAUA,EAAKJ,KAAOA,MAG1CmK,EAAmB,SACvBnM,EACAgC,EACAoK,GAEA,IAAMC,EAAeJ,EAAmBjM,EAAOgC,GAC3CqK,GACFD,EAASC,IAsTPC,GAAaC,YAAY,CAC7B9E,KAAM,QACN8C,aAAcA,EACdiC,SAAU,CACRC,WAjRuE,SACzEzM,EACAsF,GAEA6G,EAAiBnM,EAAOsF,EAAOwF,SAAS,SAAC1I,GACvCA,EAAK7B,UAAW,MA6QhBmM,aAzQyE,SAC3E1M,EACAsF,GAEA6G,EAAiBnM,EAAOsF,EAAOwF,SAAS,SAAC1I,GACvCA,EAAK7B,UAAW,MAqQhBoM,iBA9PA,SAAC3M,EAAOsF,GACV6G,EAAiBnM,EAAOsF,EAAOwF,SAAS,SAAC1I,GACvCA,EAAK7B,UAAY6B,EAAK7B,aA6PtBqM,YAzPwE,SAC1E5M,EACAsF,GAEAtF,EAAMgH,MACHkC,QAAO,SAAC9G,GAAD,OAAUA,EAAKJ,KAAOsD,EAAOwF,SAAW1I,EAAK7B,YACpDqI,SAAQ,SAACxG,GACRA,EAAKlD,WAAakD,EAAKlD,cAmPzB2N,cA5OA,SAAC7M,EAAOsF,GAEV,IAAMwH,EAAoBb,EAAmBjM,EAAOsF,EAAOwF,QAAQ9I,IASnE,GARI8K,IAAsBA,EAAkBvM,WAC1CP,EAAMgH,MAAQhH,EAAMgH,MAAMhB,KAAI,SAAC5D,GAE7B,OADAA,EAAK7B,SAAW6B,EAAKJ,KAAOsD,EAAOwF,QAAQ9I,GACpCI,MAKPkD,EAAOwF,QAAQiC,aAAc,CAC/B,IAAMC,EAAahN,EAAMgH,MAAMkF,MAAK,SAACjF,GAAD,OAAOA,EAAEjF,KAAOsD,EAAOwF,QAAQ9I,MAEnE,IAAKgL,EACH,MAAM,IAAIC,MAAM,yBAGlBD,EAAWzM,UAAW,EAEtB,IAAM2M,EAAUF,EAAWvK,UAAU0K,QAC/BC,EAAU1E,OAAO2E,OAAO,GAAIL,EAAY,CAC5CzM,UAAU,EACVD,UAAU,EACVmC,UAAW,CAACyK,KAGdF,EAAWhL,GAAKsL,cAEhBtN,EAAMgH,MAAMgC,KAAKoE,GAInBpN,EAAMwK,WAAa,GAEdlF,EAAOwF,QAAQiC,cAjHM,SAC1B/M,EACAoM,GAEApM,EAAMgH,MAAMkC,QAAO,SAAC9G,GAAD,OAAUA,EAAK7B,YAAUqI,SAAQ,SAACxG,GAAD,OAAUgK,EAAShK,MA8GrEmL,CAAoBvN,GAAO,SAACoC,GAC1BA,EAAK9B,UAAW,EAChBN,EAAMwK,WAAWxB,KAAKN,OAAO2E,OAAO,GAAIjL,QAuM1CoL,SA/LA,SAACxN,EAAOsF,GAAY,IAAD,IAGjBmI,EAFEC,EAA2B,GAIjC1N,EAAMgH,MACHkC,QAAO,SAAC9G,GAAD,OAAUA,EAAKJ,KAAOsD,EAAOwF,QAAQ9I,IAAMI,EAAK7B,YACvDqI,SAAQ,SAACxG,GACJA,EAAKJ,KAAOsD,EAAOwF,QAAQ9I,KAC7ByL,EAAcrL,GAGhBA,EAAK9C,GAAKgG,EAAOwF,QAAQ1H,GACzBhB,EAAK7C,GAAK+F,EAAOwF,QAAQxH,GAEzBoK,EAAW1E,KAAK5G,MAKpB,IAAMuL,EAAgE,IAzI1C,SAC5B3N,EACAoM,GAEApM,EAAMgH,MACHkC,QAAO,SAAC9G,GAAD,OAAWA,EAAK7B,YACvBqI,SAAQ,SAACxG,GAAD,OAAUgK,EAAShK,MAoI9BwL,CAAsB5N,GAAO,SAACoC,GAC5B,IAAMyL,EAAWnE,EAAYtH,EAAMqL,GAC/BI,EA9K0B,IA+K5BF,EAAoB3E,KAAK,CACvB6E,WACAzL,YAKNpC,EAAM0K,eAAN,oBACEiD,EAAoBtE,MAAK,SAACyE,EAAIC,GAAL,OAAYD,EAAGD,SAAWE,EAAGF,YAAU,UADlE,aACE,EAAoEzL,YADtE,QAEE,KAIFsL,EAAW9E,SAAQ,SAACoF,GAClBhO,EAAMgH,MAAMgC,KAAKhJ,EAAMgH,MAAMiH,OAAOjO,EAAMgH,MAAMkH,QAAQF,GAAY,GAAG,QA0JvEG,YAtJwE,SAC1EnO,EACAsF,GAEA,IAAI8I,EAAkC,GAatC,GAZApO,EAAMgH,MACHkC,QAAO,SAAC9G,GAAD,OAAUA,EAAKJ,KAAOsD,EAAOwF,SAAW1I,EAAK7B,YACpDqI,SAAQ,SAACxG,GACRA,EAAK9B,UAAW,EAEVN,EAAM0K,iBAEV0D,EAAkBA,EAAgBC,OAAOjM,EAAKK,eAK9CzC,EAAM0K,eAAgB,CAC1B1K,EAAMgH,MAAQhH,EAAMgH,MAAMkC,QACxB,SAAC9G,GAAD,QAAYA,EAAKJ,KAAOsD,EAAOwF,SAAW1I,EAAK7B,aAGjD,IAAMmK,EAAiB1K,EAAMgH,MAAMkF,MACjC,SAAC9J,GAAD,aAAUA,EAAKJ,MAAL,UAAYhC,EAAM0K,sBAAlB,aAAY,EAAsB1I,OAExC0I,GAAkB0D,EAAgBE,OAAS,IAE/C5D,EAAejI,UAAY2L,EAAgBC,OACzC3D,EAAejI,YAKrBzC,EAAMwK,WAAa,GACnBxK,EAAM0K,eAAiB,MAqHrB6D,oBA/GA,SAACvO,EAAOsF,GACVA,EAAOwF,QAAQ0D,IACZxI,KAAI,SAAChE,GAAD,OAAQhC,EAAMgH,MAAMkF,MAAK,SAAC9J,GAAD,OAAUA,EAAKJ,KAAOA,QACnD4G,SAAQ,SAACxG,GACJA,IACFA,EAAK7B,UAAW,OA2GpBkO,iBAtGsD,SAACzO,GACzDA,EAAMgH,MAAM4B,SAAQ,SAACxG,GACnBA,EAAK7B,UAAW,MAqGhBmO,UAjGsE,SACxE1O,EACAsF,GAEA,IAAMqJ,EAAgB3O,EAAMgH,MAAMkF,MAAK,SAACjF,GAAD,OAAOA,EAAEjF,KAAOsD,EAAOwF,YAC1D,OAAC6D,QAAD,IAACA,OAAD,EAACA,EAAeC,UAEM,OAAtB5O,EAAMyK,YACRzK,EAAMyK,YAAc,CAClBzI,GAAIsD,EAAOwF,SAEJxF,EAAOwF,UAAY9K,EAAMyK,YAAYzI,KAC9ChC,EAAMyK,YAAYzI,GAAKsD,EAAOwF,WAsF9B+D,eAlFoD,SAAC7O,GAC7B,OAAtBA,EAAMyK,cACRzK,EAAMyK,YAAc,OAiFpBqE,cA7EmD,SAAC9O,GACtDA,EAAM2K,SAAW3K,EAAM2K,SA6ErBoE,UA1E+C,SAAC/O,EAAOsF,GACzDtF,EAAMgH,MACHkC,QAAO,SAAC9G,GAAD,OAAUA,EAAK7B,YACtBqI,SAAQ,SAACxG,GACRA,EAAKwM,QAAUxM,EAAKwM,OACpBxM,EAAKK,UAAYL,EAAKK,UAAUuM,cAsElCC,aAlEyE,SAC3EjP,EACAsF,GACI,IAAD,GApPW,SAAC4J,GAMf,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMZ,OAKlB,IAAMe,GAEXD,EAAcrF,KAAKuF,MAAMvF,KAAKwF,SAAWF,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAuOvBK,EAAQ,UAAAxP,EAAMgH,MAAMkF,MAAK,SAACjF,GAAD,OAAOA,EAAEjF,KAAOsD,EAAOwF,kBAAxC,eAAkDrI,YAAa,KA+DrEgN,WA5DgD,SAACzP,GACnDA,EAAMgH,MAAQ,IA4DZ0I,aAtDA,SAAC1P,EAAOsF,GACV,IAAMqK,EAAuB,CAC3BrQ,EAAGgG,EAAOwF,QAAQlF,SAAStG,EAC3BC,EAAG+F,EAAOwF,QAAQlF,SAASrG,EAC3Be,UAAU,EACVpB,WAAW,EACX0P,QAAQ,EACRjM,KAAM,MACNX,GAAIsL,cACJ7K,UAAW6C,EAAOwF,QAAQ8E,YAAY5J,KAAI,SAAC6J,GAAD,MAAa,CACrDA,aAEFtP,UAAU,EACVuP,aAAc,CACZhN,SAAS,EACTG,UAAU,EACVC,OAAO,IAIXlD,EAAMgH,MAAMgC,KAAK2G,IAmCfI,YA7BA,SAAC/P,EAAOsF,GACV,IAAM0K,EAAehQ,EAAMgH,MAAMkF,MAAK,SAACjF,GAAD,OAAOA,EAAEjF,KAAOsD,EAAOwF,QAAQ9I,MAC/DgO,IACJA,EAAaF,aAAaxK,EAAOwF,QAAQmF,WAAa3K,EAAOwF,QAAQpE,SA4BvEwJ,cAAe,SAACC,GACdA,EAAQC,QAAQrE,GAAU,SAAC/L,EAAOsF,GAChCtF,EAAMgH,MAAQ,GACdhH,EAAMyK,YAAc,KACpBzK,EAAM0K,eAAiB,KACvB1K,EAAMwK,WAAa,GACnBxK,EAAM2K,SAAU,KAGlBwF,EAAQC,QAAQxF,EAAkByF,WAAW,SAACrQ,EAAOsF,GACnDgL,QAAQC,IAAI,gBACZD,QAAQC,IAAIjL,GAEZ,IAAMkL,EAAuB,CAC3BlR,EAAGgG,EAAOwF,QAAQlF,SAAStG,EAC3BC,EAAG+F,EAAOwF,QAAQlF,SAASrG,EAC3Be,UAAU,EACVpB,WAAW,EACX0P,QAAQ,EACRjM,KAAM,MACNX,GAAIsL,cACJ7K,UAAW,CAAC,CAAEoN,OAAQvK,EAAOwF,QAAQS,KAAKC,oBAC1CjL,UAAU,EACVuP,aAAc,CACZhN,SAAS,EACTG,UAAU,EACVC,OAAO,IAIPuN,EAAgC,GACpC/H,OAAOO,QAAQ3D,EAAOwF,QAAQS,KAAKmF,OAAO9H,SAAQ,YAAmB,IAAD,mBAAhBrC,EAAgB,KAAXG,EAAW,KAC5DiK,EAA8BC,MAAMC,KAAKD,MAAMlK,GAAOoK,QAAQ9K,KAClE,iBAAqB,CAAE6J,OAAQtJ,MAEjCkK,EAAgBA,EAAcpC,OAAOsC,MAGvC,IAAMI,EAAchT,EAA2B,GAEzCiT,EAAsB,CAC1B1R,EAAGgG,EAAOwF,QAAQlF,SAAStG,EAAIyR,EAC/BxR,EAAG+F,EAAOwF,QAAQlF,SAASrG,EAC3Be,UAAU,EACVpB,WAAW,EACX0P,QAAQ,EACRjM,KAAM,MACNX,GAAIsL,cACJ7K,UAAWgO,EACXlQ,UAAU,EACVuP,aAAc,CACZhN,SAAS,EACTG,UAAU,EACVC,OAAO,IAIL+N,EAA4B,CAChC3R,EAAGgG,EAAOwF,QAAQlF,SAAStG,EAAkB,EAAdyR,EAC/BxR,EAAG+F,EAAOwF,QAAQlF,SAASrG,EAC3Be,UAAU,EACVpB,WAAW,EACX0P,QAAQ,EACRjM,KAAM,MACNX,GAAIsL,cACJ7K,UAAW6C,EAAOwF,QAAQe,qBAAqB7F,KAAI,SAAC6J,GAAD,MAAa,CAC9DA,aAEFtP,UAAU,EACVuP,aAAc,CACZhN,SAAS,EACTG,UAAU,EACVC,OAAO,IAILgO,EAA6B,CACjC5R,EAAGgG,EAAOwF,QAAQlF,SAAStG,EAAkB,EAAdyR,EAC/BxR,EAAG+F,EAAOwF,QAAQlF,SAASrG,EAC3Be,UAAU,EACVpB,WAAW,EACX0P,QAAQ,EACRjM,KAAM,MACNX,GAAIsL,cACJ7K,UAAW6C,EAAOwF,QAAQgB,sBAAsB9F,KAAI,SAAC6J,GAAD,MAAa,CAC/DA,aAEFtP,UAAU,EACVuP,aAAc,CACZhN,SAAS,EACTG,UAAU,EACVC,OAAO,IAIXlD,EAAMgH,MAAMgC,KAAKwH,EAAUQ,EAASC,EAAeC,S,GAuBrD5E,GAAW6E,QAjBb1E,G,GAAAA,WACAC,G,GAAAA,aACAC,G,GAAAA,iBACAC,G,GAAAA,YACAC,G,GAAAA,cACAW,G,GAAAA,SACAW,G,GAAAA,YACAI,G,GAAAA,oBACAE,G,GAAAA,iBACAC,G,GAAAA,UACAG,G,GAAAA,eACAC,G,GAAAA,cACAC,G,GAAAA,UACAE,G,GAAAA,aAEAS,I,GADAD,W,GACAC,cACAK,G,GAAAA,YAGazD,MAAf,Qahce8E,I,mNAPLjM,eAAiB,SACvBhC,GAEAA,EAAMgC,kB,uDAzBN,IAAMkM,EAAsC,CAC1C1L,IAAI,GAAD,OAAKtB,KAAKnG,MAAM0H,SAASrG,EAAI,EAA7B,MACHsG,KAAK,GAAD,OAAKxB,KAAKnG,MAAM0H,SAAStG,EAAI,EAA7B,OAEN,OACE,qBACE0C,GAAG,YACHZ,QAASiD,KAAKnG,MAAMoT,UACpBxP,cAAeuC,KAAKc,eAHtB,SAKE,qBACEW,UAAU,4BACVC,MAAOsL,EACPvP,cAAeuC,KAAKc,eACpB/D,QAASiD,KAAKnG,MAAMoT,UAJtB,SAMGjN,KAAKnG,MAAMqT,iB,GAlBCtM,cCstBRuM,G,kDA7oBb,WAAYtT,GAAgB,IAAD,8BACzB,cAAMA,IAHDuT,MAA4B,KAER,EAqMnBC,KAAO,aArMY,EAuMnBC,mBAAqB,WAC3B,OAAI,EAAKzT,MAAM8I,MAAMA,MAAMsH,OAAS,EAAU,KAG5C,2GA3MuB,EAiNnBsD,kBAAoB,WAAO,IAAD,EAChC,IAAK,EAAK5R,MAAM6R,gBAAiB,OAAO,KAExC,IAAMC,EAAa,UAAG,EAAKL,aAAR,aAAG,EAAYM,YAAYC,wBACxCC,EAAkB,EAAKjS,MAAMkS,oBACnC,IAAKJ,IAAkBG,EACrB,MAAM,IAAIhF,MAAM,2CAGlB,OACE,cAAC,EAAD,CACErH,SAAU,CACRtG,EAAGwS,EAAcjM,KAAOoM,EAAgB3S,EACxCC,EAAGuS,EAAcnM,IAAMsM,EAAgB1S,GAEzCiG,MAAO,EAAKxF,MAAMmS,iBAClB1M,gBAAiB,kBAAM,EAAK2M,uBAjOP,EAsOnBC,mBAAqB,WAAO,IAAD,EACjC,IAAK,EAAKrS,MAAMsS,iBAAkB,OAAO,KAEzC,IAAMR,EAAa,UAAG,EAAKL,aAAR,aAAG,EAAYM,YAAYC,wBACxCC,EAAkB,EAAKjS,MAAMuS,qBACnC,IAAKT,IAAkBG,EACrB,MAAM,IAAIhF,MAAM,4CAGlB,OACE,cAAC,GAAD,CACErH,SAAU,CACRtG,EAAGwS,EAAcjM,KAAOoM,EAAgB3S,EACxCC,EAAGuS,EAAcnM,IAAMsM,EAAgB1S,GAEzC+R,UAAW,EAAKkB,kBALlB,SAOE,cAAC,EAAD,CACEhM,WAAY,EAAKiM,iBACf,EAAKC,8BAA8B,EAAKjB,aAzPvB,EAgQnBkB,wBAA0B,WAAO,IAAD,EACtC,IAAK,EAAK3S,MAAM4S,sBAAuB,OAAO,KAE9C,IAAMd,EAAa,UAAG,EAAKL,aAAR,aAAG,EAAYM,YAAYC,wBACxCC,EAAkB,EAAKjS,MAAM6S,0BACnC,IAAKf,IAAkBG,EACrB,MAAM,IAAIhF,MAAM,4CAGlB,IAAM6F,EAAM,CACVxT,EAAGwS,EAAcjM,KAAOoM,EAAgB3S,EACxCC,EAAGuS,EAAcnM,IAAMsM,EAAgB1S,GAGzC,OACE,cAAC,GAAD,CAAUqG,SAAUkN,EAAKxB,UAAW,EAAKyB,uBAAzC,SACE,cAAC,EAAD,CACEhM,UAAW,EAAKiM,oBACd,EAAKN,8BAA8B,EAAKjB,aAlRvB,EAyRnBuB,oBAAsB,SAACpN,GAAD,OAAwB,SAACoB,GACrD,EAAK+L,yBACL,EAAK7U,MAAMwR,aAAa,CAAE9J,WAAUgK,YAAa5I,MA3RxB,EA8RnByL,iBAAmB,SAAC7M,GAAD,OAAwB,SAAC5D,GAClD,EAAKwQ,oBACL,EAAKtU,MAAM0M,kBAAkB,CAAEM,WAAYlJ,EAAI4D,eAhStB,EAmSnBwM,iBAAmB,WACzB,EAAKpO,SAAS,CACZ6N,iBAAiB,EACjBK,oBAAqB,KACrBC,iBAAkB,MAvSK,EA2SnBK,kBAAoB,WAC1B,EAAKxO,SAAS,CACZsO,kBAAkB,EAClBC,qBAAsB,QA9SC,EAkTnBQ,uBAAyB,WAC/B,EAAK/O,SAAS,CACZ4O,uBAAuB,EACvBC,0BAA2B,QArTJ,EAyTnBI,sBAAwB,SAAC9P,GAC/B,IAAM+P,EAAW,EAAKR,8BAA8B,EAAKjB,QAEvD,EAAKvT,MAAMyM,SACXjB,EAAY,EAAK1J,MAAMmT,eAAgBD,GAAY,KAEnD,EAAKhV,MAAMuQ,oBA/TY,EAmUnB2E,YAAc,SAACjQ,GAAyC,IAAD,EAG7D,GAFAA,EAAMkQ,IAAIlO,iBAEL,EAAKsM,MAAV,CAEA,IAAI6B,EAAW,EAAKpV,MAAMqV,UAAUC,UAAUlU,EAExCmU,EAAO,UAAG,EAAKhC,MAAMiC,4BAAd,QAAsC,CAAEpU,EAAG,EAAGC,EAAG,GAExDoU,GACAF,EAAQnU,EAAI,EAAKmS,MAAMnS,KAAOgU,EAD9BK,GAEAF,EAAQlU,EAAI,EAAKkS,MAAMlS,KAAO+T,EAG9BM,EACJzQ,EAAMkQ,IAAIvJ,OAAS,EAjZR,KAiZYwJ,EAAsBA,EAjZlC,KAmZb,EAAKpV,MAAM2V,WAAW,CAAEvU,EAAGsU,EAAUrU,EAAGqU,IAExC,IAAME,EAAS,CACbxU,EAAGmU,EAAQnU,EAAIqU,EAAiBC,EAChCrU,EAAGkU,EAAQlU,EAAIoU,EAAiBC,GAGlC,EAAK1V,MAAM6V,eAAeD,KA3VD,EA8VnBE,sBAAwB,SAC9BC,EACA9Q,GACI,IAAD,MACHA,EAAMkQ,IAAIlO,iBACVhC,EAAMI,cAAe,EAGrB,EAAKrF,MAAMuO,WAAWwH,GAEtB,IAAM7R,EAAO,EAAKlE,MAAM8I,MAAMA,MAAMkF,MAAK,SAACjF,GAAD,OAAOA,EAAEjF,KAAOiS,KACnDvR,GAAsB,OAAJN,QAAI,IAAJA,GAAA,UAAAA,EAAMK,iBAAN,eAAiB6L,SAAU,EAC7C4F,GAA0B,OAAJ9R,QAAI,IAAJA,OAAA,EAAAA,EAAM0N,eAAgB,CAChDhN,SAAS,EACTG,UAAU,EACVC,OAAO,GAGHiR,EAAY,CAChB,CACEhO,MAAO,OACPb,OAAQ,WACN,EAAKpH,MAAM6Q,eAKbrM,EAAkB,GACpByR,EAAUnL,KAAK,CACb7C,MAAO,UACPb,OAAQ,WACN,EAAKpH,MAAM+Q,aAAagF,MAK9BE,EAAUnL,KAAK,CACb7C,MAAS+N,EAAoBpR,QAAU,cAAgB,OACvDwC,OAAQ,WACN,EAAKpH,MAAM6R,YAAY,CACrB/N,IAAQ,OAAJI,QAAI,IAAJA,OAAA,EAAAA,EAAMJ,KAAM,GAChBiO,UAAWnS,EAAgBsW,QAC3B1N,OAAQwN,EAAoBpR,aAKlCqR,EAAUnL,KAAK,CACb7C,MAAS+N,EAAoBjR,SAAW,kBAAoB,UAC5DqC,OAAQ,WACN,EAAKpH,MAAM6R,YAAY,CACrB/N,IAAQ,OAAJI,QAAI,IAAJA,OAAA,EAAAA,EAAMJ,KAAM,GAChBiO,UAAWnS,EAAgBuW,SAC3B3N,OAAQwN,EAAoBjR,cAKlCkR,EAAUnL,KAAK,CACb7C,MAAS+N,EAAoBhR,MAAQ,eAAiB,QACtDoC,OAAQ,WACN,EAAKpH,MAAM6R,YAAY,CACrB/N,IAAQ,OAAJI,QAAI,IAAJA,OAAA,EAAAA,EAAMJ,KAAM,GAChBiO,UAAWnS,EAAgBwW,MAC3B5N,OAAQwN,EAAoBhR,WAKlC,EAAKc,SAAS,CACZ6N,iBAAiB,EACjBK,oBAAmB,oBAAE,EAAKT,aAAP,aAAE,EAAYiC,4BAAd,QAAsC,KACzDvB,iBAAkBgC,KAtaK,EA0anBI,uBAAyB,SAACN,GAChC,EAAK/V,MAAMuO,WAAWwH,GACtB,EAAK/V,MAAM0O,YAAYqH,IA5aE,EA+anBO,oBAAsB,SAC5BP,EACA9Q,GAEA,IAAI4J,GAAe,EAMnB,KAFE,EAAK7O,MAAM8I,MAAMA,MAAMkC,QAAO,SAACjC,GAAD,OAAOA,EAAE1G,YAAU+N,OAAS,GAErC,CACrB,IAAMmG,EAAe,EAAKvW,MAAM8I,MAAMA,MAAMkF,MAAK,SAACjF,GAAD,OAAOA,EAAEjF,KAAOiS,KAC3DS,IAAwB,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAchS,YAAa,IAAI6L,OAAS,EAC1D,GAAMmG,GAAgBC,EAAU,CAE9B,IAAMC,EAAkB,CACtBrV,EAAGmV,EAAanV,EAAIvB,EAA2B,EAC/CwB,EAAGkV,EAAalV,EAAIxB,EAA4B,GAEjC2L,EACfiL,EACA,EAAKjC,8BAA8B,EAAKjB,QAE3B,KACb1E,GAAe,IAKrB,EAAK7O,MAAM2O,cAAc,CAAE7K,GAAIiS,EAAQlH,kBA5cd,EA+cnB6H,eAAiB,SAACzR,GACxB,IAAM+D,EAAO/D,EAAM0R,OAAS1R,EAAM2R,QACrB,MAAT5N,EACF,EAAKhJ,MAAM4Q,gBACO,MAAT5H,GACT,EAAKhJ,MAAM6Q,aApdY,EAwdnBgG,0BAA4B,WAAiB,IAAD,IAC5CC,EAAU,oBAAG,EAAKvD,aAAR,aAAG,EAAYiC,4BAAf,QAAuC,CAAEpU,EAAG,EAAGC,EAAG,GAC5D0V,EAAkBC,OAAOC,WAAa,EAC5C,OAAOH,EAAW1V,EAAI2V,EAClB,CACE3V,EAAG4V,OAAOC,WAAapX,EAAmC,EAC1DwB,EAAGxB,EAAoC,GAEzC,CACEuB,EAAGvB,EAAmC,EACtCwB,EAAGxB,EAAoC,IAlepB,EAsenB2U,8BAAgC,SACtCrP,EACA+R,GAEA,IAAMC,EAAYhS,EAAOiS,uBAAuBC,OAChDF,EAAUG,SACV,IAAI1C,EAAMsC,GAAY/R,EAAOqQ,qBAC7B,OAAO2B,EAAUI,MAAM3C,IA7eE,EAgfnBtR,gBAAkB,SAAC2B,GACzB,IAAM2P,EAAM,EAAKJ,8BAA8B,EAAKjB,OAUpD,OARA,EAAKzN,SAAS,CACZmP,eAAgB,CACd7T,EAAGwT,EAAIxT,EACPC,EAAGuT,EAAIvT,GAETmW,WAAW,KAGN,GA3fkB,EA8fnBC,qBAAuB,WAC7B,IAAMxC,EAAiB,EAAKnT,MAAMmT,eAC5ByC,EAAa,EAAK5V,MAAM4V,WAC9B,MAAO,CACLnW,OAAQsK,KAAK8L,IAAID,EAAWnW,QAC5BD,MAAOuK,KAAK8L,IAAID,EAAWpW,OAC3BF,EACEsW,EAAWpW,MAAQ,EACf2T,EAAe7T,EAAIsW,EAAWpW,MAC9B2T,EAAe7T,EACrBC,EACEqW,EAAWnW,OAAS,EAChB0T,EAAe5T,EAAIqW,EAAWnW,OAC9B0T,EAAe5T,IA3gBE,EA+gBnBuW,cAAgB,WAEtB,GAAI,EAAK9V,MAAM+V,mBAAoB,CACjC,IAAMH,EAAa,EAAKD,uBAClBK,EAAuB,EAAK9X,MAAM8I,MAAMA,MAAMiP,QAClD,SAACC,EAAmB9T,GAgBlB,OAfmB+T,SACjBP,EAAWtW,EACXsW,EAAWrW,EACXqW,EAAWpW,MACXoW,EAAWnW,OACX2C,EAAK9C,EAAI,GACT8C,EAAK7C,EAAI,GACTxB,EACAA,IAIAmY,EAAkBlN,KAAK5G,GAGlB8T,IAET,IAGF,EAAKhY,MAAMqQ,oBAAoB,CAC7BC,IAAKwH,EAAchQ,KAAI,SAAC5D,GAAD,OAAUA,EAAKJ,QAa1C,OATA,EAAKgC,SAAS,CACZ+R,oBAAoB,EACpBH,WAAY,CACVnW,OAAQ,EACRD,MAAO,GAETkW,WAAW,KAGN,GAvjBkB,EA0jBnBU,gBAAkB,SAACjT,GACzB,GAAI,EAAKnD,MAAM0V,UAAW,CACxB,IAAM5C,EAAM,EAAKJ,8BAA8BvP,EAAMsD,eACrD,EAAKzC,SAAS,CACZ+R,oBAAoB,EACpBH,WAAY,CACVnW,OAAQqT,EAAIvT,EAAI,EAAKS,MAAMmT,eAAe5T,EAC1CC,MAAOsT,EAAIxT,EAAI,EAAKU,MAAMmT,eAAe7T,KAI/C6D,EAAMI,cAAe,GArkBI,EAwkBnBxB,kBAAoB,SAACoB,GAAiD,IAAD,IAC3EA,EAAMkQ,IAAIlO,iBACVhC,EAAMI,cAAe,EAErB,IAAM4Q,EAAY,CAChB,CACEhO,MAAO,eACPb,OAAQ,WAAO,IAAD,IACZ,EAAKtB,SAAS,CACZsO,kBAAkB,EAClBC,qBAAoB,oBAAE,EAAKd,aAAP,aAAE,EAAYiC,4BAAd,QAAsC,SAIhE,CACEvN,MAAO,iBACPb,OAAQ,WAAO,IAAD,IACZ,EAAKtB,SAAS,CACZ4O,uBAAuB,EACvBC,0BAAyB,oBAAE,EAAKpB,aAAP,aAAE,EAAYiC,4BAAd,QAAsC,SAIrE,CAAEvN,MAAO,QAASb,OAAQ,EAAKpH,MAAM6N,WAGvC,EAAK/H,SAAS,CACZ6N,iBAAiB,EACjBK,oBAAmB,oBAAE,EAAKT,aAAP,aAAE,EAAYiC,4BAAd,QAAsC,KACzDvB,iBAAkBgC,KArmBK,EAymBnBkC,YAAc,SAACjU,GACrB,OAAiD,IAA7CsG,OAAOoI,KAAK,EAAK5S,MAAM8J,WAAWsG,OAAqB,GAE1C,EAAKpQ,MAAM8J,UAAU5F,EAAKK,UAAU,GAAGoN,QAExClE,WA9mBS,EAinBnB2K,UAAY,SAAClU,GACnB,GAAiD,IAA7CsG,OAAOoI,KAAK,EAAK5S,MAAM8J,WAAWsG,OAAc,MAAO,GAE3D,IAAMiI,EAAc,EAAKrY,MAAM8J,UAAU5F,EAAKK,UAAU,GAAGoN,QACrD2G,EAAiB,EAAKtY,MAAM8J,UAChC5F,EAAKK,UAAUL,EAAKK,UAAU6L,OAAS,GAAGuB,QAG5C,OACGzN,EAAKwM,SACH4H,EAAeC,YAAeD,EAAeE,aAQtCtU,EAAKwM,OAKf1K,sCAA4CqS,EAAYI,SAAW,OAJ5DzS,sDANLA,sCAEAsS,EAAeG,SACf,UA9nBJ,EAAK3W,MAAQ,CACX+V,oBAAoB,EACpBH,WAAY,CACVnW,OAAQ,EACRD,MAAO,GAET2T,eAAgB,CACd7T,EAAG,EACHC,EAAG,GAELmW,WAAW,EACX7D,iBAAiB,EACjBK,oBAAqB,KACrBC,iBAAkB,GAClBG,kBAAkB,EAClBC,qBAAsB,KACtBK,uBAAuB,EACvBC,0BAA2B,MApBJ,E,gEAyBzBxO,KAAKnG,MAAM0Y,kB,+BAGI,IAAD,OACRC,EAAcxS,KAAKnG,MAAM8I,MAAMA,MAClCkC,QAAO,SAAC9G,GAAD,OAAWA,EAAK9B,YACvB0F,KAAI,SAAC5D,GAAU,IAAD,EACb,OACE,cAAC,EAAD,CAEEJ,GAAII,EAAKJ,GACT1C,EAAG8C,EAAK9C,EACRC,EAAG6C,EAAK7C,EACRL,UAAWkD,EAAKlD,UAChByD,KAAMP,EAAKO,KACXpC,SAAU6B,EAAK7B,SACfX,WAAYwC,EAAKJ,MAAL,UAAY,EAAK9D,MAAM8I,MAAM0D,sBAA7B,aAAY,EAAiC1I,IACzD1B,SAAU8B,EAAK9B,SACfM,gBAAiB,EAAK4T,oBACtB1T,eAAgB,EAAK5C,MAAMsP,SAC3BxM,cAAe,EAAK9C,MAAMiQ,YAC1BjN,kBAAmB,EAAKqT,uBACxBlT,YAAa,EAAKnD,MAAMyO,iBACxBnJ,YAAa,EAAKtF,MAAMwQ,UACxBjL,iBAAkB,EAAKvF,MAAM2Q,eAC7B9M,kBAAmB,EAAKiS,sBACxBnQ,OAAQ,EAAKyS,UAAUlU,GACvBG,SAAU,EAAK8T,YAAYjU,GAC3BwM,OAAQxM,EAAKwM,OACblM,gBAAiBN,EAAKK,UAAU6L,OAChCzL,UAAW,CACTC,QAASV,EAAK0N,aAAahN,QAC3BG,SAAUb,EAAK0N,aAAa7M,SAC5BC,MAAOd,EAAK0N,aAAa5M,MACzB4T,OAAQ,CAAEC,OAAQ,EAAGC,OAAQ,EAAGC,QAAS,KAzBtC7U,EAAKJ,OA+BZwI,EAAanG,KAAKnG,MAAM8I,MAAMwD,WAAWxE,KAAI,SAAC5D,GAClD,OACE,cAAC,EAAD,CAEEJ,GAAII,EAAKJ,GACT1C,EAAG8C,EAAK9C,EACRC,EAAG6C,EAAK7C,EACRL,UAAWkD,EAAKlD,UAChByD,KAAMP,EAAKO,KACXpC,UAAU,EACVD,UAAU,EACVuD,OAAQ,EAAKyS,UAAUlU,GACvBG,SAAU,EAAK8T,YAAYjU,GAC3BwM,OAAQxM,EAAKwM,OACbnO,SAAS,GAZX,eACe2B,EAAKJ,QAgBlBkV,EAAc7S,KAAKnG,MAAM8I,MAAMA,MAClCkC,QAAO,SAAC9G,GAAD,OAAUA,EAAK9B,YACtB0F,KAAI,SAAC5D,GACJ,OACE,cAAC,EAAD,CAEEJ,GAAII,EAAKJ,GACT1C,EAAG8C,EAAK9C,EACRC,EAAG6C,EAAK7C,EACRL,UAAWkD,EAAKlD,UAChByD,KAAMP,EAAKO,KACXpC,SAAU6B,EAAK7B,SACfD,SAAU8B,EAAK9B,SACfM,gBAAiB,EAAK4T,oBACtB1T,eAAgB,EAAK5C,MAAMsP,SAC3BxM,cAAe,EAAK9C,MAAMiQ,YAC1BjN,kBAAmB,EAAKqT,uBACxBlT,YAAa,EAAKnD,MAAMyO,iBACxB9I,OAAQ,EAAKyS,UAAUlU,GACvBG,SAAU,EAAK8T,YAAYjU,GAC3BwM,OAAQxM,EAAKwM,OACblM,gBAAiBN,EAAKK,UAAU6L,QAhB3BlM,EAAKJ,OAqBZmV,EAAe9S,KAAKoN,MACtBpN,KAAKnG,MAAM8I,MAAMA,MACdkC,QACC,SAAC9G,GAAD,OACG,EAAKpC,MAAM0V,WACZ,EAAKxX,MAAMkZ,eACT,EAAKlZ,MAAM8I,MAAMyD,aACnBrI,EAAKJ,KAAO,EAAK9D,MAAM8I,MAAMyD,YAAYzI,MAE5CgE,KAAI,SAAC5D,GACJ,IAAMiV,EAAS,EAAKtC,4BACduC,EAAa,EAAK5E,8BACtB,EAAKjB,MACL4F,GAEF,OACE,cAAC,EAAD,CAEErV,GAAII,EAAKJ,GACT1C,EAAGgY,EAAWhY,EACdC,EAAG+X,EAAW/X,EACdL,UAAWlB,EAAsB6G,SAC/B,EAAKwR,YAAYjU,IAEnBO,KAAMP,EAAKO,KACXpC,UAAU,EACVD,UAAU,EACVuD,OAAQ,EAAKyS,UAAUlU,GACvBG,SAAU,EAAK8T,YAAYjU,GAC3BwM,OAAQxM,EAAKwM,OACbnP,OAAQ1B,EACRyB,MAAOzB,GAfT,iBACiBqE,EAAKJ,QAkB5B,GAEJ,OACE,sBAAKuV,SAAU,EAAGC,WAAYnT,KAAKuQ,eAAnC,UACGvQ,KAAKsN,qBACLtN,KAAKuN,oBACLvN,KAAKgO,qBACLhO,KAAKsO,0BACN,eAAC,IAAD,CACE8E,IAAK,SAACA,GACCA,IAEL,EAAKhG,MAAQgG,IAEfnY,EAAG+E,KAAKnG,MAAMqV,UAAUmE,cAAcpY,EACtCC,EAAG8E,KAAKnG,MAAMqV,UAAUmE,cAAcnY,EACtCC,MAAO0V,OAAOC,WACd1V,OAAQyV,OAAOyC,YACfvW,QAASiD,KAAK4O,sBACd3R,MAAO+C,KAAK4O,sBACZ1R,YAAa8C,KAAKnG,MAAMyM,QAAUtG,KAAKqN,KAAOrN,KAAK7C,gBACnDoW,UAAWvT,KAAKnG,MAAMyM,QAAUtG,KAAKqN,KAAOrN,KAAKyR,cACjD+B,YAAaxT,KAAKnG,MAAMyM,QAAUtG,KAAKqN,KAAOrN,KAAK+R,gBACnD0B,YAAazT,KAAKnG,MAAMyM,QAAUtG,KAAKqN,KAAOrN,KAAK+R,gBACnDtU,cAAeuC,KAAKtC,kBACpBG,MAAOmC,KAAKnG,MAAMqV,UAAUC,UAC5BuE,QAAS1T,KAAK+O,YACd1S,UAAW2D,KAAKnG,MAAMyM,QACtB9J,WAAYwD,KAAKqN,KACjB3Q,UAAWsD,KAAKqN,KAChBvM,gBAAgB,EAtBlB,UAwBE,cAAC,IAAD,CAAOA,gBAAgB,EAAvB,SACG0R,EACExI,OAAO7D,GACP6D,OAAO6I,GACP7I,OAAO8I,KAEZ,cAAC,IAAD,UACE,cAAC,IAAD,CACE7X,EAAG+E,KAAKrE,MAAMmT,eAAe7T,EAC7BC,EAAG8E,KAAKrE,MAAMmT,eAAe5T,EAC7BC,MAAO6E,KAAKrE,MAAM4V,WAAWpW,MAC7BC,OAAQ4E,KAAKrE,MAAM4V,WAAWnW,OAC9BE,OAAO,sB,GAhMHsF,a,oQCrBZ+S,GAAiBzL,YAAY,CACjC9E,KAAM,YACN8C,aCxC2C,CAC3CpC,SAAU,GACVC,kBAAmB,GACnBZ,QAAS,IDsCTgF,SAAU,CACRoK,cAvDuD,SAAC5W,GAE1DA,EAAMmI,SAAW,GACjBnI,EAAMoI,kBAAoB,GAC1B,IAAM6P,EAAYvP,OAAOO,QAAQiP,GAC9BhP,QAAO,mCAAE3C,EAAF,iBAAmBA,EAAI1B,SAAS,iBACvCmB,KAAI,uDAEDmS,EAAiBzP,OAAOO,QAAQiP,GACnChP,QAAO,mCAAE3C,EAAF,iBAAkBA,EAAI1B,SAAS,iBACtCmB,KAAI,uDAqCP,OAnCAiS,EAAUrP,SAAQ,SAACwP,GAAD,OAChBA,EAAKxP,SAAQ,SAACxG,GACRpC,EAAMmI,SAAS/F,EAAK8E,OACtBoJ,QAAQ+H,MAAM,kCAAoCjW,EAAK8E,MAOzDlH,EAAMmI,SAAS/F,EAAK8E,MAAQ9E,QAIhC+V,EAAevP,SAAQ,SAACwP,GAAD,OACrBA,EAAKxP,SAAQ,SAACxG,GACRpC,EAAMoI,kBAAkBhG,EAAK8E,OAC/BoJ,QAAQ+H,MAAM,kCAAoCjW,EAAK8E,MAOzDlH,EAAMoI,kBAAkBhG,EAAK8E,MAAQ9E,QAIzCkW,GAAQ1P,SAAQ,SAACO,GACfnJ,EAAMwH,QAAQ2B,EAAIjC,MAAQ,CACxBO,KAAM0B,EAAI1B,KACV2B,YAAaD,EAAIoP,uBAIdvY,MAYM4W,GAAkBoB,GAAe7G,QAAjCyF,cAEAoB,MAAf,QElEaQ,GAAW,SAACxY,GAAD,OAAsBA,EAAMgH,OAEvCyR,GAAoBvQ,YAAesQ,IAAU,SAACxR,GACzD,QAASA,EAAMyD,aAAezD,EAAMA,MAAM0R,OAAM,SAACtW,GAAD,OAAWA,EAAK9B,eAGrDqY,GAAa,SAAC3Y,GAAD,OAAsBA,EAAMgH,MAAM2D,SCN/CiO,GAAU,SAAC5Y,GAAD,OAAsBA,EAAM6Y,MCK7CvO,IDHwBpC,YAAe0Q,IAAS,SAACC,GACrD,OAAOA,EAAKrF,aCEwBvJ,EAAU,SAKnCM,GAAwB,2BAJJ,CAC/BiJ,UAAW,CAAElU,EAAG,EAAGC,EAAG,GACtBmY,cAAe,CAAEpY,EAAG,EAAGC,EAAG,KAIvB+K,ICQCwO,GAAYvM,YAAY,CAC5B9E,KAAM,OACN8C,aAAcA,GACdiC,SAAU,CACRqH,WArBwE,SAC1E7T,EACAsF,GAGA,OADAtF,EAAMwT,UAAYlO,EAAOwF,QAClB9K,GAiBL+T,eAXA,SAAC/T,EAAOsF,GAEV,OADAtF,EAAM0X,cAAgBpS,EAAOwF,QACtB9K,IAWPkQ,cAAe,SAACC,GACdA,EAAQC,QAAQrE,GAAU,SAAC/L,EAAOsF,GAChCtF,EAAM0X,cAAgB,CAAEpY,EAAG,EAAGC,EAAG,GACjCS,EAAMwT,UAAY,CAAElU,EAAG,EAAGC,EAAG,S,GAKWuZ,GAAU3H,QAAzC0C,G,GAAAA,WAAYE,G,GAAAA,eAEZ+E,MAAf,QC2BeC,GAxBMtP,aAVG,SAACzJ,GACvB,MAAO,CACLgH,MAAOwR,GAASxY,GAChBgI,UAAWC,EAAqBjI,GAChCoX,YAAaqB,GAAkBzY,GAC/B2K,QAASgO,GAAW3Y,GACpBuT,UAAWqF,GAAQ5Y,MAIuB,CAC5CwN,YACAW,eACAvB,eACAgK,iBACAnK,cACAC,gBACAC,oBACA4B,uBACA1B,iBACA4B,oBACAC,aACAG,kBACAC,iBACAC,aACAE,gBACArE,oBACAiJ,cACAE,kBACAhI,WACA2D,gBACAK,gBArBmBtG,CAsBlB+H,ICrDiBwH,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2D,kCCLSC,GARKC,aAAgB,CAClCR,QACA7R,SACAgB,eCAIsR,GAAuBC,YAAqB,CAChDC,OAAO,EACPC,gBAAgB,EAChBC,mBAAmB,ICHrB,IAAMC,GDMS,WACb,IAAMA,EAAQC,YAAkB,CAC9BC,QAAST,GACTU,WAAYR,KASd,OANAK,EAAMI,UACJC,MAAS,YfPY,SAACha,GACxB,IAAMia,EAAqB,CAAC,aAC5B,IACEvR,OAAOO,QAAQjJ,GAAO4I,SAAQ,YAAmB,IAAD,mBAAhBrC,EAAgB,KAAXG,EAAW,KAC9C,IAAKuT,EAAmBpV,SAAS0B,GAAM,CACrC,IAAM2D,EAAkBC,KAAK+P,UAAUxT,GACvChD,aAAayW,QAAQ5T,EAAK2D,OAG9B,WeDEkQ,CAAUT,EAAMvO,cACf,MAGEuO,EClBKU,GAEdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUb,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJc,SAASC,eAAe,SHwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC5C,GACN/H,QAAQ+H,MAAMA,EAAM6C,c","file":"static/js/main.b06e6307.chunk.js","sourcesContent":["import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      selected: true,\n      dragging: true,\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst addCardStackReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ cardJsonIds: string[]; position: Vector2d }>\n> = (state, action) => {\n  const newStack: ICardStack = {\n    x: action.payload.position.x,\n    y: action.payload.position.y,\n    dragging: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: uuidv4(),\n    cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n      jsonId,\n    })),\n    selected: false,\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n  };\n\n  state.cards.push(newStack);\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n    resetCards: resetCardsReducer,\n    addCardStack: addCardStackReducer,\n    toggleToken: toggleTokenReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCard = null;\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  resetCards,\n  addCardStack,\n  toggleToken,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string) => void;\n  handleDoubleClick?: (id: string) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n  private renderAnimated: boolean = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (localStorage.getItem(\"__render_animated__\")) {\n      this.renderAnimated = true;\n    }\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.img = new Image();\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderAnimated\n      ? this.renderAnimatedCard(heightToUse, widthToUse)\n      : this.renderUnanimatedCard(heightToUse, widthToUse);\n  }\n\n  private renderAnimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  };\n\n  private renderUnanimatedCard = (heightToUse: number, widthToUse: number) => {\n    const scale = this.getScale(widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={this.img}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    return [cardStack, card, stunnedToken, confusedToken, toughToken];\n  };\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrl?.includes(\"standard\") &&\n      this.props.imgUrl?.includes(\"_back\")\n    );\n  }\n\n  private getScale(widthToUse: number, heightToUse: number) {\n    const width = this.state.imageLoaded\n      ? widthToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const widthHorizontal = this.state.imageLoaded\n      ? heightToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const height = this.state.imageLoaded\n      ? heightToUse / this.img.naturalHeight\n      : heightToUse;\n\n    const heightHorizontal = this.state.imageLoaded\n      ? widthToUse / this.img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = () => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: any) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    const menuStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <div\n          className=\"context-menu\"\n          style={menuStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.hideContextMenu}\n        >\n          {this.props.items.map((i, index) => (\n            <div key={`context-menu-item-${index}`}>\n              <button\n                className=\"context-menu-item\"\n                onContextMenu={this.preventDefault}\n                onClick={this.handleContextItemClicked(i)}\n              >\n                {i.label}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      this.props.loadCards(value.cards.map((c) => c.code));\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { StatusTokenType } from \"./cards.slice\";\n\n// import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\nconst defaultState: ICardsState = {\n  cards: [\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 200,\n    //   cardStack: [{ jsonId: \"01001a\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 400,\n    //   y: 400,\n    //   cardStack: [{ jsonId: \"01027\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 600,\n    //   cardStack: [{ jsonId: \"01036\" }],\n    // },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          value.set_code === `${heroSetCode}` &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      data: response.data,\n      relatedEncounterDeck: heroEncounterDeck,\n      relatedObligationDeck: heroObligationDeck,\n    };\n  }\n);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const resetApp = createAction(\"resetAction\");\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.completed}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { StatusTokenType } from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getDistance } from \"./utilities/geo\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrl={this.getImgUrl(card)}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        <Stage\n          ref={(ref) => {\n            if (!ref) return;\n\n            this.stage = ref;\n          }}\n          x={this.props.gameState.stagePosition.x}\n          y={this.props.gameState.stagePosition.y}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={this.handleStageClickOrTap}\n          onTap={this.handleStageClickOrTap}\n          onMouseDown={this.props.panMode ? this.noOp : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? this.noOp : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? this.noOp : this.handleMouseMove}\n          onContextMenu={this.handleContextMenu}\n          scale={this.props.gameState.stageZoom}\n          onWheel={this.handleWheel}\n          draggable={this.props.panMode}\n          onDragMove={this.noOp}\n          onDragEnd={this.noOp}\n          preventDefault={true}\n        >\n          <Layer preventDefault={true}>\n            {staticCards\n              .concat(ghostCards)\n              .concat(movingCards)\n              .concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"\n            />\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard(cardId);\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleSelectAndExhaust = (cardId: string) => {\n    this.props.selectCard(cardId);\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: any) => {\n    const pos = this.getRelativePositionFromTarget(this.stage);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      { label: \"Reset\", action: this.props.resetApp },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n    const bottomCardData = this.props.cardsData[\n      card.cardStack[card.cardStack.length - 1].jsonId\n    ];\n\n    if (\n      !card.faceup &&\n      (!!bottomCardData.back_link || !!bottomCardData.double_sided)\n    ) {\n      return (\n        process.env.PUBLIC_URL +\n        \"/images/cards/\" +\n        bottomCardData.octgn_id +\n        \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + topCardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nconst defaultState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { initialState, IGameState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n    });\n  },\n});\n\nexport const { updateZoom, updatePosition } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  addCardStack,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n  toggleToken,\n} from \"./features/cards/cards.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport { updatePosition, updateZoom } from \"./features/game/game.slice\";\nimport { RootState } from \"./store/rootReducer\";\nimport { resetApp } from \"./store/global.actions\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n});\n\nexport default function configureStore() {\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}