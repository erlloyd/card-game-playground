{"version":3,"sources":["constants/card-constants.ts","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","TopLayer.tsx","utilities/geo.ts","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/cards/cards.async-thunks.ts","features/cards/cards.selectors.ts","store/localStorage.ts","features/cards/initialState.ts","store/global.actions.ts","features/cards/cards.slice.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","HORIZONTAL_TYPE_CODES","Card","props","img","unmounted","renderAnimated","renderAnimatedCard","heightToUse","widthToUse","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","x","y","width","height","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","state","imageLoaded","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","dragging","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","id","renderUnanimatedCard","scale","getScale","card","fillPatternRotation","shouldRenderImageHorizontal","typeCode","cardStackOffset","numCardsInStack","fill","event","dx","target","dy","cancelBubble","handleHover","handleHoverLeave","localStorage","getItem","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","renderCard","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","Component","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","menuStyle","top","position","left","className","style","map","i","index","label","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","EncounterLoader","handleSelected","_event","loadCards","cards","c","code","Autocomplete","options","encounterData","getOptionLabel","option","setData","name","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","createSelector","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","Object","values","forEach","encounterCard","setCode","set_code","push","entries","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","connect","TopLayer","containerStyle","completed","children","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","App","stage","noOp","renderEmptyMessage","length","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","Error","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","pos","clearEncounterImporter","handleLoadEncounter","addCardStack","cardJsonIds","fetchDecklistById","decklistId","handleStageClickOrTap","mousePos","panMode","selectStartPos","unselectAllCards","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","newPos","updatePosition","handleCardContextMenu","cardId","selectCard","find","menuItems","flipCards","cardStack","shuffleStack","handleSelectAndExhaust","exhaustCard","handleCardDragStart","splitTopCard","draggingCard","hasStack","upperRightPoint","startCardMove","handleKeyPress","which","keyCode","togglePanMode","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","reduce","currSelectedCards","Intersects","selectMultipleCards","ids","handleMouseMove","resetApp","getCardType","keys","jsonId","type_code","getImgUrl","topCardData","bottomCardData","faceup","back_link","double_sided","process","octgn_id","loadCardsData","staticCards","dropTargetCard","cardMove","endCardMove","toggleSelectCard","hoverCard","hoverLeaveCard","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","previewPos","tabIndex","onKeyPress","ref","stagePosition","innerHeight","onMouseUp","onMouseMove","onTouchMove","onWheel","concat","cardsDataSlice","createSlice","initialState","reducers","heroPacks","PackData","encounterPacks","pack","console","error","SetData","card_set_type_code","actions","createAsyncThunk","payload","thunkApi","axios","get","response","getState","heroCardsData","heroSetCode","data","investigator_code","encounterCardsData","heroObligationDeck","log","heroEncounterDeck","relatedEncounterDeck","relatedObligationDeck","getCards","shouldShowPreview","every","getPanMode","loadState","serializedState","JSON","parse","err","localStorageState","createAction","getCardStackWithId","mutateCardWithId","callback","cardToUpdate","cardsSlice","unselectCard","cardToStartMoving","cardToMove","topCard","shift","newCard","assign","uuidv4","foreachSelectedCard","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","dropTargetCards","cardToPreview","reverse","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","resetCards","newStack","extraReducers","builder","addCase","fulfilled","heroCard","mainDeckStack","slots","cardDetails","Array","from","cardPadding","newDeck","encounterDeck","obligationDeck","getGame","game","gameSlice","AppContainer","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","store","rtkConfigureStore","reducer","middleware","subscribe","throttle","blacklistStateKeys","stringify","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a8df18f9.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  fill: string;\n  handleClick?: (id: string) => void;\n  handleDoubleClick?: (id: string) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n  private renderAnimated: boolean = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (localStorage.getItem(\"__render_animated__\")) {\n      this.renderAnimated = true;\n    }\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    };\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderAnimated\n      ? this.renderAnimatedCard(heightToUse, widthToUse)\n      : this.renderUnanimatedCard(heightToUse, widthToUse);\n  }\n\n  private renderAnimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  };\n\n  private renderUnanimatedCard = (heightToUse: number, widthToUse: number) => {\n    const scale = this.getScale(widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={this.img}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    return [cardStack, card];\n  };\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrl?.includes(\"standard\") &&\n      this.props.imgUrl?.includes(\"_back\")\n    );\n  }\n\n  private getScale(widthToUse: number, heightToUse: number) {\n    const width = this.state.imageLoaded\n      ? widthToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const widthHorizontal = this.state.imageLoaded\n      ? heightToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const height = this.state.imageLoaded\n      ? heightToUse / this.img.naturalHeight\n      : heightToUse;\n\n    const heightHorizontal = this.state.imageLoaded\n      ? widthToUse / this.img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = () => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: any) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    const menuStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <div\n          className=\"context-menu\"\n          style={menuStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.hideContextMenu}\n        >\n          {this.props.items.map((i, index) => (\n            <div key={`context-menu-item-${index}`}>\n              <button\n                className=\"context-menu-item\"\n                onContextMenu={this.preventDefault}\n                onClick={this.handleContextItemClicked(i)}\n              >\n                {i.label}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    // console.log(this.props.encounterData);\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      this.props.loadCards(value.cards.map((c) => c.code));\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.completed}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getDistance } from \"./utilities/geo\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrl={this.getImgUrl(card)}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        <Stage\n          ref={(ref) => {\n            if (!ref) return;\n\n            this.stage = ref;\n          }}\n          x={this.props.gameState.stagePosition.x}\n          y={this.props.gameState.stagePosition.y}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={this.handleStageClickOrTap}\n          onTap={this.handleStageClickOrTap}\n          onMouseDown={this.props.panMode ? this.noOp : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? this.noOp : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? this.noOp : this.handleMouseMove}\n          onContextMenu={this.handleContextMenu}\n          scale={this.props.gameState.stageZoom}\n          onWheel={this.handleWheel}\n          draggable={this.props.panMode}\n          onDragMove={this.noOp}\n          onDragEnd={this.noOp}\n          preventDefault={true}\n        >\n          <Layer preventDefault={true}>\n            {staticCards\n              .concat(ghostCards)\n              .concat(movingCards)\n              .concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"\n            />\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard(cardId);\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n    }\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleSelectAndExhaust = (cardId: string) => {\n    this.props.selectCard(cardId);\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: any) => {\n    const pos = this.getRelativePositionFromTarget(this.stage);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      { label: \"Reset\", action: this.props.resetApp },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n    const bottomCardData = this.props.cardsData[\n      card.cardStack[card.cardStack.length - 1].jsonId\n    ];\n\n    if (\n      !card.faceup &&\n      (!!bottomCardData.back_link || !!bottomCardData.double_sided)\n    ) {\n      return (\n        process.env.PUBLIC_URL +\n        \"/images/cards/\" +\n        bottomCardData.octgn_id +\n        \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + topCardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          value.set_code === `${heroSetCode}` &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    console.log(heroObligationDeck);\n\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      data: response.data,\n      relatedEncounterDeck: heroEncounterDeck,\n      relatedObligationDeck: heroObligationDeck,\n    };\n  }\n);\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\n\n// import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\nconst defaultState: ICardsState = {\n  cards: [\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 200,\n    //   cardStack: [{ jsonId: \"01001a\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 400,\n    //   y: 400,\n    //   cardStack: [{ jsonId: \"01027\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 600,\n    //   cardStack: [{ jsonId: \"01036\" }],\n    // },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const resetApp = createAction(\"resetAction\");\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      selected: true,\n      dragging: true,\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst addCardStackReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ cardJsonIds: string[]; position: Vector2d }>\n> = (state, action) => {\n  const newStack: ICardStack = {\n    x: action.payload.position.x,\n    y: action.payload.position.y,\n    dragging: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: uuidv4(),\n    cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n      jsonId,\n    })),\n    selected: false,\n  };\n\n  state.cards.push(newStack);\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n    resetCards: resetCardsReducer,\n    addCardStack: addCardStackReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCard = null;\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: mainDeckStack,\n        selected: false,\n      };\n\n      const encounterDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n      };\n\n      const obligationDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  resetCards,\n  addCardStack,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nconst defaultState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { initialState, IGameState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n    });\n  },\n});\n\nexport const { updateZoom, updatePosition } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  addCardStack,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n} from \"./features/cards/cards.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport { updatePosition, updateZoom } from \"./features/game/game.slice\";\nimport { RootState } from \"./store/rootReducer\";\nimport { resetApp } from \"./store/global.actions\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n});\n\nexport default function configureStore() {\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}