{"version":3,"sources":["constants/card-constants.ts","Card.tsx","utilities/geo.ts","App.tsx","features/cards/initialState.ts","features/cards/cards.slice.ts","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/cards/cards.selectors.ts","features/cards-data/cards-data.selectors.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","Card","props","img","unmounted","handleContextMenu","event","id","handleDoubleClick","handleDragStart","handleDragMove","dx","target","x","dy","y","handleDragEnd","dragging","handleClick","cancelBubble","handleMouseDown","handleMouseOver","handleHover","handleMouseOut","handleHoverLeave","state","imageLoaded","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","renderCard","heightToUse","height","widthToUse","width","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","onDragMove","onDragEnd","onDblClick","onDblTap","onClick","onTap","onMouseDown","onTouchStart","onMouseOver","onMouseOut","onContextMenu","Component","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","App","stage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","Error","menuItems","contextMenuItems","map","i","index","className","menuStyle","top","left","clearContextMenu","style","handleCardContextMenu","cardId","evt","preventDefault","card","cards","find","c","cardStack","length","console","log","push","getPointerPosition","handleCardDragStart","splitTopCard","filter","draggingCard","hasStack","upperRightPoint","getRelativePositionFromTarget","startCardMove","handleKeyPress","code","which","keyCode","togglePanMode","flipCards","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","pos","point","currentTarget","selectStartPos","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","reduce","currSelectedCards","Intersects","selectMultipleCards","ids","handleMouseMove","getImgUrl","Object","keys","cardsData","cardData","jsonId","faceup","back_link","process","octgn_id","loadCardsData","staticCards","fill","dropTargetCard","cardMove","endCardMove","exhaustCard","selectCard","hoverCard","hoverLeaveCard","numCardsInStack","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","previewPos","tabIndex","onKeyPress","ref","innerHeight","unselectAllCards","panMode","onMouseUp","onMouseMove","onTouchMove","concat","initialState","uuidv4","getCardStackWithId","cardsSlice","createSlice","name","reducers","action","callback","cardToUpdate","mutateCardWithId","payload","forEach","cardToStartMoving","cardToMove","topCard","shift","newCard","assign","foreachSelectedCard","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","sort","c1","c2","movedCard","splice","indexOf","dropTargetCards","cardToPreview","actions","cardsDataSlice","entities","CoreData","error","getCards","shouldShowPreview","createSelector","every","getPanMode","getCardsDataEntities","AppContainer","connect","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","store","rtkConfigureStore","reducer","middleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cfc80925.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport { KonvaEventObject } from 'konva/types/Node';\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { animated, Spring } from 'react-spring/renderprops-konva';\nimport { cardConstants } from './constants/card-constants';\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\ninterface IProps {\n  dragging: boolean,\n  exhausted: boolean,\n  fill: string,\n  handleClick?: (id: string) => void,\n  handleDoubleClick?: (id: string) => void,\n  handleDragStart?: (id: string, event: MouseEvent) => void,\n  handleDragMove?: (info: {id: string, dx: number, dy: number}) => void,\n  handleDragEnd?: (id: string) => void,\n  handleHover?: (id: string) => void,\n  handleHoverLeave?: (id: string) => void,\n  id: string,\n  selected: boolean,\n  dropTarget?: boolean,\n  x: number,\n  y: number,\n  width?: number,\n  height?: number,\n  imgUrl: string,\n  isGhost?: boolean,\n  numCardsInStack?: number;\n  handleContextMenu?: (id: string, event: KonvaEventObject<PointerEvent>) => void,\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props)\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    }\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (!this.state.imageLoaded && this.props.imgUrl && this.props.imgUrl !== this.img.src) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return (\n      this.state.imageLoaded ?\n      this.renderCard()\n      : null\n    );\n  }\n\n  private renderContext() {\n    // return this.state.showContextMenu ? (\n    //   <Portal key={`${this.props.id}-context`}>\n    //     <div>HI THERE</div>\n    //   </Portal>\n    // ) : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return <Spring\n    key={`${this.props.id}-card`}\n    native={true}\n    to={{\n        rotation: this.props.exhausted ? 90 : 0\n    }}>\n    {(animatedProps: any) => (\n        <animated.Rect\n        {...animatedProps}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={{\n            x: widthToUse / 2,\n            y: heightToUse / 2,\n        }}\n        stroke={this.props.dropTarget ? 'blue' : ''}\n        strokeWidth= {this.props.dropTarget ? 2 : 0}\n        fillPatternImage={this.img}\n        fillPatternScaleX={this.state.imageLoaded ? widthToUse / this.img.naturalWidth : widthToUse}\n        fillPatternScaleY={this.state.imageLoaded ? heightToUse / this.img.naturalHeight : heightToUse}\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n        />\n    )}</Spring>\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n    // console.log('Context Menu in Card!');\n    // event.evt.preventDefault();\n    // event.cancelBubble = true;\n    // if (!!this.props.numCardsInStack && this.props.numCardsInStack > 1) {\n    //   console.log('Can shuffle!');\n    // } else {\n    //   console.log('Can\\'t shuffle!');\n    // }\n  }\n\n  private handleDoubleClick = () => {\n    if(this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  }\n\n  private handleDragStart = (event: MouseEvent) => {\n    if(this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  }\n\n  private handleDragMove = (event: any) => {\n    if(this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y\n      });\n    }\n  }\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  }\n\n  private handleClick = (event: any) => {\n    if(this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  }\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  }\n\n  private handleMouseOver = () => {\n    if(this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  }\n\n  private handleMouseOut = () => {\n    if(this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  }\n};\n\nexport default Card;","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n    const deltaX = point1.x - point2.x;\n    const deltaY = point1.y - point2.y;\n    return Math.sqrt(deltaX*deltaX + deltaY*deltaY);\n}","import * as Intersects from 'intersects';\nimport { Component } from 'react';\nimport * as React from 'react';\nimport { Layer, Rect, Stage } from 'react-konva';\nimport Konva from 'konva';\nimport { cardConstants } from './constants/card-constants';\nimport './App.scss';\nimport Card from './Card';\nimport { ICardStack, ICardsState } from './features/cards/initialState';\nimport { Vector2d } from 'konva/types/types';\nimport { getDistance } from './utilities/geo';\nimport { ICardData } from './features/cards-data/initialState';\nimport { KonvaEventObject } from 'konva/types/Node';\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: {id: string, dx: number, dy: number}) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  startCardMove: (payload: {id: string, splitTopCard: boolean}) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: {ids: string[]}) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  },\n  selectStartPos: {\n    x: number;\n    y: number;\n  },\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: string[];\n}\nclass App extends Component<IProps, IState> {\n\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props)\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    }\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    \n    const staticCards = this.props.cards.cards\n    .filter(card => !card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            numCardsInStack={card.cardStack.length}\n          />\n      )}\n    );\n\n    const ghostCards = this.props.cards.ghostCards\n    .map(\n      card => {\n        return (\n          <Card key={`ghost${card.id}`}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.getImgUrl(card)}\n            isGhost={true}\n          />\n        );\n      }\n    )\n\n    const movingCards = this.props.cards.cards\n    .filter(card => card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            imgUrl={this.getImgUrl(card)}\n          />\n      )}\n    );\n\n    const previewCards = this.props.cards.cards\n    .filter(card => !this.state.selecting && this.props.showPreview && !!this.props.cards.previewCard && (card.id === this.props.cards.previewCard.id))\n    .map(\n      card => {\n        \n        const rawPos = this.getRawPreviewCardPosition();\n        const previewPos = this.getRelativePositionFromTarget(this.stage, rawPos);\n        return (\n        <Card\n            key={`preview${card.id}`}\n            id={card.id}\n            x={previewPos.x}\n            y={previewPos.y}\n            exhausted={false}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.getImgUrl(card)}\n            height={cardConstants.CARD_PREVIEW_HEIGHT}\n            width={cardConstants.CARD_PREVIEW_WIDTH}\n          />\n      )}\n    );\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderContextMenu()}\n        <Stage\n          ref={(ref) => {this.stage = ref;}}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={() => this.props.unselectAllCards()}\n          onTap={() => this.props.unselectAllCards()}\n          onMouseDown={this.props.panMode ? () => {} : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? () => {} : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onContextMenu={this.handleContextMenu}\n          draggable={this.props.panMode}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragStart={() => {console.log('STAGE onDragStart')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragMove={() => {console.log('STAGE onDragMove')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragEnd={() => {console.log('STAGE onDragEnd')}}\n          preventDefault={true}>\n\n          <Layer\n            preventDefault={true}>\n            {staticCards.concat(ghostCards).concat(movingCards).concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"/>\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error('Problem computing context menu position');\n    }\n    \n  const menuItems = this.state.contextMenuItems.map((i, index) => (<div key={`context-menu-item-${index}`} className='context-menu-item'>{i}</div>))\n\n    const menuStyle: React.CSSProperties = {\n      top: `${containerRect.top + pointerPosition.y + 8}px`,\n      left: `${containerRect.left + pointerPosition.x + 8}px`\n    }\n    return this.state.showContextMenu ? (<div id='context-menu-layer' onClick={this.clearContextMenu}> <div className='context-menu' style={menuStyle}>\n      {menuItems}\n    </div></div>) : null;\n  }\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  }\n\n  private handleCardContextMenu = (cardId: string, event: KonvaEventObject<PointerEvent>) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const card = this.props.cards.cards.find(c => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n\n    const menuItems = ['Flip'];\n\n    if (numCardsInStack > 1) {\n      console.log('Can shuffle');\n      menuItems.push('Shuffle');\n    } else {\n      console.log('Cannot shuffle');\n    }\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    })\n  }\n\n  private handleCardDragStart = (cardId: string, event: MouseEvent) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected = this.props.cards.cards.filter(c => c.selected).length > 1;\n\n    if(!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find(c => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = { x: draggingCard.x + cardConstants.CARD_WIDTH/2, y: draggingCard.y - cardConstants.CARD_HEIGHT/2 };\n        const distance = getDistance(upperRightPoint, this.getRelativePositionFromTarget(this.stage));\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n    \n    this.props.startCardMove({id: cardId, splitTopCard});\n  }\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if(code === 115) {\n      this.props.togglePanMode();\n    }\n    else if (code === 102) {\n      this.props.flipCards();\n    }\n  }\n \n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX ? {\n      x: window.innerWidth - (cardConstants.CARD_PREVIEW_WIDTH / 2),\n      y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n    } : \n    {\n      x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n      y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n    };\n  }\n\n  private getRelativePositionFromTarget= (target: any, posParam?: Vector2d) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos);\n  }\n\n  private handleMouseDown = (event: any) => {\n\n    const pos = this.getRelativePositionFromTarget(event.currentTarget);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n  }\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x: selectRect.width < 0 ? selectStartPos.x + selectRect.width : selectStartPos.x,\n      y: selectRect.height < 0 ? selectStartPos.y + selectRect.height : selectStartPos.y,\n    };\n  }\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>( \n        (currSelectedCards, card) =>{\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50, \n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT)\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },[]);\n\n      this.props.selectMultipleCards({ ids: selectedCards.map(card => card.id) });\n    }\n    \n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0\n      },\n      selecting: false,\n    });\n  }\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      })\n    }\n    event.cancelBubble = true;\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    console.log('Context Menu in App!');\n  }\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return '';\n    \n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    if (!card.faceup && !!cardData.back_link) {\n      return process.env.PUBLIC_URL + '/images/cards/' + cardData.octgn_id + '.b.jpg';\n    }\n    else if (!card.faceup) {\n      return process.env.PUBLIC_URL + '/images/standard/card_back.png';\n    } \n\n    return process.env.PUBLIC_URL + '/images/cards/' + cardData.octgn_id + '.jpg';\n  }\n}\n\nexport default App;","import { v4 as uuidv4 } from 'uuid';\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nexport const initialState: ICardsState = {\n  cards: [\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: 'red',\n      id: uuidv4(),\n      selected: false,\n      x: 200,\n      y: 200,\n      cardStack: [{jsonId: '01001a'}],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: 'red',\n      id: uuidv4(),\n      selected: false,\n      x: 400,\n      y: 400,\n      cardStack: [{jsonId: '01027'}],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: 'red',\n      id: uuidv4(),\n      selected: false,\n      x: 200,\n      y: 600,\n      cardStack: [{jsonId: '01036'}],\n    },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n","import { createSlice, PayloadAction, CaseReducer } from '@reduxjs/toolkit'\nimport { getDistance } from '../../utilities/geo';\nimport { initialState, ICardsState, ICardStack, ICardDetails } from './initialState';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\n// Helper methods\nconst getCardStackWithId = (state: ICardsState, id: string ): ICardStack | undefined => {\n  return state.cards.find( (card) => card.id === id);\n}\n\nconst mutateCardWithId = (state: ICardsState, id: string, callback: (card: ICardStack) => void ) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) { callback(cardToUpdate) }\n}\n\nconst foreachSelectedCard = (state: ICardsState, callback: (card: ICardStack) => void ) => {\n  state.cards.filter(card => card.selected).forEach(card => callback(card));\n}\n\nconst foreachUnselectedCard = (state: ICardsState, callback: (card: ICardStack) => void ) => {\n  state.cards.filter(card => !card.selected).forEach(card => callback(card));\n}\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected; \n  });\n}\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (state, action) => {\n  state.cards\n    .filter( card => card.id === action.payload || card.selected)\n    .forEach( (card) => {\n      card.exhausted = !card.exhausted;\n    })\n}\n\nconst startCardMoveReducer: CaseReducer<ICardsState, PayloadAction<{id: string, splitTopCard: boolean}>> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards  \n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map(card => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {    \n    const cardToMove = state.cards.find(c => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error('Expected to find card');\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      cardStack: [topCard]\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, card => { \n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n}\n\nconst cardMoveReducer: CaseReducer<ICardsState, PayloadAction<{id: string, dx: number, dy: number}>> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n  \n  let primaryCard: ICardStack;\n\n  state.cards\n  .filter((card) => card.id === action.payload.id || card.selected)\n  .forEach( (card) => {\n    if(card.id === action.payload.id) {\n      primaryCard = card;\n    }\n\n    card.x += action.payload.dx;\n    card.y += action.payload.dy;\n\n    movedCards.push(card);\n  });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: {distance: number, card: ICardStack}[] = [];\n  foreachUnselectedCard(state, card => {\n    const distance = getDistance(card, primaryCard);\n    if(distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card\n      });\n    }\n  });\n\n  state.dropTargetCard = possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ?? null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time \n  // or something, and the array could be a selector\n  movedCards.forEach(movedCard => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n}\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (state, action) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n  .filter((card) => card.id === action.payload || card.selected)\n  .forEach((card) =>{\n    card.dragging = false;\n\n    if (!!state.dropTargetCard) {\n      // Add the cards to the drop Target card stack\n      dropTargetCards = dropTargetCards.concat(card.cardStack);\n    }\n  });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter((card) => !(card.id === action.payload || card.selected));\n    \n    const dropTargetCard = state.cards.find(card => card.id === state.dropTargetCard?.id);\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(dropTargetCard.cardStack);\n    }\n    \n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n}\n\nconst selectMultipleCardsReducer: CaseReducer<ICardsState, PayloadAction<{ ids: string[]}>> = (state, action) => {\n  action.payload.ids\n  .map( id => state.cards.find(card => card.id === id))\n  .forEach( card => {\n    if (card) {\n      card.selected = true;\n    }\n  });\n}\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach( (card) => {\n    card.selected = false;\n  });\n}\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (state, action) => {\n  const cardToPreview = state.cards.find(c => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    }\n  } else if ( action.payload !== state.previewCard.id) {  \n    state.previewCard.id = action.payload;\n  }\n}\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n}\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n}\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter( card => card.selected)\n    .forEach( (card) => {\n      card.faceup = !card.faceup;\n    })\n}\n// Selectors\n\n\n// slice\n\nconst cardsSlice = createSlice({\n  name: 'cards',\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n  },\n});\n\nexport const { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createSlice, CaseReducer } from '@reduxjs/toolkit'\nimport { initialState, ICardsDataState } from './initialState';\n\nimport CoreData from '../../external/marvelsdb-json-data/pack/core.json';\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  CoreData.forEach(card => {\n    if (state.entities[card.code]) {\n      console.error('Found multiple cards with code ' + card.code);\n    }\n\n    state.entities[card.code] = card;\n  });\n  return state;\n}\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: 'cardsData',\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { \n  loadCardsData,\n} = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from '../../external-api/marvel-card-data';\n\nexport interface ICardData {\n    [key: string]: CardData;\n};\n\nexport interface ICardsDataState {\n    entities: ICardData, \n};\n\nexport const initialState: ICardsDataState = {\n    entities: {}\n};","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../../store/rootReducer';\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every(card => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../../store/rootReducer';\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(getCardsData, (cardsData) => {\n  return cardsData.entities;\n});","import {connect} from 'react-redux';\n// import Types from 'Types';\nimport App from './App';\nimport { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards\n} from './features/cards/cards.slice'\nimport { \n  loadCardsData\n} from './features/cards-data/cards-data.slice'\n// import * as cardActions from './features/cards/actions';\n// import { shouldShowPreview } from './features/cards/selectors';\n// import { get3RandomPlayerCardDatas } from './features/cardsData/selectors';\n// import * as cardThunks from './features/cardsData/thunks';\n// import * as CoreSet from './external/ringsteki-json-data/packs/Core Set.json';\n// import CoreSet from './external/marvelsdb-json-data/pack/core.json'\n\nimport { RootState } from './store/rootReducer';\nimport { shouldShowPreview, getCards, getPanMode } from './features/cards/cards.selectors';\nimport { getCardsDataEntities } from './features/cards-data/cards-data.selectors';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n  }\n}\n\nconst AppContainer = connect(\n  mapStateToProps,\n  {\n    cardMove,\n    endCardMove,\n    exhaustCard,\n    loadCardsData,\n    selectCard,\n    selectMultipleCards,\n    startCardMove,\n    unselectAllCards,\n    hoverCard,\n    hoverLeaveCard,\n    togglePanMode,\n    flipCards,\n  }\n)(App);\n\nexport default AppContainer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport cards from '../features/cards/cards.slice';\nimport cardsData from '../features/cards-data/cards-data.slice'\n\nconst rootReducer = combineReducers({\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import { configureStore as rtkConfigureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: false,\n})\n\nexport default function configureStore() {\n  \n  return rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  })\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}