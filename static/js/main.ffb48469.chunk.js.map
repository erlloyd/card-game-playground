{"version":3,"sources":["constants/card-constants.ts","Card.tsx","utilities/geo.ts","ContextMenu.tsx","TopLayer.tsx","DeckLoader.tsx","EncounterLoader.tsx","App.tsx","features/cards-data/cards-data.selectors.ts","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/cards/cards.async-thunks.ts","features/cards/cards.selectors.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/game/initialState.ts","features/game/game.slice.ts","features/game/game.selectors.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","HORIZONTAL_TYPE_CODES","Card","props","img","unmounted","renderAnimated","renderAnimatedCard","heightToUse","widthToUse","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","x","y","width","height","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","state","imageLoaded","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","dragging","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","id","renderUnanimatedCard","scale","getScale","fillPatternRotation","shouldRenderImageHorizontal","typeCode","event","dx","target","dy","cancelBubble","handleHover","handleHoverLeave","localStorage","getItem","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","renderCard","type","typeCodes","includes","widthHorizontal","heightHorizontal","Component","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","menuStyle","top","position","left","className","style","map","i","index","label","TopLayer","containerStyle","completed","children","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","EncounterLoader","App","stage","noOp","renderEmptyMessage","cards","length","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","Error","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","fetchDecklistById","decklistId","handleStageClickOrTap","mousePos","panMode","selectStartPos","unselectAllCards","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","newPos","updatePosition","handleCardContextMenu","cardId","selectCard","card","find","c","menuItems","flipCards","cardStack","push","shuffleStack","handleSelectAndExhaust","exhaustCard","handleCardDragStart","splitTopCard","filter","draggingCard","hasStack","upperRightPoint","startCardMove","handleKeyPress","code","which","keyCode","togglePanMode","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","pos","point","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","reduce","currSelectedCards","Intersects","selectMultipleCards","ids","handleMouseMove","resetCards","getCardType","Object","keys","cardsData","jsonId","type_code","getImgUrl","cardData","faceup","back_link","process","octgn_id","loadCardsData","staticCards","fill","dropTargetCard","cardMove","endCardMove","toggleSelectCard","hoverCard","hoverLeaveCard","numCardsInStack","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","previewPos","tabIndex","onKeyPress","ref","stagePosition","innerHeight","onMouseUp","onMouseMove","onTouchMove","onWheel","concat","getCardsData","getCardsDataEntities","createSelector","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","cardsDataSlice","createSlice","name","initialState","reducers","heroPacks","entries","PackData","encounterPacks","forEach","pack","console","error","actions","createAsyncThunk","payload","thunkApi","a","axios","get","response","getState","heroCardsData","heroSetCode","data","investigator_code","set_code","encounterCardsData","heroEncounterDeck","relatedEncounterDeck","getCards","shouldShowPreview","every","getPanMode","loadState","serializedState","JSON","parse","err","localStorageState","getCardStackWithId","mutateCardWithId","callback","cardToUpdate","cardsSlice","unselectCard","cardToStartMoving","cardToMove","topCard","shift","newCard","assign","uuidv4","foreachSelectedCard","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","sort","c1","c2","movedCard","splice","indexOf","dropTargetCards","cardToPreview","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","extraReducers","builder","addCase","fulfilled","log","heroCard","mainDeckStack","slots","cardDetails","Array","from","cardPadding","newDeck","encounterDeck","gameSlice","getGame","game","AppContainer","connect","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","store","rtkConfigureStore","reducer","middleware","subscribe","throttle","blacklistStateKeys","stringify","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ffb48469.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  fill: string;\n  handleClick?: (id: string) => void;\n  handleDoubleClick?: (id: string) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n  private renderAnimated: boolean = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (localStorage.getItem(\"__render_animated__\")) {\n      this.renderAnimated = true;\n    }\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    };\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderContext() {\n    // return this.state.showContextMenu ? (\n    //   <Portal key={`${this.props.id}-context`}>\n    //     <div>HI THERE</div>\n    //   </Portal>\n    // ) : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderAnimated\n      ? this.renderAnimatedCard(heightToUse, widthToUse)\n      : this.renderUnanimatedCard(heightToUse, widthToUse);\n  }\n\n  private renderAnimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  };\n\n  private renderUnanimatedCard = (heightToUse: number, widthToUse: number) => {\n    const scale = this.getScale(widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    return (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={this.img}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n  };\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type);\n  }\n\n  private getScale(widthToUse: number, heightToUse: number) {\n    const width = this.state.imageLoaded\n      ? widthToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const widthHorizontal = this.state.imageLoaded\n      ? heightToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const height = this.state.imageLoaded\n      ? heightToUse / this.img.naturalHeight\n      : heightToUse;\n\n    const heightHorizontal = this.state.imageLoaded\n      ? widthToUse / this.img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n    // console.log('Context Menu in Card!');\n    // event.evt.preventDefault();\n    // event.cancelBubble = true;\n    // if (!!this.props.numCardsInStack && this.props.numCardsInStack > 1) {\n    //   console.log('Can shuffle!');\n    // } else {\n    //   console.log('Can\\'t shuffle!');\n    // }\n  };\n\n  private handleDoubleClick = () => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: any) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    const menuStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <div\n          className=\"context-menu\"\n          style={menuStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.hideContextMenu}\n        >\n          {this.props.items.map((i, index) => (\n            <div key={`context-menu-item-${index}`}>\n              <button\n                className=\"context-menu-item\"\n                onContextMenu={this.preventDefault}\n                onClick={this.handleContextItemClicked(i)}\n              >\n                {i.label}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.completed}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return <input onClick={this.cancelBubble}></input>;\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import * as Intersects from \"intersects\";\nimport { Component } from \"react\";\nimport * as React from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport Konva from \"konva\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { ICardStack, ICardsState } from \"./features/cards/initialState\";\nimport { Vector2d } from \"konva/types/types\";\nimport { getDistance } from \"./utilities/geo\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport TopLayer from \"./TopLayer\";\nimport DeckLoader from \"./DeckLoader\";\nimport { IGameState } from \"./features/game/initialState\";\nimport EncounterLoader from \"./EncounterLoader\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetCards: () => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          typeCode={this.getCardType(card)}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrl={this.getImgUrl(card)}\n                typeCode={this.getCardType(card)}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        <Stage\n          ref={(ref) => {\n            if (!ref) return;\n\n            this.stage = ref;\n          }}\n          x={this.props.gameState.stagePosition.x}\n          y={this.props.gameState.stagePosition.y}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={this.handleStageClickOrTap}\n          onTap={this.handleStageClickOrTap}\n          onMouseDown={this.props.panMode ? this.noOp : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? this.noOp : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? this.noOp : this.handleMouseMove}\n          onContextMenu={this.handleContextMenu}\n          scale={this.props.gameState.stageZoom}\n          onWheel={this.handleWheel}\n          draggable={this.props.panMode}\n          preventDefault={true}\n        >\n          <Layer preventDefault={true}>\n            {staticCards\n              .concat(ghostCards)\n              .concat(movingCards)\n              .concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"\n            />\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearEncounterImporter}\n      >\n        <EncounterLoader />\n      </TopLayer>\n    );\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard(cardId);\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n    }\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleSelectAndExhaust = (cardId: string) => {\n    this.props.selectCard(cardId);\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: any) => {\n    const pos = this.getRelativePositionFromTarget(this.stage);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      { label: \"Reset\", action: this.props.resetCards },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    if (!card.faceup && !!cardData.back_link) {\n      return (\n        process.env.PUBLIC_URL + \"/images/cards/\" + cardData.octgn_id + \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + cardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      data: response.data,\n      relatedEncounterDeck: heroEncounterDeck,\n    };\n  }\n);\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\n\n// import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\nconst defaultState: ICardsState = {\n  cards: [\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 200,\n    //   cardStack: [{ jsonId: \"01001a\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 400,\n    //   y: 400,\n    //   cardStack: [{ jsonId: \"01027\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 600,\n    //   cardStack: [{ jsonId: \"01036\" }],\n    // },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      selected: true,\n      dragging: true,\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n    resetCards: resetCardsReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: mainDeckStack,\n        selected: false,\n      };\n\n      const encounterDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  resetCards,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nconst defaultState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { initialState, IGameState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n  },\n});\n\nexport const { updateZoom, updatePosition } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { connect } from \"react-redux\";\n// import Types from 'Types';\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n  resetCards,\n} from \"./features/cards/cards.slice\";\n\nimport { updateZoom, updatePosition } from \"./features/game/game.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetCards,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n});\n\nexport default function configureStore() {\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}