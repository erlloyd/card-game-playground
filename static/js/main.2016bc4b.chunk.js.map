{"version":3,"sources":["constants/card-constants.ts","Card.tsx","utilities/geo.ts","ContextMenu.tsx","TopLayer.tsx","DeckLoader.tsx","App.tsx","features/cards-data/cards-data.selectors.ts","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/cards/cards.async-thunks.ts","features/cards/cards.selectors.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/game/game.slice.ts","features/game/initialState.ts","features/game/game.selectors.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","Card","props","img","unmounted","handleContextMenu","event","id","handleDoubleClick","handleDragStart","handleDragMove","dx","target","x","dy","y","handleDragEnd","dragging","handleClick","cancelBubble","handleMouseDown","handleMouseOver","handleHover","handleMouseOut","handleHoverLeave","state","imageLoaded","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","renderCard","heightToUse","height","widthToUse","width","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","onDragMove","onDragEnd","onDblClick","onDblTap","onClick","onTap","onMouseDown","onTouchStart","onMouseOver","onMouseOut","onContextMenu","Component","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","menuStyle","top","position","left","className","style","map","i","index","label","TopLayer","containerStyle","completed","children","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","type","App","stage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","Error","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","fetchDecklistById","decklistId","handleWheel","evt","oldScale","gameState","stageZoom","newScale","updateZoom","handleCardContextMenu","cardId","selectCard","card","cards","find","c","menuItems","flipCards","cardStack","length","push","shuffleStack","getPointerPosition","handleSelectAndExhaust","exhaustCard","handleCardDragStart","splitTopCard","filter","draggingCard","hasStack","upperRightPoint","startCardMove","handleKeyPress","code","which","keyCode","togglePanMode","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","pos","point","selectStartPos","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","reduce","currSelectedCards","Intersects","selectMultipleCards","ids","handleMouseMove","getImgUrl","Object","keys","cardsData","cardData","jsonId","faceup","back_link","process","octgn_id","loadCardsData","staticCards","fill","dropTargetCard","cardMove","endCardMove","toggleSelectCard","hoverCard","hoverLeaveCard","numCardsInStack","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","previewPos","tabIndex","onKeyPress","ref","innerHeight","stagePosition","unselectAllCards","panMode","onMouseUp","onMouseMove","onTouchMove","scale","onWheel","concat","getCardsDataEntities","createSelector","entities","cardsDataSlice","createSlice","name","initialState","reducers","CoreData","forEach","console","error","actions","createAsyncThunk","payload","a","axios","get","response","data","getCards","shouldShowPreview","every","getPanMode","uuidv4","getCardStackWithId","mutateCardWithId","callback","cardToUpdate","cardsSlice","unselectCard","cardToStartMoving","cardToMove","topCard","shift","newCard","assign","foreachSelectedCard","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","sort","c1","c2","movedCard","splice","indexOf","dropTargetCards","cardToPreview","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","extraReducers","builder","addCase","fulfilled","log","entries","slots","cardDetails","Array","from","newDeck","gameSlice","updatePosition","getGame","game","AppContainer","connect","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","store","rtkConfigureStore","reducer","middleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2016bc4b.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  fill: string;\n  handleClick?: (id: string) => void;\n  handleDoubleClick?: (id: string) => void;\n  handleDragStart?: (id: string, event: MouseEvent) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    };\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderContext() {\n    // return this.state.showContextMenu ? (\n    //   <Portal key={`${this.props.id}-context`}>\n    //     <div>HI THERE</div>\n    //   </Portal>\n    // ) : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n    // console.log('Context Menu in Card!');\n    // event.evt.preventDefault();\n    // event.cancelBubble = true;\n    // if (!!this.props.numCardsInStack && this.props.numCardsInStack > 1) {\n    //   console.log('Can shuffle!');\n    // } else {\n    //   console.log('Can\\'t shuffle!');\n    // }\n  };\n\n  private handleDoubleClick = () => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  };\n\n  private handleDragStart = (event: MouseEvent) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: any) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    const menuStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <div\n          className=\"context-menu\"\n          style={menuStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.hideContextMenu}\n        >\n          {this.props.items.map((i, index) => (\n            <div key={`context-menu-item-${index}`}>\n              <button\n                className=\"context-menu-item\"\n                onContextMenu={this.preventDefault}\n                onClick={this.handleContextItemClicked(i)}\n              >\n                {i.label}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.completed}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import * as Intersects from \"intersects\";\nimport { Component } from \"react\";\nimport * as React from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport Konva from \"konva\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport \"./App.scss\";\nimport Card from \"./Card\";\nimport { ICardStack, ICardsState } from \"./features/cards/initialState\";\nimport { Vector2d } from \"konva/types/types\";\nimport { getDistance } from \"./utilities/geo\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport TopLayer from \"./TopLayer\";\nimport DeckLoader from \"./DeckLoader\";\nimport { IGameState } from \"./features/game/initialState\";\n\nconst SCALE_BY = 1.005;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            imgUrl={this.getImgUrl(card)}\n          />\n        );\n      });\n\n    const previewCards = this.props.cards.cards\n      .filter(\n        (card) =>\n          !this.state.selecting &&\n          this.props.showPreview &&\n          !!this.props.cards.previewCard &&\n          card.id === this.props.cards.previewCard.id\n      )\n      .map((card) => {\n        const rawPos = this.getRawPreviewCardPosition();\n        const previewPos = this.getRelativePositionFromTarget(\n          this.stage,\n          rawPos\n        );\n        return (\n          <Card\n            key={`preview${card.id}`}\n            id={card.id}\n            x={previewPos.x}\n            y={previewPos.y}\n            exhausted={false}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.getImgUrl(card)}\n            height={cardConstants.CARD_PREVIEW_HEIGHT}\n            width={cardConstants.CARD_PREVIEW_WIDTH}\n          />\n        );\n      });\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        <Stage\n          ref={(ref) => {\n            if (!ref) return;\n\n            this.stage = ref;\n            // var scaleBy = 1.005;\n            // this.stage.on(\"wheel\", (e) => {\n            //   if (!this.stage) return;\n            //   e.evt.preventDefault();\n            //   var oldScale = this.stage.scaleX();\n            //   console.log(`oldScale: ${oldScale}`);\n\n            //   var pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n            //   console.log(`pointer: ${JSON.stringify(pointer)}`);\n\n            //   var mousePointTo = {\n            //     x: (pointer.x - this.stage.x()) / oldScale,\n            //     y: (pointer.y - this.stage.y()) / oldScale,\n            //   };\n\n            //   var newScale =\n            //     e.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;\n\n            //   console.log(`newScale: ${newScale}`);\n\n            //   this.stage.scale({ x: newScale, y: newScale });\n\n            //   var newPos = {\n            //     x: pointer.x - mousePointTo.x * newScale,\n            //     y: pointer.y - mousePointTo.y * newScale,\n            //   };\n            //   this.stage.position(newPos);\n            //   this.stage.batchDraw();\n            // });\n          }}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          offset={this.props.gameState.stagePosition}\n          onClick={() => this.props.unselectAllCards()}\n          onTap={() => this.props.unselectAllCards()}\n          onMouseDown={this.props.panMode ? () => {} : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? () => {} : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onContextMenu={this.handleContextMenu}\n          scale={this.props.gameState.stageZoom}\n          onWheel={this.handleWheel}\n          draggable={this.props.panMode}\n          preventDefault={true}\n        >\n          <Layer preventDefault={true}>\n            {staticCards\n              .concat(ghostCards)\n              .concat(movingCards)\n              .concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"\n            />\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n    //   console.log(`oldScale: ${oldScale}`);\n\n    // const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n    //   console.log(`pointer: ${JSON.stringify(pointer)}`);\n\n    // const mousePointTo = {\n    //   x: (pointer.x - this.stage.x()) / oldScale,\n    //   y: (pointer.y - this.stage.y()) / oldScale,\n    // };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    // const newPos = {\n    //   x: pointer.x - mousePointTo.x * newScale,\n    //   y: pointer.y - mousePointTo.y * newScale,\n    // };\n    // This... isn't quite right\n    // this.props.updatePosition(newPos);\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard(cardId);\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n    }\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleSelectAndExhaust = (cardId: string) => {\n    this.props.selectCard(cardId);\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (cardId: string, event: MouseEvent) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos);\n  };\n\n  private handleMouseDown = (event: any) => {\n    const pos = this.getRelativePositionFromTarget(event.currentTarget);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n    });\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      { label: \"Load Encounter\", action: () => {} },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    if (!card.faceup && !!cardData.back_link) {\n      return (\n        process.env.PUBLIC_URL + \"/images/cards/\" + cardData.octgn_id + \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + cardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport CoreData from \"../../external/marvelsdb-json-data/pack/core.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  CoreData.forEach((card) => {\n    if (state.entities[card.code]) {\n      console.error(\"Found multiple cards with code \" + card.code);\n    }\n\n    state.entities[card.code] = card;\n  });\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    return { position: payload.position, data: response.data };\n  }\n);\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;\n","import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nexport const initialState: ICardsState = {\n  cards: [\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: \"red\",\n      id: uuidv4(),\n      selected: false,\n      x: 200,\n      y: 200,\n      cardStack: [{ jsonId: \"01001a\" }],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: \"red\",\n      id: uuidv4(),\n      selected: false,\n      x: 400,\n      y: 400,\n      cardStack: [{ jsonId: \"01027\" }],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: \"red\",\n      id: uuidv4(),\n      selected: false,\n      x: 200,\n      y: 600,\n      cardStack: [{ jsonId: \"01036\" }],\n    },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n      let cardStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        cardStack = cardStack.concat(cardDetails);\n      });\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack,\n        selected: false,\n      };\n\n      state.cards.push(newDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { initialState, IGameState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n  },\n});\n\nexport const { updateZoom, updatePosition } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n}\n\nexport const initialState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { connect } from \"react-redux\";\n// import Types from 'Types';\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n} from \"./features/cards/cards.slice\";\n\nimport { updateZoom, updatePosition } from \"./features/game/game.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n});\n\nexport default function configureStore() {\n  return rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}