{"version":3,"sources":["constants/card-constants.ts","Card.tsx","utilities/geo.ts","ContextMenu.tsx","TopLayer.tsx","DeckLoader.tsx","App.tsx","features/cards-data/cards-data.selectors.ts","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/cards/cards.async-thunks.ts","features/cards/cards.selectors.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/game/game.slice.ts","features/game/initialState.ts","features/game/game.selectors.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","Card","props","img","unmounted","handleContextMenu","event","id","handleDoubleClick","handleDragStart","handleDragMove","dx","target","x","dy","y","handleDragEnd","dragging","handleClick","cancelBubble","handleMouseDown","handleMouseOver","handleHover","handleMouseOut","handleHoverLeave","state","imageLoaded","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","renderCard","heightToUse","height","widthToUse","width","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","onDragMove","onDragEnd","onDblClick","onDblTap","onClick","onTap","onMouseDown","onTouchStart","onMouseOver","onMouseOut","onContextMenu","Component","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","menuStyle","top","position","left","className","style","map","i","index","label","TopLayer","containerStyle","completed","children","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","type","App","stage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","Error","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","fetchDecklistById","decklistId","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","newPos","updatePosition","handleCardContextMenu","cardId","selectCard","card","cards","find","c","menuItems","flipCards","cardStack","length","push","shuffleStack","handleSelectAndExhaust","exhaustCard","handleCardDragStart","splitTopCard","filter","draggingCard","hasStack","upperRightPoint","startCardMove","handleKeyPress","code","which","keyCode","togglePanMode","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","pos","point","selectStartPos","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","reduce","currSelectedCards","Intersects","selectMultipleCards","ids","handleMouseMove","getImgUrl","Object","keys","cardsData","cardData","jsonId","faceup","back_link","process","octgn_id","loadCardsData","staticCards","fill","dropTargetCard","cardMove","endCardMove","toggleSelectCard","hoverCard","hoverLeaveCard","numCardsInStack","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","previewPos","tabIndex","onKeyPress","ref","stagePosition","innerHeight","unselectAllCards","panMode","onMouseUp","onMouseMove","onTouchMove","scale","onWheel","concat","getCardsData","getCardsDataEntities","createSelector","entities","encounterEntities","cardsDataSlice","createSlice","name","initialState","reducers","heroPacks","entries","PackData","includes","encounterPacks","forEach","pack","console","error","actions","createAsyncThunk","payload","a","axios","get","response","data","getCards","shouldShowPreview","every","getPanMode","uuidv4","getCardStackWithId","mutateCardWithId","callback","cardToUpdate","cardsSlice","unselectCard","cardToStartMoving","cardToMove","topCard","shift","newCard","assign","foreachSelectedCard","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","sort","c1","c2","movedCard","splice","indexOf","dropTargetCards","cardToPreview","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","extraReducers","builder","addCase","fulfilled","log","heroCard","investigator_code","mainDeckStack","slots","cardDetails","Array","from","cardPadding","newDeck","gameSlice","getGame","game","AppContainer","connect","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","store","rtkConfigureStore","reducer","middleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2f234052.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  fill: string;\n  handleClick?: (id: string) => void;\n  handleDoubleClick?: (id: string) => void;\n  handleDragStart?: (id: string, event: MouseEvent) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    };\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderContext() {\n    // return this.state.showContextMenu ? (\n    //   <Portal key={`${this.props.id}-context`}>\n    //     <div>HI THERE</div>\n    //   </Portal>\n    // ) : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n    // console.log('Context Menu in Card!');\n    // event.evt.preventDefault();\n    // event.cancelBubble = true;\n    // if (!!this.props.numCardsInStack && this.props.numCardsInStack > 1) {\n    //   console.log('Can shuffle!');\n    // } else {\n    //   console.log('Can\\'t shuffle!');\n    // }\n  };\n\n  private handleDoubleClick = () => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  };\n\n  private handleDragStart = (event: MouseEvent) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: any) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    const menuStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <div\n          className=\"context-menu\"\n          style={menuStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.hideContextMenu}\n        >\n          {this.props.items.map((i, index) => (\n            <div key={`context-menu-item-${index}`}>\n              <button\n                className=\"context-menu-item\"\n                onContextMenu={this.preventDefault}\n                onClick={this.handleContextItemClicked(i)}\n              >\n                {i.label}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.completed}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import * as Intersects from \"intersects\";\nimport { Component } from \"react\";\nimport * as React from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport Konva from \"konva\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport \"./App.scss\";\nimport Card from \"./Card\";\nimport { ICardStack, ICardsState } from \"./features/cards/initialState\";\nimport { Vector2d } from \"konva/types/types\";\nimport { getDistance } from \"./utilities/geo\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport TopLayer from \"./TopLayer\";\nimport DeckLoader from \"./DeckLoader\";\nimport { IGameState } from \"./features/game/initialState\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            imgUrl={this.getImgUrl(card)}\n          />\n        );\n      });\n\n    const previewCards = this.props.cards.cards\n      .filter(\n        (card) =>\n          !this.state.selecting &&\n          this.props.showPreview &&\n          !!this.props.cards.previewCard &&\n          card.id === this.props.cards.previewCard.id\n      )\n      .map((card) => {\n        const rawPos = this.getRawPreviewCardPosition();\n        const previewPos = this.getRelativePositionFromTarget(\n          this.stage,\n          rawPos\n        );\n        return (\n          <Card\n            key={`preview${card.id}`}\n            id={card.id}\n            x={previewPos.x}\n            y={previewPos.y}\n            exhausted={false}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.getImgUrl(card)}\n            height={cardConstants.CARD_PREVIEW_HEIGHT}\n            width={cardConstants.CARD_PREVIEW_WIDTH}\n          />\n        );\n      });\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        <Stage\n          ref={(ref) => {\n            if (!ref) return;\n\n            this.stage = ref;\n          }}\n          x={this.props.gameState.stagePosition.x}\n          y={this.props.gameState.stagePosition.y}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={() => this.props.unselectAllCards()}\n          onTap={() => this.props.unselectAllCards()}\n          onMouseDown={this.props.panMode ? () => {} : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? () => {} : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onContextMenu={this.handleContextMenu}\n          scale={this.props.gameState.stageZoom}\n          onWheel={this.handleWheel}\n          draggable={this.props.panMode}\n          preventDefault={true}\n        >\n          <Layer preventDefault={true}>\n            {staticCards\n              .concat(ghostCards)\n              .concat(movingCards)\n              .concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"\n            />\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard(cardId);\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n    }\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleSelectAndExhaust = (cardId: string) => {\n    this.props.selectCard(cardId);\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (cardId: string, event: MouseEvent) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos);\n  };\n\n  private handleMouseDown = (event: any) => {\n    const pos = this.getRelativePositionFromTarget(event.currentTarget);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n    });\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      { label: \"Load Encounter\", action: () => {} },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    if (!card.faceup && !!cardData.back_link) {\n      return (\n        process.env.PUBLIC_URL + \"/images/cards/\" + cardData.octgn_id + \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + cardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    return { position: payload.position, data: response.data };\n  }\n);\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;\n","import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nexport const initialState: ICardsState = {\n  cards: [\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: \"red\",\n      id: uuidv4(),\n      selected: false,\n      x: 200,\n      y: 200,\n      cardStack: [{ jsonId: \"01001a\" }],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: \"red\",\n      id: uuidv4(),\n      selected: false,\n      x: 400,\n      y: 400,\n      cardStack: [{ jsonId: \"01027\" }],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: \"red\",\n      id: uuidv4(),\n      selected: false,\n      x: 200,\n      y: 600,\n      cardStack: [{ jsonId: \"01036\" }],\n    },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: mainDeckStack,\n        selected: false,\n      };\n\n      state.cards.push(heroCard, newDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { initialState, IGameState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n  },\n});\n\nexport const { updateZoom, updatePosition } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n}\n\nexport const initialState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { connect } from \"react-redux\";\n// import Types from 'Types';\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n} from \"./features/cards/cards.slice\";\n\nimport { updateZoom, updatePosition } from \"./features/game/game.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n});\n\nexport default function configureStore() {\n  return rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}