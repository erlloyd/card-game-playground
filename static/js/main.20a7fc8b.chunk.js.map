{"version":3,"sources":["constants/card-constants.ts","Card.tsx","utilities/geo.ts","App.tsx","features/cards/initialState.ts","features/cards/cards.slice.ts","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/cards/cards.selectors.ts","features/cards-data/cards-data.selectors.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","Card","props","img","unmounted","handleContextMenu","event","id","handleDoubleClick","handleDragStart","handleDragMove","dx","target","x","dy","y","handleDragEnd","dragging","handleClick","cancelBubble","handleMouseDown","handleMouseOver","handleHover","handleMouseOut","handleHoverLeave","state","imageLoaded","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","renderCard","heightToUse","height","widthToUse","width","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","onDragMove","onDragEnd","onDblClick","onDblTap","onClick","onTap","onMouseDown","onTouchStart","onMouseOver","onMouseOut","onContextMenu","Component","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","App","stage","handleCardContextMenu","cardId","evt","preventDefault","card","cards","find","c","cardStack","length","console","log","handleCardDragStart","splitTopCard","filter","draggingCard","hasStack","upperRightPoint","getRelativePositionFromTarget","startCardMove","handleKeyPress","code","which","keyCode","togglePanMode","flipCards","getRawPreviewCardPosition","pointerPos","getPointerPosition","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","pos","point","currentTarget","selectStartPos","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","reduce","currSelectedCards","Intersects","push","selectMultipleCards","ids","map","handleMouseMove","getImgUrl","Object","keys","cardsData","cardData","jsonId","faceup","back_link","process","octgn_id","showContextMenu","contextMenuPosition","loadCardsData","staticCards","fill","dropTargetCard","cardMove","endCardMove","exhaustCard","selectCard","hoverCard","hoverLeaveCard","numCardsInStack","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","previewPos","tabIndex","onKeyPress","ref","innerHeight","unselectAllCards","panMode","onMouseUp","onMouseMove","onTouchMove","concat","initialState","uuidv4","getCardStackWithId","cardsSlice","createSlice","name","reducers","action","callback","cardToUpdate","mutateCardWithId","payload","forEach","cardToStartMoving","cardToMove","Error","topCard","shift","newCard","assign","foreachSelectedCard","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","sort","c1","c2","movedCard","splice","indexOf","dropTargetCards","cardToPreview","actions","cardsDataSlice","entities","CoreData","error","getCards","shouldShowPreview","createSelector","every","getPanMode","getCardsDataEntities","AppContainer","connect","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","store","rtkConfigureStore","reducer","middleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.20a7fc8b.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport { KonvaEventObject } from 'konva/types/Node';\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { animated, Spring } from 'react-spring/renderprops-konva';\nimport { cardConstants } from './constants/card-constants';\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\ninterface IProps {\n  dragging: boolean,\n  exhausted: boolean,\n  fill: string,\n  handleClick?: (id: string) => void,\n  handleDoubleClick?: (id: string) => void,\n  handleDragStart?: (id: string, event: MouseEvent) => void,\n  handleDragMove?: (info: {id: string, dx: number, dy: number}) => void,\n  handleDragEnd?: (id: string) => void,\n  handleHover?: (id: string) => void,\n  handleHoverLeave?: (id: string) => void,\n  id: string,\n  selected: boolean,\n  dropTarget?: boolean,\n  x: number,\n  y: number,\n  width?: number,\n  height?: number,\n  imgUrl: string,\n  isGhost?: boolean,\n  numCardsInStack?: number;\n  handleContextMenu?: (id: string, event: KonvaEventObject<PointerEvent>) => void,\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props)\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    }\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (!this.state.imageLoaded && this.props.imgUrl && this.props.imgUrl !== this.img.src) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return (\n      this.state.imageLoaded ?\n      this.renderCard()\n      : null\n    );\n  }\n\n  private renderContext() {\n    // return this.state.showContextMenu ? (\n    //   <Portal key={`${this.props.id}-context`}>\n    //     <div>HI THERE</div>\n    //   </Portal>\n    // ) : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return <Spring\n    key={`${this.props.id}-card`}\n    native={true}\n    to={{\n        rotation: this.props.exhausted ? 90 : 0\n    }}>\n    {(animatedProps: any) => (\n        <animated.Rect\n        {...animatedProps}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={{\n            x: widthToUse / 2,\n            y: heightToUse / 2,\n        }}\n        stroke={this.props.dropTarget ? 'blue' : ''}\n        strokeWidth= {this.props.dropTarget ? 2 : 0}\n        fillPatternImage={this.img}\n        fillPatternScaleX={this.state.imageLoaded ? widthToUse / this.img.naturalWidth : widthToUse}\n        fillPatternScaleY={this.state.imageLoaded ? heightToUse / this.img.naturalHeight : heightToUse}\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n        />\n    )}</Spring>\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n    // console.log('Context Menu in Card!');\n    // event.evt.preventDefault();\n    // event.cancelBubble = true;\n    // if (!!this.props.numCardsInStack && this.props.numCardsInStack > 1) {\n    //   console.log('Can shuffle!');\n    // } else {\n    //   console.log('Can\\'t shuffle!');\n    // }\n  }\n\n  private handleDoubleClick = () => {\n    if(this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  }\n\n  private handleDragStart = (event: MouseEvent) => {\n    if(this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  }\n\n  private handleDragMove = (event: any) => {\n    if(this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y\n      });\n    }\n  }\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  }\n\n  private handleClick = (event: any) => {\n    if(this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  }\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  }\n\n  private handleMouseOver = () => {\n    if(this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  }\n\n  private handleMouseOut = () => {\n    if(this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  }\n};\n\nexport default Card;","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n    const deltaX = point1.x - point2.x;\n    const deltaY = point1.y - point2.y;\n    return Math.sqrt(deltaX*deltaX + deltaY*deltaY);\n}","import * as Intersects from 'intersects';\nimport { Component } from 'react';\nimport * as React from 'react';\nimport { Layer, Rect, Stage } from 'react-konva';\nimport Konva from 'konva';\nimport { cardConstants } from './constants/card-constants';\nimport './App.css';\nimport Card from './Card';\nimport { ICardStack, ICardsState } from './features/cards/initialState';\nimport { Vector2d } from 'konva/types/types';\nimport { getDistance } from './utilities/geo';\nimport { ICardData } from './features/cards-data/initialState';\nimport { KonvaEventObject } from 'konva/types/Node';\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: {id: string, dx: number, dy: number}) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  startCardMove: (payload: {id: string, splitTopCard: boolean}) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: {ids: string[]}) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  },\n  selectStartPos: {\n    x: number;\n    y: number;\n  },\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: {\n    x: number;\n    y: number;\n  } | null;\n}\nclass App extends Component<IProps, IState> {\n\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props)\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n    }\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    \n    const staticCards = this.props.cards.cards\n    .filter(card => !card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            numCardsInStack={card.cardStack.length}\n          />\n      )}\n    );\n\n    const ghostCards = this.props.cards.ghostCards\n    .map(\n      card => {\n        return (\n          <Card key={`ghost${card.id}`}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.getImgUrl(card)}\n            isGhost={true}\n          />\n        );\n      }\n    )\n\n    const movingCards = this.props.cards.cards\n    .filter(card => card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            imgUrl={this.getImgUrl(card)}\n          />\n      )}\n    );\n\n    const previewCards = this.props.cards.cards\n    .filter(card => !this.state.selecting && this.props.showPreview && !!this.props.cards.previewCard && (card.id === this.props.cards.previewCard.id))\n    .map(\n      card => {\n        \n        const rawPos = this.getRawPreviewCardPosition();\n        const previewPos = this.getRelativePositionFromTarget(this.stage, rawPos);\n        return (\n        <Card\n            key={`preview${card.id}`}\n            id={card.id}\n            x={previewPos.x}\n            y={previewPos.y}\n            exhausted={false}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.getImgUrl(card)}\n            height={cardConstants.CARD_PREVIEW_HEIGHT}\n            width={cardConstants.CARD_PREVIEW_WIDTH}\n          />\n      )}\n    );\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        <Stage\n          ref={(ref) => {this.stage = ref;}}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={() => this.props.unselectAllCards()}\n          onTap={() => this.props.unselectAllCards()}\n          onMouseDown={this.props.panMode ? () => {} : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? () => {} : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onContextMenu={this.handleContextMenu}\n          draggable={this.props.panMode}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragStart={() => {console.log('STAGE onDragStart')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragMove={() => {console.log('STAGE onDragMove')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragEnd={() => {console.log('STAGE onDragEnd')}}\n          preventDefault={true}>\n\n          <Layer\n            preventDefault={true}>\n            {staticCards.concat(ghostCards).concat(movingCards).concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"/>\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private handleCardContextMenu = (cardId: string, event: KonvaEventObject<PointerEvent>) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const card = this.props.cards.cards.find(c => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    if (numCardsInStack > 1) {\n      console.log('Can shuffle');\n    } else {\n      console.log('Cannot shuffle');\n    }\n  }\n\n  private handleCardDragStart = (cardId: string, event: MouseEvent) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected = this.props.cards.cards.filter(c => c.selected).length > 1;\n\n    if(!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find(c => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = { x: draggingCard.x + cardConstants.CARD_WIDTH/2, y: draggingCard.y - cardConstants.CARD_HEIGHT/2 };\n        const distance = getDistance(upperRightPoint, this.getRelativePositionFromTarget(this.stage));\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n    \n    this.props.startCardMove({id: cardId, splitTopCard});\n  }\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if(code === 115) {\n      this.props.togglePanMode();\n    }\n    else if (code === 102) {\n      this.props.flipCards();\n    }\n  }\n \n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX ? {\n      x: window.innerWidth - (cardConstants.CARD_PREVIEW_WIDTH / 2),\n      y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n    } : \n    {\n      x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n      y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n    };\n  }\n\n  private getRelativePositionFromTarget= (target: any, posParam?: Vector2d) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos);\n  }\n\n  private handleMouseDown = (event: any) => {\n\n    const pos = this.getRelativePositionFromTarget(event.currentTarget);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n  }\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x: selectRect.width < 0 ? selectStartPos.x + selectRect.width : selectStartPos.x,\n      y: selectRect.height < 0 ? selectStartPos.y + selectRect.height : selectStartPos.y,\n    };\n  }\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>( \n        (currSelectedCards, card) =>{\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50, \n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT)\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },[]);\n\n      this.props.selectMultipleCards({ ids: selectedCards.map(card => card.id) });\n    }\n    \n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0\n      },\n      selecting: false,\n    });\n  }\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      })\n    }\n    event.cancelBubble = true;\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    console.log('Context Menu in App!');\n  }\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return '';\n    \n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    if (!card.faceup && !!cardData.back_link) {\n      return process.env.PUBLIC_URL + '/images/cards/' + cardData.octgn_id + '.b.jpg';\n    }\n    else if (!card.faceup) {\n      return process.env.PUBLIC_URL + '/images/standard/card_back.png';\n    } \n\n    return process.env.PUBLIC_URL + '/images/cards/' + cardData.octgn_id + '.jpg';\n  }\n}\n\nexport default App;","import { v4 as uuidv4 } from 'uuid';\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nexport const initialState: ICardsState = {\n  cards: [\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: 'red',\n      id: uuidv4(),\n      selected: false,\n      x: 200,\n      y: 200,\n      cardStack: [{jsonId: '01001a'}],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: 'red',\n      id: uuidv4(),\n      selected: false,\n      x: 400,\n      y: 400,\n      cardStack: [{jsonId: '01027'}],\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      faceup: true,\n      fill: 'red',\n      id: uuidv4(),\n      selected: false,\n      x: 200,\n      y: 600,\n      cardStack: [{jsonId: '01036'}],\n    },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n","import { createSlice, PayloadAction, CaseReducer } from '@reduxjs/toolkit'\nimport { getDistance } from '../../utilities/geo';\nimport { initialState, ICardsState, ICardStack, ICardDetails } from './initialState';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\n// Helper methods\nconst getCardStackWithId = (state: ICardsState, id: string ): ICardStack | undefined => {\n  return state.cards.find( (card) => card.id === id);\n}\n\nconst mutateCardWithId = (state: ICardsState, id: string, callback: (card: ICardStack) => void ) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) { callback(cardToUpdate) }\n}\n\nconst foreachSelectedCard = (state: ICardsState, callback: (card: ICardStack) => void ) => {\n  state.cards.filter(card => card.selected).forEach(card => callback(card));\n}\n\nconst foreachUnselectedCard = (state: ICardsState, callback: (card: ICardStack) => void ) => {\n  state.cards.filter(card => !card.selected).forEach(card => callback(card));\n}\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected; \n  });\n}\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (state, action) => {\n  state.cards\n    .filter( card => card.id === action.payload || card.selected)\n    .forEach( (card) => {\n      card.exhausted = !card.exhausted;\n    })\n}\n\nconst startCardMoveReducer: CaseReducer<ICardsState, PayloadAction<{id: string, splitTopCard: boolean}>> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards  \n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map(card => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {    \n    const cardToMove = state.cards.find(c => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error('Expected to find card');\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      cardStack: [topCard]\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, card => { \n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n}\n\nconst cardMoveReducer: CaseReducer<ICardsState, PayloadAction<{id: string, dx: number, dy: number}>> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n  \n  let primaryCard: ICardStack;\n\n  state.cards\n  .filter((card) => card.id === action.payload.id || card.selected)\n  .forEach( (card) => {\n    if(card.id === action.payload.id) {\n      primaryCard = card;\n    }\n\n    card.x += action.payload.dx;\n    card.y += action.payload.dy;\n\n    movedCards.push(card);\n  });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: {distance: number, card: ICardStack}[] = [];\n  foreachUnselectedCard(state, card => {\n    const distance = getDistance(card, primaryCard);\n    if(distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card\n      });\n    }\n  });\n\n  state.dropTargetCard = possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ?? null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time \n  // or something, and the array could be a selector\n  movedCards.forEach(movedCard => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n}\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (state, action) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n  .filter((card) => card.id === action.payload || card.selected)\n  .forEach((card) =>{\n    card.dragging = false;\n\n    if (!!state.dropTargetCard) {\n      // Add the cards to the drop Target card stack\n      dropTargetCards = dropTargetCards.concat(card.cardStack);\n    }\n  });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter((card) => !(card.id === action.payload || card.selected));\n    \n    const dropTargetCard = state.cards.find(card => card.id === state.dropTargetCard?.id);\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(dropTargetCard.cardStack);\n    }\n    \n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n}\n\nconst selectMultipleCardsReducer: CaseReducer<ICardsState, PayloadAction<{ ids: string[]}>> = (state, action) => {\n  action.payload.ids\n  .map( id => state.cards.find(card => card.id === id))\n  .forEach( card => {\n    if (card) {\n      card.selected = true;\n    }\n  });\n}\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach( (card) => {\n    card.selected = false;\n  });\n}\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (state, action) => {\n  const cardToPreview = state.cards.find(c => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    }\n  } else if ( action.payload !== state.previewCard.id) {  \n    state.previewCard.id = action.payload;\n  }\n}\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n}\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n}\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter( card => card.selected)\n    .forEach( (card) => {\n      card.faceup = !card.faceup;\n    })\n}\n// Selectors\n\n\n// slice\n\nconst cardsSlice = createSlice({\n  name: 'cards',\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n  },\n});\n\nexport const { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createSlice, CaseReducer } from '@reduxjs/toolkit'\nimport { initialState, ICardsDataState } from './initialState';\n\nimport CoreData from '../../external/marvelsdb-json-data/pack/core.json';\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  CoreData.forEach(card => {\n    if (state.entities[card.code]) {\n      console.error('Found multiple cards with code ' + card.code);\n    }\n\n    state.entities[card.code] = card;\n  });\n  return state;\n}\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: 'cardsData',\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { \n  loadCardsData,\n} = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from '../../external-api/marvel-card-data';\n\nexport interface ICardData {\n    [key: string]: CardData;\n};\n\nexport interface ICardsDataState {\n    entities: ICardData, \n};\n\nexport const initialState: ICardsDataState = {\n    entities: {}\n};","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../../store/rootReducer';\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every(card => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../../store/rootReducer';\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(getCardsData, (cardsData) => {\n  return cardsData.entities;\n});","import {connect} from 'react-redux';\n// import Types from 'Types';\nimport App from './App';\nimport { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards\n} from './features/cards/cards.slice'\nimport { \n  loadCardsData\n} from './features/cards-data/cards-data.slice'\n// import * as cardActions from './features/cards/actions';\n// import { shouldShowPreview } from './features/cards/selectors';\n// import { get3RandomPlayerCardDatas } from './features/cardsData/selectors';\n// import * as cardThunks from './features/cardsData/thunks';\n// import * as CoreSet from './external/ringsteki-json-data/packs/Core Set.json';\n// import CoreSet from './external/marvelsdb-json-data/pack/core.json'\n\nimport { RootState } from './store/rootReducer';\nimport { shouldShowPreview, getCards, getPanMode } from './features/cards/cards.selectors';\nimport { getCardsDataEntities } from './features/cards-data/cards-data.selectors';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n  }\n}\n\nconst AppContainer = connect(\n  mapStateToProps,\n  {\n    cardMove,\n    endCardMove,\n    exhaustCard,\n    loadCardsData,\n    selectCard,\n    selectMultipleCards,\n    startCardMove,\n    unselectAllCards,\n    hoverCard,\n    hoverLeaveCard,\n    togglePanMode,\n    flipCards,\n  }\n)(App);\n\nexport default AppContainer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport cards from '../features/cards/cards.slice';\nimport cardsData from '../features/cards-data/cards-data.slice'\n\nconst rootReducer = combineReducers({\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import { configureStore as rtkConfigureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: false,\n})\n\nexport default function configureStore() {\n  \n  return rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  })\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}