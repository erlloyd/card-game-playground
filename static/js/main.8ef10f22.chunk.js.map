{"version":3,"sources":["features/cards/cards.slice.ts","constants/card-constants.ts","CardTokens.tsx","features/cards/cards.selectors.ts","CardTokensContainer.tsx","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.async-thunks.ts","store/global.actions.ts","TopLayer.tsx","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["StatusTokenType","cardConstants","CardTokens","props","damageImg","threatImg","genericImg","unmounted","state","imagesLoaded","damage","threat","generic","Image","onload","setState","src","process","this","damageX","x","naturalWidth","damageY","y","damageToken","width","height","naturalHeight","fillPatternImage","card","id","damageText","text","fill","align","verticalAlign","fontSize","threatX","threatY","threatToken","threatText","genericX","genericY","Component","getCards","cards","getCardMapById","createSelector","reduce","map","shouldShowPreview","previewCard","every","dragging","getPanMode","panMode","CardTokensContainer","connect","HORIZONTAL_TYPE_CODES","Card","img","stunnedImg","confusedImg","toughImg","renderAnimated","renderAnimatedCard","heightToUse","widthToUse","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternScaleX","imageLoaded","fillPatternScaleY","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","renderUnanimatedCard","scale","getScale","fillPatternRotation","shouldRenderImageHorizontal","typeCode","cardStackOffset","cardStack","numCardsInStack","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","getTokenInSlot","confused","tough","event","dx","target","dy","cancelBubble","handleHover","handleHoverLeave","localStorage","getItem","prevImgUrl","imgUrl","prevProps","prevState","renderCard","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","menuStyle","top","position","left","className","style","i","index","label","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","EncounterLoader","handleSelected","_event","loadCards","c","code","Autocomplete","options","encounterData","getOptionLabel","option","setData","name","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","Object","values","forEach","encounterCard","setCode","set_code","push","entries","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","loadState","serializedState","JSON","parse","err","localStorageState","initialState","ghostCards","dropTargetCard","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSetCode","data","investigator_code","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeck","relatedEncounterDeck","relatedObligationDeck","resetApp","createAction","getCardStackWithId","find","mutateCardWithId","callback","cardToUpdate","cardsSlice","createSlice","reducers","selectCard","unselectCard","toggleSelectCard","exhaustCard","startCardMove","cardToStartMoving","splitTopCard","cardToMove","Error","topCard","shift","newCard","assign","uuidv4","foreachSelectedCard","cardMove","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCards","concat","length","selectMultipleCards","ids","unselectAllCards","hoverCard","cardToPreview","faceup","hoverLeaveCard","togglePanMode","flipCards","reverse","shuffleStack","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","resetCards","addCardStack","newStack","cardJsonIds","jsonId","statusTokens","toggleToken","cardToToggle","tokenType","extraReducers","builder","addCase","fulfilled","console","log","heroCard","mainDeckStack","slots","cardDetails","Array","from","keys","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","containerStyle","completed","children","App","stage","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","pos","clearEncounterImporter","handleLoadEncounter","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","newPos","updatePosition","handleCardContextMenu","cardId","currentStatusTokens","menuItems","Stunned","Confused","Tough","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","handleKeyPress","which","keyCode","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","handleMouseMove","getCardType","getImgUrl","topCardData","bottomCardData","back_link","double_sided","octgn_id","loadCardsData","staticCards","tokens","movingCards","previewCards","showPreview","rawPos","previewPos","tabIndex","onKeyPress","Consumer","store","ref","stagePosition","innerHeight","onMouseUp","onMouseMove","onTouchMove","onWheel","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","error","SetData","card_set_type_code","getGame","game","gameSlice","AppContainer","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","rtkConfigureStore","reducer","middleware","subscribe","throttle","blacklistStateKeys","stringify","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+0maAgBYA,E,mIChBCC,EACE,IADFA,EAEC,IAFDA,EAGU,IAHVA,EAIS,IC0MPC,E,kDArLb,WAAYC,GAAgB,IAAD,8BACzB,cAAMA,IANAC,eAKmB,IAJnBC,eAImB,IAHnBC,gBAGmB,IAFnBC,eAEmB,EAGzB,EAAKA,WAAY,EAEjB,EAAKC,MAAQ,CACXC,aAAc,CACZC,QAAQ,EACRC,QAAQ,EACRC,SAAS,IAIb,EAAKR,UAAY,IAAIS,MACrB,EAAKR,UAAY,IAAIQ,MACrB,EAAKP,WAAa,IAAIO,MAGtB,EAAKT,UAAUU,OAAS,WACjB,EAAKP,WACR,EAAKQ,SAAS,CACZN,aAAc,CACZC,QAAQ,EACRC,OAAQ,EAAKH,MAAMC,aAAaE,OAChCC,QAAS,EAAKJ,MAAMC,aAAaG,YAQvC,EAAKR,UAAUY,IACbC,mDAIJ,EAAKZ,UAAUS,OAAS,WACjB,EAAKP,WACR,EAAKQ,SAAS,CACZN,aAAc,CACZC,OAAQ,EAAKF,MAAMC,aAAaC,OAChCC,QAAQ,EACRC,QAAS,EAAKJ,MAAMC,aAAaG,YAQvC,EAAKP,UAAUW,IACbC,mDAIJ,EAAKX,WAAWQ,OAAS,WAClB,EAAKP,WACR,EAAKQ,SAAS,CACZN,aAAc,CACZC,OAAQ,EAAKF,MAAMC,aAAaC,OAChCC,OAAQ,EAAKH,MAAMC,aAAaE,OAChCC,SAAS,MAQf,EAAKN,WAAWU,IACdC,4DAvEqB,E,gEA4EzBC,KAAKX,WAAY,I,6CAIjBW,KAAKX,WAAY,I,+BAIjB,IAAMY,EAAUD,KAAKf,MAAMiB,EAAIF,KAAKd,UAAUiB,aAAe,EACvDC,EAAUJ,KAAKf,MAAMoB,EAAItB,EAA4B,EAAI,GACzDuB,EAAcN,KAAKV,MAAMC,aAAaC,OAC1C,cAAC,IAAD,CAEEU,EAAGD,EACHI,EAAGD,EACHG,MAAOP,KAAKd,UAAUiB,aACtBK,OAAQR,KAAKd,UAAUuB,cACvBC,iBAAkBV,KAAKd,WANzB,UACUc,KAAKf,MAAM0B,KAAKC,GAD1B,iBAQE,KAEEC,EAAab,KAAKV,MAAMC,aAAaC,OACzC,cAAC,IAAD,CAEEU,EAAGD,EACHI,EAAGD,EACHG,MAAOP,KAAKd,UAAUiB,aACtBK,OAAQR,KAAKd,UAAUuB,cACvBK,KAAK,IACLC,KAAK,QACLC,MAAM,SACNC,cAAc,SACdC,SAAU,IAVZ,UACUlB,KAAKf,MAAM0B,KAAKC,GAD1B,gBAYE,KAEEO,EAAUnB,KAAKf,MAAMiB,EAAIF,KAAKb,UAAUgB,aAAe,EACvDiB,EAAUhB,EAAUJ,KAAKd,UAAUuB,cAAgB,EAEnDY,EAAcrB,KAAKV,MAAMC,aAAaE,OAC1C,cAAC,IAAD,CAEES,EAAGiB,EACHd,EAAGe,EACHb,MAAOP,KAAKb,UAAUgB,aACtBK,OAAQR,KAAKb,UAAUsB,cACvBC,iBAAkBV,KAAKb,WANzB,UACUa,KAAKf,MAAM0B,KAAKC,GAD1B,iBAQE,KAEEU,EAAatB,KAAKV,MAAMC,aAAaE,OACzC,cAAC,IAAD,CAEES,EAAGiB,EACHd,EAAGe,EACHb,MAAOP,KAAKb,UAAUgB,aACtBK,OAAQR,KAAKb,UAAUsB,cACvBK,KAAK,IACLC,KAAK,QACLC,MAAM,SACNC,cAAc,SACdC,SAAU,IAVZ,UACUlB,KAAKf,MAAM0B,KAAKC,GAD1B,gBAYE,KAEEW,EAAWvB,KAAKf,MAAMiB,EAAIF,KAAKb,UAAUgB,aAAe,EACxDqB,EAAWJ,EAAUpB,KAAKb,UAAUsB,cAAgB,EA4B1D,MAAO,CACLH,EACAO,EACAQ,EACAC,EA9BmBtB,KAAKV,MAAMC,aAAaG,QAC3C,cAAC,IAAD,CAEEQ,EAAGqB,EACHlB,EAAGmB,EACHjB,MAAOP,KAAKZ,WAAWe,aACvBK,OAAQR,KAAKZ,WAAWqB,cACxBC,iBAAkBV,KAAKZ,YANzB,UACUY,KAAKf,MAAM0B,KAAKC,GAD1B,kBAQE,KAEgBZ,KAAKV,MAAMC,aAAaG,QAC1C,cAAC,IAAD,CAEEQ,EAAGqB,EACHlB,EAAGmB,EACHjB,MAAOP,KAAKZ,WAAWe,aACvBK,OAAQR,KAAKZ,WAAWqB,cACxBK,KAAK,IACLC,KAAK,QACLC,MAAM,SACNC,cAAc,SACdC,SAAU,IAVZ,UACUlB,KAAKf,MAAM0B,KAAKC,GAD1B,iBAYE,U,GA9KiBa,a,QCfZC,EAAW,SAACpC,GAAD,OAAsBA,EAAMqC,OAEvCC,EAAiBC,YAAeH,GAAU,SAACC,GACtD,OAAOA,EAAMA,MAAMG,QAAO,SAACC,EAAkCpB,GAE3D,OADAoB,EAAIpB,EAAKC,IAAMD,EACRoB,IACN,OAGQC,EAAoBH,YAAeH,GAAU,SAACC,GACzD,QAASA,EAAMM,aAAeN,EAAMA,MAAMO,OAAM,SAACvB,GAAD,OAAWA,EAAKwB,eAGrDC,EAAa,SAAC9C,GAAD,OAAsBA,EAAMqC,MAAMU,SCC7CC,EAFaC,aANJ,SAACjD,EAAkBL,GACzC,MAAO,CACL0B,KAAMiB,EAAetC,GAAOL,EAAM2B,OAIe,GAAzB2B,CAA6BvD,GCL5CwD,EAAwB,CAAC,cAAe,eAkhBtCC,E,kDAlcb,WAAYxD,GAAgB,IAAD,oCACzB,cAAMA,IARAyD,SAOmB,IANnBC,gBAMmB,IALnBC,iBAKmB,IAJnBC,cAImB,IAHnBxD,eAGmB,IAFnByD,gBAA0B,EAEP,EAuJnBC,mBAAqB,SAACC,EAAqBC,GACjD,OACE,cAAC,SAAD,CAEEC,QAAQ,EACRC,GAAI,CACFC,SAAU,EAAKnE,MAAMoE,UAAY,GAAK,GAJ1C,SAOG,SAACC,GAAD,OACC,cAAC,WAASC,KAAV,2BACMD,GADN,IAEEE,aAAc,EACdtD,EAAG,EAAKjB,MAAMiB,EACdG,EAAG,EAAKpB,MAAMoB,EACdE,MAAO0C,EACPzC,OAAQwC,EACRS,OAAQ,CACNvD,EAAG+C,EAAa,EAChB5C,EAAG2C,EAAc,GAEnBU,OAAQ,EAAKzE,MAAM0E,WAAa,OAAS,GACzCC,YAAa,EAAK3E,MAAM0E,WAAa,EAAI,EACzCjD,iBAAkB,EAAKgC,IACvBmB,kBACE,EAAKvE,MAAMwE,YACPb,EAAa,EAAKP,IAAIvC,aACtB8C,EAENc,kBACE,EAAKzE,MAAMwE,YACPd,EAAc,EAAKN,IAAIjC,cACvBuC,EAENgB,WAAY,EAAK/E,MAAMkD,SAAW,GAAK,EAAKlD,MAAMgF,SAAW,EAAI,EACjEC,QAAS,EAAKjF,MAAMkF,QAAU,GAAM,EACpCC,WAAW,EACXC,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,UAAW,EAAKC,cAChBC,WAAY,EAAKC,kBACjBC,SAAU,EAAKD,kBACfE,QAAS,EAAKC,YACdC,MAAO,EAAKD,YACZE,YAAa,EAAKC,gBAClBC,aAAc,EAAKD,gBACnBE,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,cAAe,EAAKC,uBA9C1B,UACU,EAAKxG,MAAM2B,GADrB,WAzJuB,EA8MnB8E,qBAAuB,SAAC1C,EAAqBC,GAAwB,IAAD,MACpE0C,EAAQ,EAAKC,SAAS3C,EAAYD,GAClCS,EAAS,CACbvD,EAAG+C,EAAa,EAChB5C,EAAG2C,EAAc,GAGbrC,EACJ,cAAC,IAAD,CAEEuC,QAAQ,EACRE,SAAU,EAAKnE,MAAMoE,UAAY,GAAK,EACtCG,aAAc,EACdtD,EAAG,EAAKjB,MAAMiB,EACdG,EAAG,EAAKpB,MAAMoB,EACdE,MAAO0C,EACPzC,OAAQwC,EACRS,OAAQA,EACRC,OAAQ,EAAKzE,MAAM0E,WAAa,OAAS,GACzCC,YAAa,EAAK3E,MAAM0E,WAAa,EAAI,EACzCkC,oBACE,EAAKC,4BACH,EAAK7G,MAAM8G,UAAY,GACvBvD,GAEE,IACA,EAEN9B,iBAAkB,EAAKgC,IACvBmB,kBAAmB8B,EAAMpF,MACzBwD,kBAAmB4B,EAAMnF,OACzBwD,WAAY,EAAK/E,MAAMkD,SAAW,GAAK,EAAKlD,MAAMgF,SAAW,EAAI,EACjEC,QAAS,EAAKjF,MAAMkF,QAAU,GAAM,EACpCC,WAAW,EACXC,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,UAAW,EAAKC,cAChBC,WAAY,EAAKC,kBACjBC,SAAU,EAAKD,kBACfE,QAAS,EAAKC,YACdC,MAAO,EAAKD,YACZE,YAAa,EAAKC,gBAClBC,aAAc,EAAKD,gBACnBE,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,cAAe,EAAKC,mBArCtB,UACU,EAAKxG,MAAM2B,GADrB,UAyCIoF,EAAkB,CACtB9F,EAAGuD,EAAOvD,EAAI,EACdG,EAAGoD,EAAOpD,EAAI,GAGV4F,GACH,EAAKhH,MAAMiH,iBAAmB,GAAK,EAClC,cAAC,IAAD,CAEEhD,QAAQ,EACRE,SAAU,EAAKnE,MAAMoE,UAAY,GAAK,EACtCG,aAAc,CAAC,EAAG,EAAG,EAAG,GACxBtD,EAAG,EAAKjB,MAAMiB,EACdG,EAAG,EAAKpB,MAAMoB,EACdE,MAAO0C,EACPzC,OAAQwC,EACRS,OAAQuC,EACR9B,QAAS,EAAKjF,MAAMkF,QAAU,GAAM,EACpCpD,KAAM,OACNiD,WAAY,EAAK/E,MAAMkD,SAAW,GAAK,EAAKlD,MAAMgF,SAAW,EAAI,GAZnE,UACU,EAAKhF,MAAM2B,GADrB,eAcE,KAEAuF,KACH,UAAC,EAAKlH,MAAMmH,iBAAZ,aAAC,EAAsBC,UAAW,EAAK/G,MAAMgH,kBAAkBD,QA+BlE,MAAO,CACLJ,EACAtF,EA/BmB,EAAK4F,eACxBJ,EACA,EAAKxD,WACLc,EACA,GAEoB,EAAK8C,kBACxB,UAAC,EAAKtH,MAAMmH,iBAAZ,aAAC,EAAsBI,WAAY,EAAKlH,MAAMgH,kBAAkBE,SACjE,EAAK5D,YACLa,EACA,GAEiB,EAAK8C,kBACrB,UAAC,EAAKtH,MAAMmH,iBAAZ,aAAC,EAAsBK,QAAS,EAAKnH,MAAMgH,kBAAkBG,MAC9D,EAAK5D,SACLY,EACA,GAIA,EAAKxE,MAAMkD,UAAY,EAAKlD,MAAMkF,QAAU,KAC1C,cAAC,EAAD,CAEEvD,GAAI,EAAK3B,MAAM2B,GACfV,EAAG,EAAKjB,MAAMiB,EACdG,EAAG,EAAKpB,MAAMoB,GAJhB,UACU,EAAKpB,MAAM2B,GADrB,kBA9SqB,EAwYnB6E,kBAAoB,SAACiB,GACrB,EAAKzH,MAAMwG,mBACf,EAAKxG,MAAMwG,kBAAkB,EAAKxG,MAAM2B,GAAI8F,IA1YrB,EA8YnB9B,kBAAoB,WACtB,EAAK3F,MAAM2F,mBACb,EAAK3F,MAAM2F,kBAAkB,EAAK3F,MAAM2B,KAhZjB,EAoZnB0D,gBAAkB,SAACoC,GACrB,EAAKzH,MAAMqF,iBACb,EAAKrF,MAAMqF,gBAAgB,EAAKrF,MAAM2B,GAAI8F,IAtZnB,EA0ZnBlC,eAAiB,SAACkC,GACpB,EAAKzH,MAAMuF,gBACb,EAAKvF,MAAMuF,eAAe,CACxB5D,GAAI,EAAK3B,MAAM2B,GACf+F,GAAID,EAAME,OAAO1G,IAAM,EAAKjB,MAAMiB,EAClC2G,GAAIH,EAAME,OAAOvG,IAAM,EAAKpB,MAAMoB,KA/Zb,EAoanBqE,cAAgB,WAClB,EAAKzF,MAAMyF,eAAiB,EAAKzF,MAAMkD,UACzC,EAAKlD,MAAMyF,cAAc,EAAKzF,MAAM2B,KAtab,EA0anBmE,YAAc,SAAC2B,GACjB,EAAKzH,MAAM8F,cACb,EAAK9F,MAAM8F,YAAY,EAAK9F,MAAM2B,IAClC8F,EAAMI,cAAe,IA7aE,EAibnB5B,gBAAkB,SAACwB,GACzBA,EAAMI,cAAe,GAlbI,EAqbnBzB,gBAAkB,WACpB,EAAKpG,MAAM8H,aACb,EAAK9H,MAAM8H,YAAY,EAAK9H,MAAM2B,KAvbX,EA2bnB2E,eAAiB,WACnB,EAAKtG,MAAM+H,kBACb,EAAK/H,MAAM+H,iBAAiB,EAAK/H,MAAM2B,KA1brCqG,aAAaC,QAAQ,yBACvB,EAAKpE,gBAAiB,GAGxB,EAAKzD,WAAY,EAEjB,EAAKC,MAAQ,CACXwE,aAAa,EACbqD,WAAY,EAAKlI,MAAMmI,OACvBd,kBAAmB,CACjBD,SAAS,EACTG,UAAU,EACVC,OAAO,IAIX,EAAK/D,IAAM,IAAI/C,MACf,EAAKgD,WAAa,IAAIhD,MACtB,EAAKiD,YAAc,IAAIjD,MACvB,EAAKkD,SAAW,IAAIlD,MAGpB,EAAK+C,IAAI9C,OAAS,WACX,EAAKP,WACR,EAAKQ,SAAS,CACZiE,aAAa,KAKf7E,EAAMmI,SACR,EAAK1E,IAAI5C,IAAMb,EAAMmI,QAIvB,EAAKzE,WAAW/C,OAAS,WAClB,EAAKP,WACR,EAAKQ,SAAS,CACZyG,kBAAmB,CACjBD,SAAS,EACTG,SAAU,EAAKlH,MAAMgH,kBAAkBE,SACvCC,MAAO,EAAKnH,MAAMgH,kBAAkBG,WAMvC,UAACxH,EAAMmH,iBAAP,aAAC,EAAiBC,WACrB,EAAK1D,WAAW7C,IACdC,qDAIJ,EAAK6C,YAAYhD,OAAS,WACnB,EAAKP,WACR,EAAKQ,SAAS,CACZyG,kBAAmB,CACjBD,QAAS,EAAK/G,MAAMgH,kBAAkBD,QACtCG,UAAU,EACVC,MAAO,EAAKnH,MAAMgH,kBAAkBG,WAMvC,UAACxH,EAAMmH,iBAAP,aAAC,EAAiBI,YACrB,EAAK5D,YAAY9C,IACfC,sDAIJ,EAAK8C,SAASjD,OAAS,WAChB,EAAKP,WACR,EAAKQ,SAAS,CACZyG,kBAAmB,CACjBD,QAAS,EAAK/G,MAAMgH,kBAAkBD,QACtCG,SAAU,EAAKlH,MAAMgH,kBAAkBE,SACvCC,OAAO,OAMV,UAACxH,EAAMmH,iBAAP,aAAC,EAAiBK,SACrB,EAAK5D,SAAS/C,IAAMC,mDAvFG,E,0EAvBKd,EAAeK,GAC7C,OAAIL,EAAMmI,SAAW9H,EAAM6H,WAClB,CACLrD,aAAa,EACbqD,WAAYlI,EAAMmI,OAClBd,kBAAmB,CACjBD,QAAS/G,EAAMgH,kBAAkBD,QACjCG,SAAUlH,EAAMgH,kBAAkBE,SAClCC,MAAOnH,EAAMgH,kBAAkBG,QAK9B,S,wDAqGiBY,EAAmBC,GAAoB,IAAD,aAE3DtH,KAAKV,MAAMwE,aACZ9D,KAAKf,MAAMmI,QACXpH,KAAKf,MAAMmI,SAAWpH,KAAK0C,IAAI5C,MAE/BE,KAAK0C,IAAI5C,IAAME,KAAKf,MAAMmI,QAKzBpH,KAAKV,MAAMgH,kBAAkBD,UAC9B,UAACgB,EAAUjB,iBAAX,aAAC,EAAqBC,YACrB,UAACrG,KAAKf,MAAMmH,iBAAZ,aAAC,EAAsBC,WAExBrG,KAAK2C,WAAW7C,IACdC,qDAKDC,KAAKV,MAAMgH,kBAAkBE,WAC9B,UAACa,EAAUjB,iBAAX,aAAC,EAAqBI,aACrB,UAACxG,KAAKf,MAAMmH,iBAAZ,aAAC,EAAsBI,YAExBxG,KAAK4C,YAAY9C,IACfC,sDAKDC,KAAKV,MAAMgH,kBAAkBG,QAC9B,UAACY,EAAUjB,iBAAX,aAAC,EAAqBK,UACrB,UAACzG,KAAKf,MAAMmH,iBAAZ,aAAC,EAAsBK,SAExBzG,KAAK6C,SAAS/C,IAAMC,qD,0CAKtBC,KAAKX,WAAY,I,6CAIjBW,KAAKX,WAAY,I,+BAIjB,OAAOW,KAAKV,MAAMwE,YAAc9D,KAAKuH,aAAe,O,mCAIpD,IAAMvE,EAAchD,KAAKf,MAAMuB,QAAUzB,EACnCkE,EAAajD,KAAKf,MAAMsB,OAASxB,EAEvC,OAAOiB,KAAK8C,eACR9C,KAAK+C,mBAAmBC,EAAaC,GACrCjD,KAAK0F,qBAAqB1C,EAAaC,K,qCA6K3CuE,EACA9E,EACAe,EACAgE,GAEA,IAAMC,EAAa,CACjBnH,MAAOmC,EAAIvC,aAAe,EAC1BK,OAAQkC,EAAIjC,cAAgB,GAGxBkH,EAAgB,CACpBzH,EAAGuD,EAAOvD,EAAInB,EAA2B2I,EAAWnH,MAAQ,EAC5DF,EAAGoD,EAAOpD,EAAIqH,EAAWlH,OAASiH,EAAO,GAAKA,EAAO,GAAK,IAG5D,OAAOD,EACL,cAAC,IAAD,CAEEtE,QAAQ,EACRM,aAAc,EACdtD,EAAGF,KAAKf,MAAMiB,EACdG,EAAGL,KAAKf,MAAMoB,EACdE,MAAOmH,EAAWnH,MAClBC,OAAQkH,EAAWlH,OACnBqD,kBAAmB,GACnBE,kBAAmB,GACnBN,OAAQkE,EACRjH,iBAAkBgC,GAXpB,UACU1C,KAAKf,MAAM2B,GADrB,kBACiC6G,IAY/B,O,kDAIJG,EACAC,GAEA,OAAOA,EAAUC,SAASF,KAAU5H,KAAK+H,gB,+BAU1B9E,EAAoBD,GACnC,IAAMzC,EAAQP,KAAKV,MAAMwE,YACrBb,EAAajD,KAAK0C,IAAIvC,aACtB8C,EAEE+E,EAAkBhI,KAAKV,MAAMwE,YAC/Bd,EAAchD,KAAK0C,IAAIvC,aACvB8C,EAEEzC,EAASR,KAAKV,MAAMwE,YACtBd,EAAchD,KAAK0C,IAAIjC,cACvBuC,EAEEiF,EAAmBjI,KAAKV,MAAMwE,YAChCb,EAAajD,KAAK0C,IAAIjC,cACtBuC,EAEJ,OAAOhD,KAAK8F,4BACV9F,KAAKf,MAAM8G,UAAY,GACvBvD,GAEE,CAAEjC,MAAOyH,EAAiBxH,OAAQyH,GAClC,CAAE1H,QAAOC,Y,oCA7Bc,IAAD,IAC1B,OACE,UAAAR,KAAKf,MAAMmI,cAAX,eAAmBU,SAAS,eAA5B,UACA9H,KAAKf,MAAMmI,cADX,aACA,EAAmBU,SAAS,c,GApYfrG,aCAJyG,E,4MAfLC,eAAiB,SACvBzB,GAEAA,EAAMyB,kB,EAGAC,yBAA2B,SAACC,GAAD,OAA2B,WAC5DA,EAAKC,SACC,EAAKrJ,MAAMsJ,oBACf,EAAKtJ,MAAMsJ,mBAAmB,EAAKtJ,MAAMuJ,MAAM,IAEjD,EAAKvJ,MAAMwJ,oB,uDA7CH,IAAD,OACDC,EAAiC,CACrCC,IAAI,GAAD,OAAK3I,KAAKf,MAAM2J,SAASvI,EAAI,EAA7B,MACHwI,KAAK,GAAD,OAAK7I,KAAKf,MAAM2J,SAAS1I,EAAI,EAA7B,OAGN,OACE,qBACEU,GAAG,qBACH4E,cAAexF,KAAKmI,eACpBrD,QAAS9E,KAAKf,MAAMwJ,gBAHtB,SAKE,qBACEK,UAAU,eACVC,MAAOL,EACPlD,cAAexF,KAAKmI,eACpBrD,QAAS9E,KAAKf,MAAMwJ,gBAJtB,SAMGzI,KAAKf,MAAMuJ,MAAMzG,KAAI,SAACiH,EAAGC,GAAJ,OACpB,8BACE,wBACEH,UAAU,oBACVtD,cAAe,EAAK2C,eACpBrD,QAAS,EAAKsD,yBAAyBY,GAHzC,SAKGA,EAAEE,SANP,4BAA+BD,e,GApBjBxH,aCaX0H,E,4MAXLrC,aAAe,SAACJ,GACtBA,EAAM0C,mB,EAGAC,cAAgB,SAAC3C,GACL,UAAdA,EAAM4C,KACR,EAAKrK,MAAMsK,YAAY7C,EAAM8C,cAAcC,Q,uDAf7C,OACE,uBACEC,UAAW1J,KAAKqJ,cAChBvE,QAAS9E,KAAK8G,aACdc,KAAK,e,GANYnG,a,kBCgCVkI,E,4MAXLC,eAAiB,SAACC,EAAaJ,GAC/BA,GACJ,EAAKxK,MAAM6K,UAAUL,EAAM9H,MAAMI,KAAI,SAACgI,GAAD,OAAOA,EAAEC,U,EAI1ClD,aAAe,SAACJ,GACtBA,EAAM0C,mB,uDAvBN,OACE,qBAAKtE,QAAS9E,KAAK8G,aAAnB,SACE,cAACmD,EAAA,EAAD,CACErJ,GAAG,4BACHsJ,QAASlK,KAAKf,MAAMkL,eAAiB,GACrCC,eAAgB,SAACC,GAAD,OAAYA,EAAOC,QAAQC,MAC3CxB,MAAO,CAAExI,MAAO,KAChBiK,SAAUxK,KAAK4J,eACfa,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBxB,MAAM,gBAAgB0B,QAAQ,uB,GAXnCnJ,a,QCCjBoJ,EAAe,SAACvL,GAAD,OAAsBA,EAAMwL,WAE3CC,EAAuBlJ,YAClCgJ,GACA,SAACC,GACC,OAAO,2BAAKA,EAAUE,UAAaF,EAAUG,sBAIpCC,EAA2BrJ,YACtCgJ,GACA,SAACC,GACC,OAAOA,EAAUE,YAIRG,EAAgCtJ,YAC3CgJ,GACA,SAACC,GACC,OAAOA,EAAUG,qBAIRG,EAAsBvJ,YAAegJ,GAAc,SAACC,GAC/D,OAAOA,EAAUR,WAGNe,EAAyCxJ,YACpDsJ,EACAC,GACA,SAACH,EAAmBX,GAClB,IAAMgB,EAAoD,GAW1D,OATAC,OAAOC,OAAOP,GAAmBQ,SAAQ,SAACC,GACxC,IAAMC,EAAUD,EAAcE,UAAY,UACpCN,EAAmBK,GACvBL,EAAmBK,GAASE,KAAKH,GAEjCJ,EAAmBK,GAAW,CAACD,MAI5BH,OAAOO,QAAQR,GACnBvJ,KAAI,mCAAEuH,EAAF,KAAOG,EAAP,WAAmB,CACtBkC,QAASrC,EACTgB,QAASA,EAAQhB,GACjB3H,MAAO8H,MAERsC,QACC,SAACC,GAAD,MAC8B,YAA5BA,EAAI1B,QAAQ2B,aACgB,SAA5BD,EAAI1B,QAAQ2B,eAEfC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE7B,QAAQC,KAAO6B,EAAE9B,QAAQC,KAAO,GAAK,QClD/C8B,EAFkB9J,aANT,SAACjD,GACvB,MAAO,CACL6K,cAAekB,EAAuC/L,MAIA,GAAzBiD,CAA6BoH,G,QCVjD2C,EAAc,SAACC,EAAkBC,GAC5C,IAAMC,EAASF,EAAOrM,EAAIsM,EAAOtM,EAC3BwM,EAASH,EAAOlM,EAAImM,EAAOnM,EACjC,OAAOsM,KAAKC,KAAKH,EAASA,EAASC,EAASA,ICHjCG,EAAY,SAACvD,GACxB,IACE,IAAMwD,EAAkB7F,aAAaC,QAAQoC,GAC7C,OAAwB,OAApBwD,EACK,GAEFC,KAAKC,MAAMF,GAClB,MAAOG,GACP,MAAO,KCyBLC,EAAiCL,EAAU,SA2CpCM,EAAyB,2BA1CJ,CAChCxL,MAAO,GAmCPyL,WAAY,GACZnL,YAAa,KACboL,eAAgB,KAChBhL,SAAS,IAKN6K,G,wDCvEQI,GAAoBC,YAC/B,2BAD+C,uCAE/C,WAAOC,EAAqDC,GAA5D,2BAAAtB,EAAA,sEACyBuB,KAAMC,IAAN,oDACwBH,EAAQI,aAFzD,cACQC,EADR,OAIQvO,EAAmBmO,EAASK,WAC5BC,EAAgB7C,EAAyB5L,GACzC0O,EAAcD,EAAcF,EAASI,KAAKC,mBAAmBtC,SAC7DuC,EAAqBhD,EAA8B7L,GAEnD8O,EAAqB7C,OAAOO,QAAQqC,GACvCpC,QACC,mCAAQtC,GAAR,kBACEA,EAAMmC,WAAN,UAAsBoC,IACF,eAApBvE,EAAM4E,aAETtM,KAAI,mCAAEuH,EAAF,iBAAmBA,KAEpBgF,EAAoB/C,OAAOO,QAAQqC,GACtCpC,QAAO,oDAAyBH,WAAN,UAAsBoC,EAAtB,eAC1BjM,KAAI,mCAAEuH,EAAF,iBAAmBA,KAnB5B,kBAqBS,CACLV,SAAU4E,EAAQ5E,SAClBqF,KAAMJ,EAASI,KACfM,qBAAsBD,EACtBE,sBAAuBJ,IAzB3B,4CAF+C,yDCPpCK,GAAWC,YAAa,gB,SfczB5P,K,kBAAAA,E,oBAAAA,E,eAAAA,M,KAOZ,IAAM6P,GAAqB,SACzBrP,EACAsB,GAEA,OAAOtB,EAAMqC,MAAMiN,MAAK,SAACjO,GAAD,OAAUA,EAAKC,KAAOA,MAG1CiO,GAAmB,SACvBvP,EACAsB,EACAkO,GAEA,IAAMC,EAAeJ,GAAmBrP,EAAOsB,GAC3CmO,GACFD,EAASC,IAsTPC,GAAaC,YAAY,CAC7B1E,KAAM,QACN4C,aAAcA,EACd+B,SAAU,CACRC,WAjRuE,SACzE7P,EACAgJ,GAEAuG,GAAiBvP,EAAOgJ,EAAOkF,SAAS,SAAC7M,GACvCA,EAAKsD,UAAW,MA6QhBmL,aAzQyE,SAC3E9P,EACAgJ,GAEAuG,GAAiBvP,EAAOgJ,EAAOkF,SAAS,SAAC7M,GACvCA,EAAKsD,UAAW,MAqQhBoL,iBA9PA,SAAC/P,EAAOgJ,GACVuG,GAAiBvP,EAAOgJ,EAAOkF,SAAS,SAAC7M,GACvCA,EAAKsD,UAAYtD,EAAKsD,aA6PtBqL,YAzPwE,SAC1EhQ,EACAgJ,GAEAhJ,EAAMqC,MACHoK,QAAO,SAACpL,GAAD,OAAUA,EAAKC,KAAO0H,EAAOkF,SAAW7M,EAAKsD,YACpDwH,SAAQ,SAAC9K,GACRA,EAAK0C,WAAa1C,EAAK0C,cAmPzBkM,cA5OA,SAACjQ,EAAOgJ,GAEV,IAAMkH,EAAoBb,GAAmBrP,EAAOgJ,EAAOkF,QAAQ5M,IASnE,GARI4O,IAAsBA,EAAkBvL,WAC1C3E,EAAMqC,MAAQrC,EAAMqC,MAAMI,KAAI,SAACpB,GAE7B,OADAA,EAAKsD,SAAWtD,EAAKC,KAAO0H,EAAOkF,QAAQ5M,GACpCD,MAKP2H,EAAOkF,QAAQiC,aAAc,CAC/B,IAAMC,EAAapQ,EAAMqC,MAAMiN,MAAK,SAAC7E,GAAD,OAAOA,EAAEnJ,KAAO0H,EAAOkF,QAAQ5M,MAEnE,IAAK8O,EACH,MAAM,IAAIC,MAAM,yBAGlBD,EAAWzL,UAAW,EAEtB,IAAM2L,EAAUF,EAAWzJ,UAAU4J,QAC/BC,EAAUvE,OAAOwE,OAAO,GAAIL,EAAY,CAC5CzL,UAAU,EACV9B,UAAU,EACV8D,UAAW,CAAC2J,KAGdF,EAAW9O,GAAKoP,cAEhB1Q,EAAMqC,MAAMkK,KAAKiE,GAInBxQ,EAAM8N,WAAa,GAEd9E,EAAOkF,QAAQiC,cAjHM,SAC1BnQ,EACAwP,GAEAxP,EAAMqC,MAAMoK,QAAO,SAACpL,GAAD,OAAUA,EAAKsD,YAAUwH,SAAQ,SAAC9K,GAAD,OAAUmO,EAASnO,MA8GrEsP,CAAoB3Q,GAAO,SAACqB,GAC1BA,EAAKwB,UAAW,EAChB7C,EAAM8N,WAAWvB,KAAKN,OAAOwE,OAAO,GAAIpP,QAuM1CuP,SA/LA,SAAC5Q,EAAOgJ,GAAY,IAAD,IAGjB6H,EAFEC,EAA2B,GAIjC9Q,EAAMqC,MACHoK,QAAO,SAACpL,GAAD,OAAUA,EAAKC,KAAO0H,EAAOkF,QAAQ5M,IAAMD,EAAKsD,YACvDwH,SAAQ,SAAC9K,GACJA,EAAKC,KAAO0H,EAAOkF,QAAQ5M,KAC7BuP,EAAcxP,GAGhBA,EAAKT,GAAKoI,EAAOkF,QAAQ7G,GACzBhG,EAAKN,GAAKiI,EAAOkF,QAAQ3G,GAEzBuJ,EAAWvE,KAAKlL,MAKpB,IAAM0P,EAAgE,IAzI1C,SAC5B/Q,EACAwP,GAEAxP,EAAMqC,MACHoK,QAAO,SAACpL,GAAD,OAAWA,EAAKsD,YACvBwH,SAAQ,SAAC9K,GAAD,OAAUmO,EAASnO,MAoI9B2P,CAAsBhR,GAAO,SAACqB,GAC5B,IAAM4P,EAAWjE,EAAY3L,EAAMwP,GAC/BI,EA9K0B,IA+K5BF,EAAoBxE,KAAK,CACvB0E,WACA5P,YAKNrB,EAAM+N,eAAN,oBACEgD,EAAoBnE,MAAK,SAACsE,EAAIC,GAAL,OAAYD,EAAGD,SAAWE,EAAGF,YAAU,UADlE,aACE,EAAoE5P,YADtE,QAEE,KAIFyP,EAAW3E,SAAQ,SAACiF,GAClBpR,EAAMqC,MAAMkK,KAAKvM,EAAMqC,MAAMgP,OAAOrR,EAAMqC,MAAMiP,QAAQF,GAAY,GAAG,QA0JvEG,YAtJwE,SAC1EvR,EACAgJ,GAEA,IAAIwI,EAAkC,GAatC,GAZAxR,EAAMqC,MACHoK,QAAO,SAACpL,GAAD,OAAUA,EAAKC,KAAO0H,EAAOkF,SAAW7M,EAAKsD,YACpDwH,SAAQ,SAAC9K,GACRA,EAAKwB,UAAW,EAEV7C,EAAM+N,iBAEVyD,EAAkBA,EAAgBC,OAAOpQ,EAAKsF,eAK9C3G,EAAM+N,eAAgB,CAC1B/N,EAAMqC,MAAQrC,EAAMqC,MAAMoK,QACxB,SAACpL,GAAD,QAAYA,EAAKC,KAAO0H,EAAOkF,SAAW7M,EAAKsD,aAGjD,IAAMoJ,EAAiB/N,EAAMqC,MAAMiN,MACjC,SAACjO,GAAD,aAAUA,EAAKC,MAAL,UAAYtB,EAAM+N,sBAAlB,aAAY,EAAsBzM,OAExCyM,GAAkByD,EAAgBE,OAAS,IAE/C3D,EAAepH,UAAY6K,EAAgBC,OACzC1D,EAAepH,YAKrB3G,EAAM8N,WAAa,GACnB9N,EAAM+N,eAAiB,MAqHrB4D,oBA/GA,SAAC3R,EAAOgJ,GACVA,EAAOkF,QAAQ0D,IACZnP,KAAI,SAACnB,GAAD,OAAQtB,EAAMqC,MAAMiN,MAAK,SAACjO,GAAD,OAAUA,EAAKC,KAAOA,QACnD6K,SAAQ,SAAC9K,GACJA,IACFA,EAAKsD,UAAW,OA2GpBkN,iBAtGsD,SAAC7R,GACzDA,EAAMqC,MAAM8J,SAAQ,SAAC9K,GACnBA,EAAKsD,UAAW,MAqGhBmN,UAjGsE,SACxE9R,EACAgJ,GAEA,IAAM+I,EAAgB/R,EAAMqC,MAAMiN,MAAK,SAAC7E,GAAD,OAAOA,EAAEnJ,KAAO0H,EAAOkF,YAC1D,OAAC6D,QAAD,IAACA,OAAD,EAACA,EAAeC,UAEM,OAAtBhS,EAAM2C,YACR3C,EAAM2C,YAAc,CAClBrB,GAAI0H,EAAOkF,SAEJlF,EAAOkF,UAAYlO,EAAM2C,YAAYrB,KAC9CtB,EAAM2C,YAAYrB,GAAK0H,EAAOkF,WAsF9B+D,eAlFoD,SAACjS,GAC7B,OAAtBA,EAAM2C,cACR3C,EAAM2C,YAAc,OAiFpBuP,cA7EmD,SAAClS,GACtDA,EAAM+C,SAAW/C,EAAM+C,SA6ErBoP,UA1E+C,SAACnS,EAAOgJ,GACzDhJ,EAAMqC,MACHoK,QAAO,SAACpL,GAAD,OAAUA,EAAKsD,YACtBwH,SAAQ,SAAC9K,GACRA,EAAK2Q,QAAU3Q,EAAK2Q,OACpB3Q,EAAKsF,UAAYtF,EAAKsF,UAAUyL,cAsElCC,aAlEyE,SAC3ErS,EACAgJ,GACI,IAAD,GApPW,SAACsJ,GAMf,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMZ,OAKlB,IAAMe,GAEXD,EAAcnF,KAAKqF,MAAMrF,KAAKsF,SAAWF,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAuOvBK,EAAQ,UAAA5S,EAAMqC,MAAMiN,MAAK,SAAC7E,GAAD,OAAOA,EAAEnJ,KAAO0H,EAAOkF,kBAAxC,eAAkDvH,YAAa,KA+DrEkM,WA5DgD,SAAC7S,GACnDA,EAAMqC,MAAQ,IA4DZyQ,aAtDA,SAAC9S,EAAOgJ,GACV,IAAM+J,EAAuB,CAC3BnS,EAAGoI,EAAOkF,QAAQ5E,SAAS1I,EAC3BG,EAAGiI,EAAOkF,QAAQ5E,SAASvI,EAC3B8B,UAAU,EACVkB,WAAW,EACXiO,QAAQ,EACRvQ,KAAM,MACNH,GAAIoP,cACJ/J,UAAWqC,EAAOkF,QAAQ8E,YAAYvQ,KAAI,SAACwQ,GAAD,MAAa,CACrDA,aAEFtO,UAAU,EACVuO,aAAc,CACZnM,SAAS,EACTG,UAAU,EACVC,OAAO,IAIXnH,EAAMqC,MAAMkK,KAAKwG,IAmCfI,YA7BA,SAACnT,EAAOgJ,GACV,IAAMoK,EAAepT,EAAMqC,MAAMiN,MAAK,SAAC7E,GAAD,OAAOA,EAAEnJ,KAAO0H,EAAOkF,QAAQ5M,MAC/D8R,IACJA,EAAaF,aAAalK,EAAOkF,QAAQmF,WAAarK,EAAOkF,QAAQ/D,SA4BvEmJ,cAAe,SAACC,GACdA,EAAQC,QAAQrE,IAAU,SAACnP,EAAOgJ,GAChChJ,EAAMqC,MAAQ,GACdrC,EAAM2C,YAAc,KACpB3C,EAAM+N,eAAiB,KACvB/N,EAAM8N,WAAa,GACnB9N,EAAM+C,SAAU,KAGlBwQ,EAAQC,QAAQxF,GAAkByF,WAAW,SAACzT,EAAOgJ,GACnD0K,QAAQC,IAAI,gBACZD,QAAQC,IAAI3K,GAEZ,IAAM4K,EAAuB,CAC3BhT,EAAGoI,EAAOkF,QAAQ5E,SAAS1I,EAC3BG,EAAGiI,EAAOkF,QAAQ5E,SAASvI,EAC3B8B,UAAU,EACVkB,WAAW,EACXiO,QAAQ,EACRvQ,KAAM,MACNH,GAAIoP,cACJ/J,UAAW,CAAC,CAAEsM,OAAQjK,EAAOkF,QAAQS,KAAKC,oBAC1CjK,UAAU,EACVuO,aAAc,CACZnM,SAAS,EACTG,UAAU,EACVC,OAAO,IAIP0M,EAAgC,GACpC5H,OAAOO,QAAQxD,EAAOkF,QAAQS,KAAKmF,OAAO3H,SAAQ,YAAmB,IAAD,mBAAhBnC,EAAgB,KAAXG,EAAW,KAC5D4J,EAA8BC,MAAMC,KAAKD,MAAM7J,GAAO+J,QAAQzR,KAClE,iBAAqB,CAAEwQ,OAAQjJ,MAEjC6J,EAAgBA,EAAcpC,OAAOsC,MAGvC,IAAMI,EAAc1U,EAA2B,GAEzC2U,EAAsB,CAC1BxT,EAAGoI,EAAOkF,QAAQ5E,SAAS1I,EAAIuT,EAC/BpT,EAAGiI,EAAOkF,QAAQ5E,SAASvI,EAC3B8B,UAAU,EACVkB,WAAW,EACXiO,QAAQ,EACRvQ,KAAM,MACNH,GAAIoP,cACJ/J,UAAWkN,EACXlP,UAAU,EACVuO,aAAc,CACZnM,SAAS,EACTG,UAAU,EACVC,OAAO,IAILkN,EAA4B,CAChCzT,EAAGoI,EAAOkF,QAAQ5E,SAAS1I,EAAkB,EAAduT,EAC/BpT,EAAGiI,EAAOkF,QAAQ5E,SAASvI,EAC3B8B,UAAU,EACVkB,WAAW,EACXiO,QAAQ,EACRvQ,KAAM,MACNH,GAAIoP,cACJ/J,UAAWqC,EAAOkF,QAAQe,qBAAqBxM,KAAI,SAACwQ,GAAD,MAAa,CAC9DA,aAEFtO,UAAU,EACVuO,aAAc,CACZnM,SAAS,EACTG,UAAU,EACVC,OAAO,IAILmN,EAA6B,CACjC1T,EAAGoI,EAAOkF,QAAQ5E,SAAS1I,EAAkB,EAAduT,EAC/BpT,EAAGiI,EAAOkF,QAAQ5E,SAASvI,EAC3B8B,UAAU,EACVkB,WAAW,EACXiO,QAAQ,EACRvQ,KAAM,MACNH,GAAIoP,cACJ/J,UAAWqC,EAAOkF,QAAQgB,sBAAsBzM,KAAI,SAACwQ,GAAD,MAAa,CAC/DA,aAEFtO,UAAU,EACVuO,aAAc,CACZnM,SAAS,EACTG,UAAU,EACVC,OAAO,IAIXnH,EAAMqC,MAAMkK,KAAKqH,EAAUQ,EAASC,EAAeC,S,GAuBrD5E,GAAW6E,QAjBb1E,G,GAAAA,WACAC,G,GAAAA,aACAC,G,GAAAA,iBACAC,G,GAAAA,YACAC,G,GAAAA,cACAW,G,GAAAA,SACAW,G,GAAAA,YACAI,G,GAAAA,oBACAE,G,GAAAA,iBACAC,G,GAAAA,UACAG,G,GAAAA,eACAC,G,GAAAA,cACAC,G,GAAAA,UACAE,G,GAAAA,aAEAS,I,GADAD,W,GACAC,cACAK,G,GAAAA,YAGazD,MAAf,QgBhce8E,I,mNAPL3L,eAAiB,SACvBzB,GAEAA,EAAMyB,kB,uDAzBN,IAAM4L,EAAsC,CAC1CpL,IAAI,GAAD,OAAK3I,KAAKf,MAAM2J,SAASvI,EAAI,EAA7B,MACHwI,KAAK,GAAD,OAAK7I,KAAKf,MAAM2J,SAAS1I,EAAI,EAA7B,OAEN,OACE,qBACEU,GAAG,YACHkE,QAAS9E,KAAKf,MAAM+U,UACpBxO,cAAexF,KAAKmI,eAHtB,SAKE,qBACEW,UAAU,4BACVC,MAAOgL,EACPvO,cAAexF,KAAKmI,eACpBrD,QAAS9E,KAAKf,MAAM+U,UAJtB,SAMGhU,KAAKf,MAAMgV,iB,GAlBCxS,cCmuBRyS,G,kDAzpBb,WAAYjV,GAAgB,IAAD,8BACzB,cAAMA,IAHDkV,MAA4B,KAER,EAiNnBC,KAAO,aAjNY,EAmNnBC,mBAAqB,WAC3B,OAAI,EAAKpV,MAAM0C,MAAMA,MAAMqP,OAAS,EAAU,KAG5C,2GAvNuB,EA6NnBsD,kBAAoB,WAAO,IAAD,EAChC,IAAK,EAAKhV,MAAMiV,gBAAiB,OAAO,KAExC,IAAMC,EAAa,UAAG,EAAKL,aAAR,aAAG,EAAYM,YAAYC,wBACxCC,EAAkB,EAAKrV,MAAMsV,oBACnC,IAAKJ,IAAkBG,EACrB,MAAM,IAAIhF,MAAM,2CAGlB,OACE,cAAC,EAAD,CACE/G,SAAU,CACR1I,EAAGsU,EAAc3L,KAAO8L,EAAgBzU,EACxCG,EAAGmU,EAAc7L,IAAMgM,EAAgBtU,GAEzCmI,MAAO,EAAKlJ,MAAMuV,iBAClBpM,gBAAiB,kBAAM,EAAKqM,uBA7OP,EAkPnBC,mBAAqB,WAAO,IAAD,EACjC,IAAK,EAAKzV,MAAM0V,iBAAkB,OAAO,KAEzC,IAAMR,EAAa,UAAG,EAAKL,aAAR,aAAG,EAAYM,YAAYC,wBACxCC,EAAkB,EAAKrV,MAAM2V,qBACnC,IAAKT,IAAkBG,EACrB,MAAM,IAAIhF,MAAM,4CAGlB,OACE,cAAC,GAAD,CACE/G,SAAU,CACR1I,EAAGsU,EAAc3L,KAAO8L,EAAgBzU,EACxCG,EAAGmU,EAAc7L,IAAMgM,EAAgBtU,GAEzC2T,UAAW,EAAKkB,kBALlB,SAOE,cAAC,EAAD,CACE3L,WAAY,EAAK4L,iBACf,EAAKC,8BAA8B,EAAKjB,aArQvB,EA4QnBkB,wBAA0B,WAAO,IAAD,EACtC,IAAK,EAAK/V,MAAMgW,sBAAuB,OAAO,KAE9C,IAAMd,EAAa,UAAG,EAAKL,aAAR,aAAG,EAAYM,YAAYC,wBACxCC,EAAkB,EAAKrV,MAAMiW,0BACnC,IAAKf,IAAkBG,EACrB,MAAM,IAAIhF,MAAM,4CAGlB,IAAM6F,EAAM,CACVtV,EAAGsU,EAAc3L,KAAO8L,EAAgBzU,EACxCG,EAAGmU,EAAc7L,IAAMgM,EAAgBtU,GAGzC,OACE,cAAC,GAAD,CAAUuI,SAAU4M,EAAKxB,UAAW,EAAKyB,uBAAzC,SACE,cAAC,EAAD,CACE3L,UAAW,EAAK4L,oBACd,EAAKN,8BAA8B,EAAKjB,aA9RvB,EAqSnBuB,oBAAsB,SAAC9M,GAAD,OAAwB,SAACjH,GACrD,EAAK8T,yBACL,EAAKxW,MAAMmT,aAAa,CAAExJ,WAAU0J,YAAa3Q,MAvSxB,EA0SnBwT,iBAAmB,SAACvM,GAAD,OAAwB,SAAChI,GAClD,EAAKsU,oBACL,EAAKjW,MAAMqO,kBAAkB,CAAEM,WAAYhN,EAAIgI,eA5StB,EA+SnBkM,iBAAmB,WACzB,EAAKjV,SAAS,CACZ0U,iBAAiB,EACjBK,oBAAqB,KACrBC,iBAAkB,MAnTK,EAuTnBK,kBAAoB,WAC1B,EAAKrV,SAAS,CACZmV,kBAAkB,EAClBC,qBAAsB,QA1TC,EA8TnBQ,uBAAyB,WAC/B,EAAK5V,SAAS,CACZyV,uBAAuB,EACvBC,0BAA2B,QAjUJ,EAqUnBI,sBAAwB,SAACjP,GAC/B,IAAMkP,EAAW,EAAKR,8BAA8B,EAAKjB,QAEvD,EAAKlV,MAAMoD,SACXiK,EAAY,EAAKhN,MAAMuW,eAAgBD,GAAY,KAEnD,EAAK3W,MAAMkS,oBA3UY,EA+UnB2E,YAAc,SAACpP,GAAyC,IAAD,EAG7D,GAFAA,EAAMqP,IAAI5N,iBAEL,EAAKgM,MAAV,CAEA,IAAI6B,EAAW,EAAK/W,MAAMgX,UAAUC,UAAUhW,EAExCiW,EAAO,UAAG,EAAKhC,MAAMiC,4BAAd,QAAsC,CAAElW,EAAG,EAAGG,EAAG,GAExDgW,GACAF,EAAQjW,EAAI,EAAKiU,MAAMjU,KAAO8V,EAD9BK,GAEAF,EAAQ9V,EAAI,EAAK8T,MAAM9T,KAAO2V,EAG9BM,EACJ5P,EAAMqP,IAAIrJ,OAAS,EA7ZR,KA6ZYsJ,EAAsBA,EA7ZlC,KA+Zb,EAAK/W,MAAMsX,WAAW,CAAErW,EAAGoW,EAAUjW,EAAGiW,IAExC,IAAME,EAAS,CACbtW,EAAGiW,EAAQjW,EAAImW,EAAiBC,EAChCjW,EAAG8V,EAAQ9V,EAAIgW,EAAiBC,GAGlC,EAAKrX,MAAMwX,eAAeD,KAvWD,EA0WnBE,sBAAwB,SAC9BC,EACAjQ,GACI,IAAD,MACHA,EAAMqP,IAAI5N,iBACVzB,EAAMI,cAAe,EAGrB,EAAK7H,MAAMkQ,WAAWwH,GAEtB,IAAMhW,EAAO,EAAK1B,MAAM0C,MAAMA,MAAMiN,MAAK,SAAC7E,GAAD,OAAOA,EAAEnJ,KAAO+V,KACnDzQ,GAAsB,OAAJvF,QAAI,IAAJA,GAAA,UAAAA,EAAMsF,iBAAN,eAAiB+K,SAAU,EAC7C4F,GAA0B,OAAJjW,QAAI,IAAJA,OAAA,EAAAA,EAAM6R,eAAgB,CAChDnM,SAAS,EACTG,UAAU,EACVC,OAAO,GAGHoQ,EAAY,CAChB,CACE3N,MAAO,OACPZ,OAAQ,WACN,EAAKrJ,MAAMwS,eAKbvL,EAAkB,GACpB2Q,EAAUhL,KAAK,CACb3C,MAAO,UACPZ,OAAQ,WACN,EAAKrJ,MAAM0S,aAAagF,MAK9BE,EAAUhL,KAAK,CACb3C,MAAS0N,EAAoBvQ,QAAU,cAAgB,OACvDiC,OAAQ,WACN,EAAKrJ,MAAMwT,YAAY,CACrB7R,IAAQ,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMC,KAAM,GAChB+R,UAAW7T,EAAgBgY,QAC3BrN,OAAQmN,EAAoBvQ,aAKlCwQ,EAAUhL,KAAK,CACb3C,MAAS0N,EAAoBpQ,SAAW,kBAAoB,UAC5D8B,OAAQ,WACN,EAAKrJ,MAAMwT,YAAY,CACrB7R,IAAQ,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMC,KAAM,GAChB+R,UAAW7T,EAAgBiY,SAC3BtN,OAAQmN,EAAoBpQ,cAKlCqQ,EAAUhL,KAAK,CACb3C,MAAS0N,EAAoBnQ,MAAQ,eAAiB,QACtD6B,OAAQ,WACN,EAAKrJ,MAAMwT,YAAY,CACrB7R,IAAQ,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMC,KAAM,GAChB+R,UAAW7T,EAAgBkY,MAC3BvN,OAAQmN,EAAoBnQ,WAKlC,EAAK5G,SAAS,CACZ0U,iBAAiB,EACjBK,oBAAmB,oBAAE,EAAKT,aAAP,aAAE,EAAYiC,4BAAd,QAAsC,KACzDvB,iBAAkBgC,KAlbK,EAsbnBI,uBAAyB,SAACN,GAChC,EAAK1X,MAAMkQ,WAAWwH,GACtB,EAAK1X,MAAMqQ,YAAYqH,IAxbE,EA2bnBO,oBAAsB,SAC5BP,EACAjQ,GAEA,IAAI+I,GAAe,EAMnB,KAFE,EAAKxQ,MAAM0C,MAAMA,MAAMoK,QAAO,SAAChC,GAAD,OAAOA,EAAE9F,YAAU+M,OAAS,GAErC,CACrB,IAAMmG,EAAe,EAAKlY,MAAM0C,MAAMA,MAAMiN,MAAK,SAAC7E,GAAD,OAAOA,EAAEnJ,KAAO+V,KAC3DS,IAAwB,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAclR,YAAa,IAAI+K,OAAS,EAC1D,GAAMmG,GAAgBC,EAAU,CAE9B,IAAMC,EAAkB,CACtBnX,EAAGiX,EAAajX,EAAInB,EAA2B,EAC/CsB,EAAG8W,EAAa9W,EAAItB,EAA4B,GAEjCuN,EACf+K,EACA,EAAKjC,8BAA8B,EAAKjB,QAE3B,KACb1E,GAAe,IAKrB,EAAKxQ,MAAMsQ,cAAc,CAAE3O,GAAI+V,EAAQlH,kBAxdd,EA2dnB6H,eAAiB,SAAC5Q,GACxB,IAAMsD,EAAOtD,EAAM6Q,OAAS7Q,EAAM8Q,QACrB,MAATxN,EACF,EAAK/K,MAAMuS,gBACO,MAATxH,GACT,EAAK/K,MAAMwS,aAheY,EAoenBgG,0BAA4B,WAAiB,IAAD,IAC5CC,EAAU,oBAAG,EAAKvD,aAAR,aAAG,EAAYiC,4BAAf,QAAuC,CAAElW,EAAG,EAAGG,EAAG,GAC5DsX,EAAkBC,OAAOC,WAAa,EAC5C,OAAOH,EAAWxX,EAAIyX,EAClB,CACEzX,EAAG0X,OAAOC,WAAa9Y,EAAmC,EAC1DsB,EAAGtB,EAAoC,GAEzC,CACEmB,EAAGnB,EAAmC,EACtCsB,EAAGtB,EAAoC,IA9epB,EAkfnBqW,8BAAgC,SACtCxO,EACAkR,GAEA,IAAMC,EAAYnR,EAAOoR,uBAAuBC,OAChDF,EAAUG,SACV,IAAI1C,EAAMsC,GAAYlR,EAAOwP,qBAC7B,OAAO2B,EAAUI,MAAM3C,IAzfE,EA4fnBtQ,gBAAkB,SAACwB,GACzB,IAAM8O,EAAM,EAAKJ,8BAA8B,EAAKjB,OAUpD,OARA,EAAKtU,SAAS,CACZgW,eAAgB,CACd3V,EAAGsV,EAAItV,EACPG,EAAGmV,EAAInV,GAET+X,WAAW,KAGN,GAvgBkB,EA0gBnBC,qBAAuB,WAC7B,IAAMxC,EAAiB,EAAKvW,MAAMuW,eAC5ByC,EAAa,EAAKhZ,MAAMgZ,WAC9B,MAAO,CACL9X,OAAQmM,KAAK4L,IAAID,EAAW9X,QAC5BD,MAAOoM,KAAK4L,IAAID,EAAW/X,OAC3BL,EACEoY,EAAW/X,MAAQ,EACfsV,EAAe3V,EAAIoY,EAAW/X,MAC9BsV,EAAe3V,EACrBG,EACEiY,EAAW9X,OAAS,EAChBqV,EAAexV,EAAIiY,EAAW9X,OAC9BqV,EAAexV,IAvhBE,EA2hBnBmY,cAAgB,WAEtB,GAAI,EAAKlZ,MAAMmZ,mBAAoB,CACjC,IAAMH,EAAa,EAAKD,uBAClBK,EAAuB,EAAKzZ,MAAM0C,MAAMA,MAAMG,QAClD,SAAC6W,EAAmBhY,GAgBlB,OAfmBiY,SACjBN,EAAWpY,EACXoY,EAAWjY,EACXiY,EAAW/X,MACX+X,EAAW9X,OACXG,EAAKT,EAAI,GACTS,EAAKN,EAAI,GACTtB,EACAA,IAIA4Z,EAAkB9M,KAAKlL,GAGlBgY,IAET,IAGF,EAAK1Z,MAAMgS,oBAAoB,CAC7BC,IAAKwH,EAAc3W,KAAI,SAACpB,GAAD,OAAUA,EAAKC,QAa1C,OATA,EAAKf,SAAS,CACZ4Y,oBAAoB,EACpBH,WAAY,CACV9X,OAAQ,EACRD,MAAO,GAET6X,WAAW,KAGN,GAnkBkB,EAskBnBS,gBAAkB,SAACnS,GACzB,GAAI,EAAKpH,MAAM8Y,UAAW,CACxB,IAAM5C,EAAM,EAAKJ,8BAA8B1O,EAAM8C,eACrD,EAAK3J,SAAS,CACZ4Y,oBAAoB,EACpBH,WAAY,CACV9X,OAAQgV,EAAInV,EAAI,EAAKf,MAAMuW,eAAexV,EAC1CE,MAAOiV,EAAItV,EAAI,EAAKZ,MAAMuW,eAAe3V,KAI/CwG,EAAMI,cAAe,GAjlBI,EAolBnBrB,kBAAoB,SAACiB,GAAiD,IAAD,IAC3EA,EAAMqP,IAAI5N,iBACVzB,EAAMI,cAAe,EAErB,IAAM+P,EAAY,CAChB,CACE3N,MAAO,eACPZ,OAAQ,WAAO,IAAD,IACZ,EAAKzI,SAAS,CACZmV,kBAAkB,EAClBC,qBAAoB,oBAAE,EAAKd,aAAP,aAAE,EAAYiC,4BAAd,QAAsC,SAIhE,CACElN,MAAO,iBACPZ,OAAQ,WAAO,IAAD,IACZ,EAAKzI,SAAS,CACZyV,uBAAuB,EACvBC,0BAAyB,oBAAE,EAAKpB,aAAP,aAAE,EAAYiC,4BAAd,QAAsC,SAIrE,CAAElN,MAAO,QAASZ,OAAQ,EAAKrJ,MAAMwP,WAGvC,EAAK5O,SAAS,CACZ0U,iBAAiB,EACjBK,oBAAmB,oBAAE,EAAKT,aAAP,aAAE,EAAYiC,4BAAd,QAAsC,KACzDvB,iBAAkBgC,KAjnBK,EAqnBnBiC,YAAc,SAACnY,GACrB,OAAiD,IAA7C4K,OAAOiI,KAAK,EAAKvU,MAAM6L,WAAWkG,OAAqB,GAE1C,EAAK/R,MAAM6L,UAAUnK,EAAKsF,UAAU,GAAGsM,QAExClE,WA1nBS,EA6nBnB0K,UAAY,SAACpY,GACnB,GAAiD,IAA7C4K,OAAOiI,KAAK,EAAKvU,MAAM6L,WAAWkG,OAAc,MAAO,GAE3D,IAAMgI,EAAc,EAAK/Z,MAAM6L,UAAUnK,EAAKsF,UAAU,GAAGsM,QACrD0G,EAAiB,EAAKha,MAAM6L,UAChCnK,EAAKsF,UAAUtF,EAAKsF,UAAU+K,OAAS,GAAGuB,QAG5C,OACG5R,EAAK2Q,SACH2H,EAAeC,YAAeD,EAAeE,aAQtCxY,EAAK2Q,OAKfvR,sCAA4CiZ,EAAYI,SAAW,OAJ5DrZ,sDANLA,sCAEAkZ,EAAeG,SACf,UA1oBJ,EAAK9Z,MAAQ,CACXmZ,oBAAoB,EACpBH,WAAY,CACV9X,OAAQ,EACRD,MAAO,GAETsV,eAAgB,CACd3V,EAAG,EACHG,EAAG,GAEL+X,WAAW,EACX7D,iBAAiB,EACjBK,oBAAqB,KACrBC,iBAAkB,GAClBG,kBAAkB,EAClBC,qBAAsB,KACtBK,uBAAuB,EACvBC,0BAA2B,MApBJ,E,gEAyBzBvV,KAAKf,MAAMoa,kB,+BAGI,IAAD,OACRC,EAActZ,KAAKf,MAAM0C,MAAMA,MAClCoK,QAAO,SAACpL,GAAD,OAAWA,EAAKwB,YACvBJ,KAAI,SAACpB,GAAU,IAAD,EACb,OACE,cAAC,EAAD,CAEEC,GAAID,EAAKC,GACTV,EAAGS,EAAKT,EACRG,EAAGM,EAAKN,EACRgD,UAAW1C,EAAK0C,UAChBtC,KAAMJ,EAAKI,KACXkD,SAAUtD,EAAKsD,SACfN,WAAYhD,EAAKC,MAAL,UAAY,EAAK3B,MAAM0C,MAAM0L,sBAA7B,aAAY,EAAiCzM,IACzDuB,SAAUxB,EAAKwB,SACfmC,gBAAiB,EAAK4S,oBACtB1S,eAAgB,EAAKvF,MAAMiR,SAC3BxL,cAAe,EAAKzF,MAAM4R,YAC1BjM,kBAAmB,EAAKqS,uBACxBlS,YAAa,EAAK9F,MAAMoQ,iBACxBtI,YAAa,EAAK9H,MAAMmS,UACxBpK,iBAAkB,EAAK/H,MAAMsS,eAC7B9L,kBAAmB,EAAKiR,sBACxBtP,OAAQ,EAAK2R,UAAUpY,GACvBoF,SAAU,EAAK+S,YAAYnY,GAC3B2Q,OAAQ3Q,EAAK2Q,OACbpL,gBAAiBvF,EAAKsF,UAAU+K,OAChC5K,UAAW,CACTC,QAAS1F,EAAK6R,aAAanM,QAC3BG,SAAU7F,EAAK6R,aAAahM,SAC5BC,MAAO9F,EAAK6R,aAAa/L,MACzB8S,OAAQ,CAAE/Z,OAAQ,EAAGC,OAAQ,EAAGC,QAAS,KAzBtCiB,EAAKC,OA+BZwM,EAAapN,KAAKf,MAAM0C,MAAMyL,WAAWrL,KAAI,SAACpB,GAClD,OACE,cAAC,EAAD,CAEEC,GAAID,EAAKC,GACTV,EAAGS,EAAKT,EACRG,EAAGM,EAAKN,EACRgD,UAAW1C,EAAK0C,UAChBtC,KAAMJ,EAAKI,KACXkD,UAAU,EACV9B,UAAU,EACViF,OAAQ,EAAK2R,UAAUpY,GACvBoF,SAAU,EAAK+S,YAAYnY,GAC3B2Q,OAAQ3Q,EAAK2Q,OACbnN,SAAS,GAZX,eACexD,EAAKC,QAgBlB4Y,EAAcxZ,KAAKf,MAAM0C,MAAMA,MAClCoK,QAAO,SAACpL,GAAD,OAAUA,EAAKwB,YACtBJ,KAAI,SAACpB,GACJ,OACE,cAAC,EAAD,CAEEC,GAAID,EAAKC,GACTV,EAAGS,EAAKT,EACRG,EAAGM,EAAKN,EACRgD,UAAW1C,EAAK0C,UAChBtC,KAAMJ,EAAKI,KACXkD,SAAUtD,EAAKsD,SACf9B,SAAUxB,EAAKwB,SACfmC,gBAAiB,EAAK4S,oBACtB1S,eAAgB,EAAKvF,MAAMiR,SAC3BxL,cAAe,EAAKzF,MAAM4R,YAC1BjM,kBAAmB,EAAKqS,uBACxBlS,YAAa,EAAK9F,MAAMoQ,iBACxBjI,OAAQ,EAAK2R,UAAUpY,GACvBoF,SAAU,EAAK+S,YAAYnY,GAC3B2Q,OAAQ3Q,EAAK2Q,OACbpL,gBAAiBvF,EAAKsF,UAAU+K,QAhB3BrQ,EAAKC,OAqBZ6Y,EAAezZ,KAAKmU,MACtBnU,KAAKf,MAAM0C,MAAMA,MACdoK,QACC,SAACpL,GAAD,OACG,EAAKrB,MAAM8Y,WACZ,EAAKnZ,MAAMya,eACT,EAAKza,MAAM0C,MAAMM,aACnBtB,EAAKC,KAAO,EAAK3B,MAAM0C,MAAMM,YAAYrB,MAE5CmB,KAAI,SAACpB,GACJ,IAAMgZ,EAAS,EAAKlC,4BACdmC,EAAa,EAAKxE,8BACtB,EAAKjB,MACLwF,GAEF,OACE,cAAC,EAAD,CAEE/Y,GAAID,EAAKC,GACTV,EAAG0Z,EAAW1Z,EACdG,EAAGuZ,EAAWvZ,EACdgD,UAAWb,EAAsBsF,SAC/B,EAAKgR,YAAYnY,IAEnBI,KAAMJ,EAAKI,KACXkD,UAAU,EACV9B,UAAU,EACViF,OAAQ,EAAK2R,UAAUpY,GACvBoF,SAAU,EAAK+S,YAAYnY,GAC3B2Q,OAAQ3Q,EAAK2Q,OACb9Q,OAAQzB,EACRwB,MAAOxB,GAfT,iBACiB4B,EAAKC,QAkB5B,GAEJ,OACE,sBAAKiZ,SAAU,EAAGC,WAAY9Z,KAAKsX,eAAnC,UACGtX,KAAKqU,qBACLrU,KAAKsU,oBACLtU,KAAK+U,qBACL/U,KAAKqV,0BACN,cAAC,IAAkB0E,SAAnB,UACG,gBAAGC,EAAH,EAAGA,MAAH,OACC,cAAC,IAAD,CACEC,IAAK,SAACA,GACCA,IAEL,EAAK9F,MAAQ8F,IAEf/Z,EAAG,EAAKjB,MAAMgX,UAAUiE,cAAcha,EACtCG,EAAG,EAAKpB,MAAMgX,UAAUiE,cAAc7Z,EACtCE,MAAOqX,OAAOC,WACdrX,OAAQoX,OAAOuC,YACfrV,QAAS,EAAK6Q,sBACd3Q,MAAO,EAAK2Q,sBACZ1Q,YACE,EAAKhG,MAAMoD,QAAU,EAAK+R,KAAO,EAAKlP,gBAExCkV,UAAW,EAAKnb,MAAMoD,QAAU,EAAK+R,KAAO,EAAKoE,cACjD6B,YACE,EAAKpb,MAAMoD,QAAU,EAAK+R,KAAO,EAAKyE,gBAExCyB,YACE,EAAKrb,MAAMoD,QAAU,EAAK+R,KAAO,EAAKyE,gBAExCrT,cAAe,EAAKC,kBACpBE,MAAO,EAAK1G,MAAMgX,UAAUC,UAC5BqE,QAAS,EAAKzE,YACd1R,UAAW,EAAKnF,MAAMoD,QACtBkC,WAAY,EAAK6P,KACjB3P,UAAW,EAAK2P,KAChBjM,gBAAgB,EA5BlB,SA8BE,eAAC,IAAD,CAAU6R,MAAOA,EAAjB,UACE,cAAC,IAAD,CAAO7R,gBAAgB,EAAvB,SACGmR,EACEvI,OAAO3D,GACP2D,OAAOyI,GACPzI,OAAO0I,KAEZ,cAAC,IAAD,UACE,cAAC,IAAD,CACEvZ,EAAG,EAAKZ,MAAMuW,eAAe3V,EAC7BG,EAAG,EAAKf,MAAMuW,eAAexV,EAC7BE,MAAO,EAAKjB,MAAMgZ,WAAW/X,MAC7BC,OAAQ,EAAKlB,MAAMgZ,WAAW9X,OAC9BkD,OAAO,2B,GAzMTjC,a,oQCtBZ+Y,GAAiBvL,YAAY,CACjC1E,KAAM,YACN4C,aCxC2C,CAC3CnC,SAAU,GACVC,kBAAmB,GACnBX,QAAS,IDsCT4E,SAAU,CACRmK,cAvDuD,SAAC/Z,GAE1DA,EAAM0L,SAAW,GACjB1L,EAAM2L,kBAAoB,GAC1B,IAAMwP,EAAYlP,OAAOO,QAAQ4O,GAC9B3O,QAAO,mCAAEzC,EAAF,iBAAmBA,EAAIxB,SAAS,iBACvC/F,KAAI,uDAED4Y,EAAiBpP,OAAOO,QAAQ4O,GACnC3O,QAAO,mCAAEzC,EAAF,iBAAkBA,EAAIxB,SAAS,iBACtC/F,KAAI,uDAqCP,OAnCA0Y,EAAUhP,SAAQ,SAACmP,GAAD,OAChBA,EAAKnP,SAAQ,SAAC9K,GACRrB,EAAM0L,SAASrK,EAAKqJ,OACtBgJ,QAAQ6H,MAAM,kCAAoCla,EAAKqJ,MAOzD1K,EAAM0L,SAASrK,EAAKqJ,MAAQrJ,QAIhCga,EAAelP,SAAQ,SAACmP,GAAD,OACrBA,EAAKnP,SAAQ,SAAC9K,GACRrB,EAAM2L,kBAAkBtK,EAAKqJ,OAC/BgJ,QAAQ6H,MAAM,kCAAoCla,EAAKqJ,MAOzD1K,EAAM2L,kBAAkBtK,EAAKqJ,MAAQrJ,QAIzCma,GAAQrP,SAAQ,SAACO,GACf1M,EAAMgL,QAAQ0B,EAAIhC,MAAQ,CACxBO,KAAMyB,EAAIzB,KACV0B,YAAaD,EAAI+O,uBAIdzb,MAYM+Z,GAAkBmB,GAAe3G,QAAjCwF,cAEAmB,MAAf,QElEaQ,GAAU,SAAC1b,GAAD,OAAsBA,EAAM2b,MCK7C/N,IDHwBrL,YAAemZ,IAAS,SAACC,GACrD,OAAOA,EAAK/E,aCEwBrJ,EAAU,SAKnCM,GAAwB,2BAJJ,CAC/B+I,UAAW,CAAEhW,EAAG,EAAGG,EAAG,GACtB6Z,cAAe,CAAEha,EAAG,EAAGG,EAAG,KAIvB6M,ICQCgO,GAAYjM,YAAY,CAC5B1E,KAAM,OACN4C,aAAcA,GACd+B,SAAU,CACRqH,WArBwE,SAC1EjX,EACAgJ,GAGA,OADAhJ,EAAM4W,UAAY5N,EAAOkF,QAClBlO,GAiBLmX,eAXA,SAACnX,EAAOgJ,GAEV,OADAhJ,EAAM4a,cAAgB5R,EAAOkF,QACtBlO,IAWPsT,cAAe,SAACC,GACdA,EAAQC,QAAQrE,IAAU,SAACnP,EAAOgJ,GAChChJ,EAAM4a,cAAgB,CAAEha,EAAG,EAAGG,EAAG,GACjCf,EAAM4W,UAAY,CAAEhW,EAAG,EAAGG,EAAG,S,GAKW6a,GAAUrH,QAAzC0C,G,GAAAA,WAAYE,G,GAAAA,eAEZyE,MAAf,QC2BeC,GAxBM5Y,aAVG,SAACjD,GACvB,MAAO,CACLqC,MAAOD,EAASpC,GAChBwL,UAAWC,EAAqBzL,GAChCoa,YAAa1X,EAAkB1C,GAC/B+C,QAASD,EAAW9C,GACpB2W,UAAW+E,GAAQ1b,MAIuB,CAC5C4Q,YACAW,eACAvB,eACA+J,iBACAlK,cACAC,gBACAC,oBACA4B,uBACA1B,iBACA4B,oBACAC,aACAG,kBACAC,iBACAC,aACAE,gBACArE,qBACAiJ,cACAE,kBACAhI,YACA2D,gBACAK,gBArBmBlQ,CAsBlB2R,ICrDiBkH,QACW,cAA7BxD,OAAOyD,SAASC,UAEe,UAA7B1D,OAAOyD,SAASC,UAEhB1D,OAAOyD,SAASC,SAASC,MACvB,2D,kCCLSC,GARKC,aAAgB,CAClCR,QACAtZ,SACAmJ,eCAI4Q,GAAuBC,YAAqB,CAChDC,OAAO,EACPC,gBAAgB,EAChBC,mBAAmB,ICHrB,IAAM9B,GDMS,WACb,IAAMA,EAAQ+B,YAAkB,CAC9BC,QAASR,GACTS,WAAYP,KASd,OANA1B,EAAMkC,UACJC,MAAS,YdPY,SAAC7c,GACxB,IAAM8c,EAAqB,CAAC,aAC5B,IACE7Q,OAAOO,QAAQxM,GAAOmM,SAAQ,YAAmB,IAAD,mBAAhBnC,EAAgB,KAAXG,EAAW,KAC9C,IAAK2S,EAAmBtU,SAASwB,GAAM,CACrC,IAAMwD,EAAkBC,KAAKsP,UAAU5S,GACvCxC,aAAaqV,QAAQhT,EAAKwD,OAG9B,WcDEyP,CAAUvC,EAAMlM,cACf,MAGEkM,EClBKwC,GAEdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU3C,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJ4C,SAASC,eAAe,SHwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACvC,GACN7H,QAAQ6H,MAAMA,EAAMwC,c","file":"static/js/main.8ef10f22.chunk.js","sourcesContent":["import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      selected: true,\n      dragging: true,\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst addCardStackReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ cardJsonIds: string[]; position: Vector2d }>\n> = (state, action) => {\n  const newStack: ICardStack = {\n    x: action.payload.position.x,\n    y: action.payload.position.y,\n    dragging: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: uuidv4(),\n    cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n      jsonId,\n    })),\n    selected: false,\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n  };\n\n  state.cards.push(newStack);\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n    resetCards: resetCardsReducer,\n    addCardStack: addCardStackReducer,\n    toggleToken: toggleTokenReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCard = null;\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  resetCards,\n  addCardStack,\n  toggleToken,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect, Text } from \"react-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\ninterface IProps {\n  x: number;\n  y: number;\n  card: ICardStack;\n}\n\ninterface IState {\n  imagesLoaded: {\n    damage: boolean;\n    threat: boolean;\n    generic: boolean;\n  };\n}\n\nclass CardTokens extends Component<IProps, IState> {\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imagesLoaded: {\n        damage: false,\n        threat: false,\n        generic: false,\n      },\n    };\n\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // DAMAGE\n    this.damageImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: true,\n            threat: this.state.imagesLoaded.threat,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (true) {\n      // TODO: Replace with checking if there's damage\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    this.threatImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: true,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (true) {\n      // TODO: Replace with checking if there's threat\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // GENERIC\n    this.genericImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: this.state.imagesLoaded.threat,\n            generic: true,\n          },\n        });\n      }\n    };\n\n    if (true) {\n      // TODO: Replace with checking if there's generic\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    const damageX = this.props.x - this.damageImg.naturalWidth / 2;\n    const damageY = this.props.y - cardConstants.CARD_HEIGHT / 2 + 20;\n    const damageToken = this.state.imagesLoaded.damage ? (\n      <Rect\n        key={`${this.props.card.id}-damageToken`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        fillPatternImage={this.damageImg}\n      ></Rect>\n    ) : null;\n\n    const damageText = this.state.imagesLoaded.damage ? (\n      <Text\n        key={`${this.props.card.id}-damageText`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        text=\"2\"\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const threatX = this.props.x - this.threatImg.naturalWidth / 2;\n    const threatY = damageY + this.damageImg.naturalHeight + 5;\n\n    const threatToken = this.state.imagesLoaded.threat ? (\n      <Rect\n        key={`${this.props.card.id}-threatToken`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        fillPatternImage={this.threatImg}\n      ></Rect>\n    ) : null;\n\n    const threatText = this.state.imagesLoaded.threat ? (\n      <Text\n        key={`${this.props.card.id}-threatText`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        text=\"3\"\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const genericX = this.props.x - this.threatImg.naturalWidth / 2;\n    const genericY = threatY + this.threatImg.naturalHeight + 5;\n\n    const genericToken = this.state.imagesLoaded.generic ? (\n      <Rect\n        key={`${this.props.card.id}-genericToken`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        fillPatternImage={this.genericImg}\n      ></Rect>\n    ) : null;\n\n    const genericText = this.state.imagesLoaded.generic ? (\n      <Text\n        key={`${this.props.card.id}-genericText`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        text=\"4\"\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    return [\n      damageToken,\n      damageText,\n      threatToken,\n      threatText,\n      genericToken,\n      genericText,\n    ];\n  }\n}\n\nexport default CardTokens;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string) => void;\n  handleDoubleClick?: (id: string) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private unmounted: boolean;\n  private renderAnimated: boolean = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (localStorage.getItem(\"__render_animated__\")) {\n      this.renderAnimated = true;\n    }\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.img = new Image();\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderAnimated\n      ? this.renderAnimatedCard(heightToUse, widthToUse)\n      : this.renderUnanimatedCard(heightToUse, widthToUse);\n  }\n\n  private renderAnimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  };\n\n  private renderUnanimatedCard = (heightToUse: number, widthToUse: number) => {\n    const scale = this.getScale(widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={this.img}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens =\n      this.props.dragging || this.props.isGhost ? null : (\n        <CardTokensContainer\n          key={`${this.props.id}-cardTokens`}\n          id={this.props.id}\n          x={this.props.x}\n          y={this.props.y}\n        ></CardTokensContainer>\n      );\n\n    return [\n      cardStack,\n      card,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrl?.includes(\"standard\") &&\n      this.props.imgUrl?.includes(\"_back\")\n    );\n  }\n\n  private getScale(widthToUse: number, heightToUse: number) {\n    const width = this.state.imageLoaded\n      ? widthToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const widthHorizontal = this.state.imageLoaded\n      ? heightToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const height = this.state.imageLoaded\n      ? heightToUse / this.img.naturalHeight\n      : heightToUse;\n\n    const heightHorizontal = this.state.imageLoaded\n      ? widthToUse / this.img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = () => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: any) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    const menuStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <div\n          className=\"context-menu\"\n          style={menuStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.hideContextMenu}\n        >\n          {this.props.items.map((i, index) => (\n            <div key={`context-menu-item-${index}`}>\n              <button\n                className=\"context-menu-item\"\n                onContextMenu={this.preventDefault}\n                onClick={this.handleContextItemClicked(i)}\n              >\n                {i.label}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      this.props.loadCards(value.cards.map((c) => c.code));\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { StatusTokenType } from \"./cards.slice\";\n\n// import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\nconst defaultState: ICardsState = {\n  cards: [\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 200,\n    //   cardStack: [{ jsonId: \"01001a\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 400,\n    //   y: 400,\n    //   cardStack: [{ jsonId: \"01027\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 600,\n    //   cardStack: [{ jsonId: \"01036\" }],\n    // },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          value.set_code === `${heroSetCode}` &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      data: response.data,\n      relatedEncounterDeck: heroEncounterDeck,\n      relatedObligationDeck: heroObligationDeck,\n    };\n  }\n);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const resetApp = createAction(\"resetAction\");\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.completed}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { ReactReduxContext, Provider } from \"react-redux\";\nimport * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { StatusTokenType } from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getDistance } from \"./utilities/geo\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrl={this.getImgUrl(card)}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer preventDefault={true}>\n                  {staticCards\n                    .concat(ghostCards)\n                    .concat(movingCards)\n                    .concat(previewCards)}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"black\"\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard(cardId);\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleSelectAndExhaust = (cardId: string) => {\n    this.props.selectCard(cardId);\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: any) => {\n    const pos = this.getRelativePositionFromTarget(this.stage);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      { label: \"Reset\", action: this.props.resetApp },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n    const bottomCardData = this.props.cardsData[\n      card.cardStack[card.cardStack.length - 1].jsonId\n    ];\n\n    if (\n      !card.faceup &&\n      (!!bottomCardData.back_link || !!bottomCardData.double_sided)\n    ) {\n      return (\n        process.env.PUBLIC_URL +\n        \"/images/cards/\" +\n        bottomCardData.octgn_id +\n        \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + topCardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nconst defaultState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { initialState, IGameState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n    });\n  },\n});\n\nexport const { updateZoom, updatePosition } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  addCardStack,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n  toggleToken,\n} from \"./features/cards/cards.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport { updatePosition, updateZoom } from \"./features/game/game.slice\";\nimport { RootState } from \"./store/rootReducer\";\nimport { resetApp } from \"./store/global.actions\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n});\n\nexport default function configureStore() {\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}