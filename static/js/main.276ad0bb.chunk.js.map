{"version":3,"sources":["features/cards/cards.slice.ts","constants/card-constants.ts","CardTokens.tsx","features/cards/cards.selectors.ts","CardTokensContainer.tsx","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.async-thunks.ts","store/global.actions.ts","TopLayer.tsx","CardStackCardSelector.tsx","CardStackCardSelectorContainer.tsx","Counter.tsx","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["StatusTokenType","CounterTokenType","cardConstants","CardTokens","props","damageImg","threatImg","genericImg","unmounted","state","imagesLoaded","damage","threat","generic","Image","onload","setState","card","counterTokens","src","process","prevProps","prevState","this","damageX","x","naturalWidth","damageY","y","showDamage","damageToken","width","height","naturalHeight","fillPatternImage","id","damageText","text","fill","align","verticalAlign","fontSize","threatX","threatY","showThreat","threatToken","threatText","genericX","genericY","showGeneric","Component","getCards","cards","present","getCardMapById","createSelector","reduce","map","shouldShowPreview","previewCard","every","dragging","getPanMode","panMode","CardTokensContainer","connect","HORIZONTAL_TYPE_CODES","Card","img","stunnedImg","confusedImg","toughImg","renderAnimated","renderAnimatedCard","heightToUse","widthToUse","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternScaleX","imageLoaded","fillPatternScaleY","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","renderUnanimatedCard","scale","getScale","fillPatternRotation","shouldRenderImageHorizontal","typeCode","cardStackOffset","cardStack","numCardsInStack","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","getTokenInSlot","confused","tough","event","dx","target","dy","cancelBubble","handleHover","handleHoverLeave","localStorage","getItem","prevImgUrl","imgUrl","renderCard","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","Menu","keepMounted","open","onClose","anchorReference","anchorPosition","top","position","left","i","index","MenuItem","label","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","EncounterLoader","handleSelected","_event","loadCards","c","code","Autocomplete","options","encounterData","getOptionLabel","option","setData","name","style","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","Object","values","forEach","encounterCard","setCode","set_code","push","entries","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","loadState","serializedState","JSON","parse","err","console","error","localStorageState","initialState","ghostCards","dropTargetCard","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSetCode","data","investigator_code","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeck","relatedEncounterDeck","relatedObligationDeck","resetApp","createAction","getCardStackWithId","find","mutateCardWithId","callback","cardToUpdate","unselectAllCardsReducer","cardsSlice","createSlice","reducers","selectCard","unselectOtherCards","unselectCard","toggleSelectCard","exhaustCard","startCardMove","cardToStartMoving","splitTopCard","cardToMove","Error","topCard","shift","newCard","assign","uuidv4","foreachSelectedCard","cardMove","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCards","concat","length","selectMultipleCards","ids","unselectAllCards","hoverCard","cardToPreview","faceup","hoverLeaveCard","togglePanMode","flipCards","reverse","shuffleStack","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","resetCards","addCardStack","newStack","cardJsonIds","jsonId","statusTokens","toggleToken","cardToToggle","tokenType","adjustCounterToken","delta","pullCardOutOfCardStack","cardStackToUse","cardStackId","newCardStack","extraReducers","builder","addCase","fulfilled","log","heroCard","mainDeckStack","slots","cardDetails","Array","from","keys","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","completed","containerStyle","className","children","CardStackCardSelector","cardsDataInStack","cardSelected","cardsDataEntities","CardStackCardSelectorContainer","Counter","handleDecrement","updateCounterValueBy","handleIncrement","pos","App","stage","handleCounterValueUpdate","updateCounterValue","handleCounterDrag","moveCounter","newPos","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","handleLoadEncounter","renderCardSearch","showCardSearch","cardSearchPosition","cardStackForSearching","clearCardSearch","handleCardSelectedFromCardStack","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","updatePosition","handleCounterContextMenu","counterId","menuItems","removeCounter","handleCardContextMenu","cardId","currentStatusTokens","Stunned","Confused","Tough","Damage","Threat","Generic","handleCardClick","modifierKeyHeld","shiftKey","metaKey","ctrlKey","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","handleKeyPress","which","keyCode","redo","undo","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","button","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","handleMouseMove","addNewCounter","getCardType","getImgUrl","topCardData","bottomCardData","back_link","double_sided","octgn_id","loadCardsData","staticCards","tokens","movingCards","previewCards","showPreview","rawPos","previewPos","tabIndex","onKeyPress","Consumer","store","ref","stagePosition","innerHeight","onMouseUp","onMouseMove","onTouchMove","onWheel","counters","counter","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","SetData","card_set_type_code","getGame","game","gameSlice","AppContainer","ActionCreators","Boolean","location","hostname","match","rootReducer","combineReducers","undoable","limit","groupBy","groupByActionTypes","excludeAction","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","rtkConfigureStore","reducer","middleware","subscribe","throttle","blacklistStateKeys","stringify","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.276ad0bb.chunk.js","sourcesContent":["import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\nexport enum CounterTokenType {\n  Damage = \"damage\",\n  Threat = \"threat\",\n  Generic = \"generic\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; unselectOtherCards: boolean }>\n> = (state, action) => {\n  if (action.payload.unselectOtherCards) {\n    unselectAllCardsReducer(state, action);\n  }\n\n  mutateCardWithId(state, action.payload.id, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      selected: true,\n      dragging: true,\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst addCardStackReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ cardJsonIds: string[]; position: Vector2d }>\n> = (state, action) => {\n  const newStack: ICardStack = {\n    x: action.payload.position.x,\n    y: action.payload.position.y,\n    dragging: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: uuidv4(),\n    cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n      jsonId,\n    })),\n    selected: false,\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n    counterTokens: {\n      damage: 0,\n      threat: 0,\n      generic: 0,\n    },\n  };\n\n  state.cards.push(newStack);\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n\nconst adjustCounterTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: CounterTokenType; delta: number }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.counterTokens[action.payload.tokenType] +=\n      action.payload.delta;\n    if (cardToToggle.counterTokens[action.payload.tokenType] < 0) {\n      cardToToggle.counterTokens[action.payload.tokenType] = 0;\n    }\n  }\n};\n\nconst pullCardOutOfCardStackReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ cardStackId: string; jsonId: string; pos: Vector2d }>\n> = (state, action) => {\n  const cardStackToUse = state.cards.find(\n    (c) => c.id === action.payload.cardStackId\n  );\n  if (!!cardStackToUse && cardStackToUse.cardStack.length > 1) {\n    const newCardStack: ICardDetails[] = [{ jsonId: action.payload.jsonId }];\n    const newCard = Object.assign({}, cardStackToUse, {\n      cardStack: newCardStack,\n    });\n    newCard.id = uuidv4();\n    newCard.selected = true;\n    newCard.x = newCard.x + cardConstants.CARD_WIDTH + 5;\n\n    cardStackToUse.cardStack = cardStackToUse.cardStack.filter(\n      (c) => c.jsonId !== action.payload.jsonId\n    );\n    cardStackToUse.selected = false;\n\n    state.cards.push(newCard);\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n    resetCards: resetCardsReducer,\n    addCardStack: addCardStackReducer,\n    toggleToken: toggleTokenReducer,\n    adjustCounterToken: adjustCounterTokenReducer,\n    pullCardOutOfCardStack: pullCardOutOfCardStackReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCard = null;\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  resetCards,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect, Text } from \"react-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\ninterface IProps {\n  x: number;\n  y: number;\n  card: ICardStack;\n}\n\ninterface IState {\n  imagesLoaded: {\n    damage: boolean;\n    threat: boolean;\n    generic: boolean;\n  };\n}\n\nclass CardTokens extends Component<IProps, IState> {\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imagesLoaded: {\n        damage: false,\n        threat: false,\n        generic: false,\n      },\n    };\n\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // DAMAGE\n    this.damageImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: true,\n            threat: this.state.imagesLoaded.threat,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.damage) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    this.threatImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: true,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.threat) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // GENERIC\n    this.genericImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: this.state.imagesLoaded.threat,\n            generic: true,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.generic) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.damage &&\n      !prevProps.card?.counterTokens.damage &&\n      !!this.props.card?.counterTokens.damage\n    ) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    if (\n      !this.state.imagesLoaded.threat &&\n      !prevProps.card?.counterTokens.threat &&\n      !!this.props.card?.counterTokens.threat\n    ) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.generic &&\n      !prevProps.card?.counterTokens.generic &&\n      !!this.props.card?.counterTokens.generic\n    ) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    const damageX = this.props.x - this.damageImg.naturalWidth / 2;\n    const damageY = this.props.y - cardConstants.CARD_HEIGHT / 2 + 20;\n    const showDamage =\n      this.state.imagesLoaded.damage && !!this.props.card.counterTokens.damage;\n\n    const damageToken = showDamage ? (\n      <Rect\n        key={`${this.props.card.id}-damageToken`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        fillPatternImage={this.damageImg}\n      ></Rect>\n    ) : null;\n\n    const damageText = showDamage ? (\n      <Text\n        key={`${this.props.card.id}-damageText`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        text={`${this.props.card.counterTokens.damage}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const threatX = this.props.x - this.threatImg.naturalWidth / 2;\n    const threatY = damageY + this.damageImg.naturalHeight + 5;\n    const showThreat =\n      this.state.imagesLoaded.threat && !!this.props.card.counterTokens.threat;\n\n    const threatToken = showThreat ? (\n      <Rect\n        key={`${this.props.card.id}-threatToken`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        fillPatternImage={this.threatImg}\n      ></Rect>\n    ) : null;\n\n    const threatText = showThreat ? (\n      <Text\n        key={`${this.props.card.id}-threatText`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        text={`${this.props.card.counterTokens.threat}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const genericX = this.props.x - this.threatImg.naturalWidth / 2;\n    const genericY = threatY + this.threatImg.naturalHeight + 5;\n    const showGeneric =\n      this.state.imagesLoaded.generic &&\n      !!this.props.card.counterTokens.generic;\n\n    const genericToken = showGeneric ? (\n      <Rect\n        key={`${this.props.card.id}-genericToken`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        fillPatternImage={this.genericImg}\n      ></Rect>\n    ) : null;\n\n    const genericText = showGeneric ? (\n      <Text\n        key={`${this.props.card.id}-genericText`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        text={`${this.props.card.counterTokens.generic}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    return [\n      damageToken,\n      damageText,\n      threatToken,\n      threatText,\n      genericToken,\n      genericText,\n    ];\n  }\n}\n\nexport default CardTokens;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.cards.present;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.present.panMode;\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDoubleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private unmounted: boolean;\n  private renderAnimated: boolean = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (localStorage.getItem(\"__render_animated__\")) {\n      this.renderAnimated = true;\n    }\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.img = new Image();\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderAnimated\n      ? this.renderAnimatedCard(heightToUse, widthToUse)\n      : this.renderUnanimatedCard(heightToUse, widthToUse);\n  }\n\n  private renderAnimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  };\n\n  private renderUnanimatedCard = (heightToUse: number, widthToUse: number) => {\n    const scale = this.getScale(widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={this.img}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens =\n      this.props.dragging || this.props.isGhost ? null : (\n        <CardTokensContainer\n          key={`${this.props.id}-cardTokens`}\n          id={this.props.id}\n          x={this.props.x}\n          y={this.props.y}\n        ></CardTokensContainer>\n      );\n\n    return [\n      cardStack,\n      card,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrl?.includes(\"standard\") &&\n      this.props.imgUrl?.includes(\"_back\")\n    );\n  }\n\n  private getScale(widthToUse: number, heightToUse: number) {\n    const width = this.state.imageLoaded\n      ? widthToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const widthHorizontal = this.state.imageLoaded\n      ? heightToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const height = this.state.imageLoaded\n      ? heightToUse / this.img.naturalHeight\n      : heightToUse;\n\n    const heightHorizontal = this.state.imageLoaded\n      ? widthToUse / this.img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id, event);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id, event);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <Menu\n          keepMounted\n          open={true}\n          onClose={this.props.hideContextMenu}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{\n            top: this.props.position.y + 8,\n            left: this.props.position.x + 8,\n          }}\n        >\n          {this.props.items.map((i, index) => (\n            <MenuItem\n              key={`contextMenu-item-${index}`}\n              onClick={this.handleContextItemClicked(i)}\n            >\n              {i.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      this.props.loadCards(value.cards.map((c) => c.code));\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState || \"{}\").present;\n  } catch (err) {\n    console.error(\"problem parsing\");\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n    console.error(\"Error writing state to local storage\");\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { CounterTokenType, StatusTokenType } from \"./cards.slice\";\n\n// import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n  counterTokens: {\n    [K in CounterTokenType]: number;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState = loadState(\"cards\");\nconst defaultState: ICardsState = {\n  cards: [\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 200,\n    //   cardStack: [{ jsonId: \"01001a\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 400,\n    //   y: 400,\n    //   cardStack: [{ jsonId: \"01027\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 600,\n    //   cardStack: [{ jsonId: \"01036\" }],\n    // },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          value.set_code === `${heroSetCode}` &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      data: response.data,\n      relatedEncounterDeck: heroEncounterDeck,\n      relatedObligationDeck: heroObligationDeck,\n    };\n  }\n);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const resetApp = createAction(\"resetAction\");\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.handleClick}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    this.props.completed();\n  };\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { ICardStack } from \"./features/cards/initialState\";\ninterface IProps {\n  cardsDataEntities: ICardData;\n  card: ICardStack;\n  cardSelected: (jsonId: string) => void;\n}\n\nclass CardStackCardSelector extends Component<IProps> {\n  private cardsDataInStack: CardData[] = [];\n\n  constructor(props: IProps) {\n    super(props);\n    this.cardsDataInStack = props.card.cardStack.map((c) => {\n      return this.props.cardsDataEntities[c.jsonId];\n    });\n  }\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"cardstack-card-selector-combobox\"\n          options={this.cardsDataInStack}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Find Card...\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: CardData | null) => {\n    if (!!value && !!this.props.cardSelected) {\n      this.props.cardSelected(value.code);\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default CardStackCardSelector;\n","import { connect } from \"react-redux\";\nimport CardStackCardSelector from \"./CardStackCardSelector\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cardsDataEntities: getCardsDataEntities(state),\n  };\n};\n\nconst CardStackCardSelectorContainer = connect(\n  mapStateToProps,\n  {}\n)(CardStackCardSelector);\n\nexport default CardStackCardSelectorContainer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { Vector2d } from \"konva/types/types\";\nimport { Group, Rect, Text } from \"react-konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\n\ninterface IProps {\n  id: string;\n  pos: Vector2d;\n  value: number;\n  updateCounterValueBy: (amount: number) => void;\n  handleContextMenu: (event: KonvaEventObject<PointerEvent>) => void;\n  onDragEnd: (event: KonvaEventObject<DragEvent>) => void;\n}\n\nclass Counter extends Component<IProps> {\n  render() {\n    return (\n      <Group\n        x={this.props.pos.x}\n        y={this.props.pos.y}\n        draggable={true}\n        onContextMenu={this.props.handleContextMenu}\n        onDragEnd={this.props.onDragEnd}\n      >\n        <Rect cornerRadius={30} width={200} height={100} fill={\"red\"}></Rect>\n        <Text\n          width={200}\n          height={100}\n          fontSize={36}\n          text={`${this.props.value}`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n        ></Text>\n        <Text\n          x={10}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`-`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleDecrement}\n        ></Text>\n        <Text\n          x={140}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`+`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleIncrement}\n        ></Text>\n      </Group>\n    );\n  }\n\n  private handleDecrement = () => {\n    this.props.updateCounterValueBy(-1);\n  };\n\n  private handleIncrement = () => {\n    this.props.updateCounterValueBy(1);\n  };\n}\n\nexport default Counter;\n","import { ReactReduxContext, Provider } from \"react-redux\";\nimport * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport {\n  CounterTokenType,\n  StatusTokenType,\n} from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getDistance } from \"./utilities/geo\";\nimport CardStackCardSelectorContainer from \"./CardStackCardSelectorContainer\";\nimport Counter from \"./Counter\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (payload: { id: string; unselectOtherCards: boolean }) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n  adjustCounterToken: (payload: {\n    id: string;\n    tokenType: CounterTokenType;\n    delta: number;\n  }) => void;\n  pullCardOutOfCardStack: (payload: {\n    cardStackId: string;\n    jsonId: string;\n    pos: Vector2d;\n  }) => void;\n  addNewCounter: (pos: Vector2d) => void;\n  updateCounterValue: (payload: { id: string; delta: number }) => void;\n  removeCounter: (id: string) => void;\n  moveCounter: (payload: { id: string; newPos: Vector2d }) => void;\n  undo: () => void;\n  redo: () => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n  showCardSearch: boolean;\n  cardSearchPosition: Vector2d | null;\n  cardStackForSearching: ICardStack | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.handleCardClick(card)}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrl={this.getImgUrl(card)}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div\n        tabIndex={1}\n        onKeyDown={this.handleKeyDown}\n        onKeyPress={this.handleKeyPress}\n      >\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        {this.renderCardSearch()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer>\n                  {this.props.gameState.counters.map((counter) => (\n                    <Counter\n                      key={`${counter.id}-counter`}\n                      id={counter.id}\n                      pos={counter.position}\n                      value={counter.value}\n                      updateCounterValueBy={this.handleCounterValueUpdate(\n                        counter.id\n                      )}\n                      handleContextMenu={this.handleCounterContextMenu(\n                        counter.id\n                      )}\n                      onDragEnd={this.handleCounterDrag(counter.id)}\n                    ></Counter>\n                  ))}\n                </Layer>\n                <Layer preventDefault={true}>\n                  {staticCards\n                    .concat(ghostCards)\n                    .concat(movingCards)\n                    .concat(previewCards)}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"black\"\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private handleCounterValueUpdate = (id: string) => (delta: number) => {\n    this.props.updateCounterValue({ id, delta });\n  };\n\n  private handleCounterDrag = (id: string) => (\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    this.props.moveCounter({\n      id,\n      newPos: {\n        x: event.target.x(),\n        y: event.target.y(),\n      },\n    });\n  };\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderCardSearch = () => {\n    if (!this.state.showCardSearch) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.cardSearchPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing card search position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.cardStackForSearching ? (\n      <TopLayer position={pos} completed={this.clearCardSearch}>\n        <CardStackCardSelectorContainer\n          card={this.state.cardStackForSearching}\n          cardSelected={this.handleCardSelectedFromCardStack(\n            this.state.cardStackForSearching.id,\n            pos\n          )}\n        />\n      </TopLayer>\n    ) : null;\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private handleCardSelectedFromCardStack = (\n    cardStackId: string,\n    pos: Vector2d\n  ) => (jsonId: string) => {\n    this.clearCardSearch();\n    this.props.pullCardOutOfCardStack({ cardStackId, jsonId, pos });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private clearCardSearch = () => {\n    this.setState({\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCounterContextMenu = (counterId: string) => (\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Remove\",\n        action: () => {\n          this.props.removeCounter(counterId);\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard({ id: cardId, unselectOtherCards: false });\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n\n      menuItems.push({\n        label: \"Find Specific Card\",\n        action: () => {\n          if (!!card) {\n            this.setState({\n              showCardSearch: true,\n              cardSearchPosition: this.stage?.getPointerPosition() ?? null,\n              cardStackForSearching: card,\n            });\n          }\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: -1,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardClick = (card: ICardStack) => (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n\n    if (card.selected && modifierKeyHeld) {\n      this.props.toggleSelectCard(cardId);\n    } else {\n      this.props.selectCard({\n        id: cardId,\n        unselectOtherCards: !modifierKeyHeld,\n      });\n    }\n  };\n\n  private handleSelectAndExhaust = (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n    this.props.selectCard({ id: cardId, unselectOtherCards: !modifierKeyHeld });\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (\n      event.shiftKey &&\n      (event.ctrlKey || event.metaKey) &&\n      event.key === \"z\"\n    ) {\n      this.props.redo();\n    } else if ((event.ctrlKey || event.metaKey) && event.key === \"z\") {\n      event.preventDefault();\n      this.props.undo();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: KonvaEventObject<MouseEvent>) => {\n    if (event.evt.button === 0) {\n      // Only do something if it's the primary button (not a right-click)\n      const pos = this.getRelativePositionFromTarget(this.stage);\n\n      this.setState({\n        selectStartPos: {\n          x: pos.x,\n          y: pos.y,\n        },\n        selecting: true,\n      });\n    }\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Create new counter\",\n        action: () => {\n          this.props.addNewCounter(\n            this.getRelativePositionFromTarget(this.stage) ?? { x: 0, y: 0 }\n          );\n        },\n      },\n      { label: \"Reset\", action: this.props.resetApp },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n    const bottomCardData = this.props.cardsData[\n      card.cardStack[card.cardStack.length - 1].jsonId\n    ];\n\n    if (\n      !card.faceup &&\n      (!!bottomCardData.back_link || !!bottomCardData.double_sided)\n    ) {\n      return (\n        process.env.PUBLIC_URL +\n        \"/images/cards/\" +\n        bottomCardData.octgn_id +\n        \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + topCardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game.present;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n  counters: ICounter[];\n}\n\nexport interface ICounter {\n  id: string;\n  position: Vector2d;\n  value: number;\n}\n\nconst localStorageState = loadState(\"game\");\nconst defaultState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n  counters: [],\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { initialState, IGameState } from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\nconst addNewCounterReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.counters.push({\n    id: uuidv4(),\n    position: action.payload,\n    value: 0,\n  });\n};\n\nconst updateCounterValueReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ id: string; delta: number }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.value += action.payload.delta;\n    if (counter.value < 0) {\n      counter.value = 0;\n    }\n  }\n};\n\nconst removeCounterReducer: CaseReducer<IGameState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.counters = state.counters.filter((c) => c.id !== action.payload);\n};\n\nconst moveCounterReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ id: string; newPos: Vector2d }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.position = {\n      x: action.payload.newPos.x,\n      y: action.payload.newPos.y,\n    };\n  }\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n    addNewCounter: addNewCounterReducer,\n    updateCounterValue: updateCounterValueReducer,\n    removeCounter: removeCounterReducer,\n    moveCounter: moveCounterReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n      state.counters = [];\n    });\n  },\n});\n\nexport const {\n  updateZoom,\n  updatePosition,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  addCardStack,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n} from \"./features/cards/cards.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport {\n  updatePosition,\n  updateZoom,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n} from \"./features/game/game.slice\";\nimport { RootState } from \"./store/rootReducer\";\nimport { resetApp } from \"./store/global.actions\";\n\nimport { ActionCreators } from \"redux-undo\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n  undo: ActionCreators.undo,\n  redo: ActionCreators.redo,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards, {\n  cardMove,\n  hoverCard,\n  hoverLeaveCard,\n  startCardMove,\n} from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game, {\n  moveCounter,\n  updatePosition,\n  updateZoom,\n} from \"../features/game/game.slice\";\nimport undoable, { excludeAction, groupByActionTypes } from \"redux-undo\";\n\nconst rootReducer = combineReducers({\n  game: undoable(game, {\n    limit: 10,\n    groupBy: groupByActionTypes([moveCounter.type]),\n    filter: excludeAction([updateZoom.type, updatePosition.type]),\n  }),\n  cards: undoable(cards, {\n    limit: 10,\n    filter: excludeAction([\n      startCardMove.type,\n      cardMove.type,\n      hoverCard.type,\n      hoverLeaveCard.type,\n    ]),\n  }),\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n});\n\nexport default function configureStore() {\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}