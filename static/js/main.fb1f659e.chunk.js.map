{"version":3,"sources":["../node_modules/peerjs/dist sync","constants/card-constants.ts","CardTokens.tsx","features/cards/cards.selectors.ts","CardTokensContainer.tsx","constants/app-constants.ts","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/cards/cards.actions.ts","features/cards/cards.thunks.ts","store/global.actions.ts","TopLayer.tsx","CardStackCardSelector.tsx","CardStackCardSelectorContainer.tsx","Counter.tsx","PeerConnector.tsx","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/game/game.selectors.ts","features/game/game.actions.ts","features/game/initialState.ts","features/game/game.slice.ts","AppContainer.tsx","features/game/game.thunks.ts","serviceWorker.ts","store/rootReducer.ts","store/peer-js-redux-middleware.ts","store/configureStore.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","cardConstants","CardTokens","props","damageImg","threatImg","genericImg","unmounted","state","imagesLoaded","damage","threat","generic","Image","onload","setState","card","counterTokens","src","process","prevProps","prevState","this","damageX","x","naturalWidth","damageY","y","showDamage","damageToken","width","height","naturalHeight","fillPatternImage","damageText","text","fill","align","verticalAlign","fontSize","threatX","threatY","showThreat","threatToken","threatText","genericX","genericY","showGeneric","Component","getCards","cards","present","getCardMapById","createSelector","reduce","map","shouldShowPreview","previewCard","every","dragging","getPanMode","panMode","CardTokensContainer","connect","myPeerRef","uuidv4","HORIZONTAL_TYPE_CODES","Card","img","stunnedImg","confusedImg","toughImg","renderAnimated","renderAnimatedCard","heightToUse","widthToUse","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternScaleX","imageLoaded","fillPatternScaleY","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","renderUnanimatedCard","scale","getScale","fillPatternRotation","shouldRenderImageHorizontal","typeCode","shadowColor","controlledBy","selectedColor","cardStackOffset","cardStack","numCardsInStack","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","getTokenInSlot","confused","tough","event","dx","target","dy","cancelBubble","handleHover","handleHoverLeave","localStorage","getItem","prevImgUrl","imgUrl","renderCard","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","Menu","keepMounted","open","onClose","anchorReference","anchorPosition","top","position","left","i","index","MenuItem","label","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","EncounterLoader","handleSelected","_event","loadCards","c","Autocomplete","options","encounterData","getOptionLabel","option","setData","name","style","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","Object","values","forEach","encounterCard","setCode","set_code","push","entries","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","loadState","serializedState","JSON","parse","err","console","error","localStorageState","StatusTokenType","CounterTokenType","initialState","ghostCards","dropTargetCard","addCardStackWithId","createAction","pullCardOutOfCardStackWithId","startCardMoveWithSplitStackId","replaceCardStack","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSetCode","data","investigator_code","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeck","heroId","dataId","relatedEncounterDeck","encounterDeckId","relatedObligationDeck","obligationDeckId","shuffle","array","temporaryValue","randomIndex","returnArray","stringify","currentIndex","length","floor","random","resetApp","receiveRemoteGameState","getCardStackWithId","find","mutateCardWithId","ref","callback","cardToUpdate","unselectAllCardsReducer","ACTOR_REF","cardsSlice","createSlice","reducers","selectCard","unselectOtherCards","unselectCard","toggleSelectCard","exhaustCard","cardMove","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCards","concat","selectMultipleCards","ids","unselectAllCards","hoverCard","cardToPreview","faceup","hoverLeaveCard","togglePanMode","flipCards","reverse","resetCards","toggleToken","cardToToggle","statusTokens","tokenType","adjustCounterToken","delta","extraReducers","builder","addCase","cardToReplaceStack","newStack","cardJsonIds","jsonId","cardStackToUse","cardStackId","newCardStack","newCard","assign","cardToStartMoving","splitTopCard","cardToMove","topCard","shift","splitCardId","actorRef","foreachSelectedAndControlledCard","fulfilled","log","heroCard","mainDeckStack","slots","cardDetails","Array","from","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","completed","containerStyle","className","children","CardStackCardSelector","cardsDataInStack","cardSelected","cardsDataEntities","CardStackCardSelectorContainer","Counter","handleDecrement","updateCounterValueBy","handleIncrement","pos","PeerConnector","inputRef","App","stage","handleCounterValueUpdate","updateCounterValue","handleCounterDrag","moveCounter","newPos","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","handleLoadEncounter","renderCardSearch","showCardSearch","cardSearchPosition","cardStackForSearching","clearCardSearch","handleCardSelectedFromCardStack","renderPeerConnector","showPeerConnector","peerConnectorPosition","clearPeerConnector","handlePeerConnect","addCardStack","peerId","connectToRemoteGame","pullCardOutOfCardStack","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","updatePosition","handleCounterContextMenu","counterId","menuItems","removeCounter","handleCardContextMenu","cardId","currentStatusTokens","shuffleStack","Stunned","Confused","Tough","Damage","Threat","Generic","handleCardClick","modifierKeyHeld","shiftKey","metaKey","ctrlKey","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","startCardMove","handleKeyPress","which","keyCode","redo","undo","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","button","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","handleMouseMove","addNewCounter","getCardType","getImgUrl","topCardData","bottomCardData","back_link","double_sided","octgn_id","loadCardsData","staticCards","playerColors","tokens","movingCards","previewCards","showPreview","rawPos","previewPos","tabIndex","onKeyPress","Consumer","store","stagePosition","innerHeight","onMouseUp","onMouseMove","onTouchMove","onWheel","counters","counter","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","SetData","card_set_type_code","getGame","game","getPlayerColors","addNewCounterWithId","gameSlice","setPlayerColor","color","AppContainer","dispatch","payloadWithId","stackToShuffle","shuffledStack","ActionCreators","Boolean","location","hostname","match","rootReducer","combineReducers","undoable","limit","groupBy","groupByActionTypes","excludeAction","blacklistRemoteActions","setupConnection","conn","storeAPI","on","INITIAL_STATE_MSG","setTimeout","REMOTE_ACTION","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","activeCon","cgpPeer","Peer","undefined","debug","send","setPlayerColorAction","metadata","peerConnection","onconnectionstatechange","ev","connectionState","next","rtkConfigureStore","reducer","middleware","devTools","subscribe","throttle","blacklistStateKeys","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wukaAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,6wCCRZC,EACE,IADFA,EAEC,IAFDA,EAGU,IAHVA,EAIS,IC+OPC,E,kDA1Nb,WAAYC,GAAgB,IAAD,8BACzB,cAAMA,IANAC,eAKmB,IAJnBC,eAImB,IAHnBC,gBAGmB,IAFnBC,eAEmB,EAGzB,EAAKA,WAAY,EAEjB,EAAKC,MAAQ,CACXC,aAAc,CACZC,QAAQ,EACRC,QAAQ,EACRC,SAAS,IAIb,EAAKR,UAAY,IAAIS,MACrB,EAAKR,UAAY,IAAIQ,MACrB,EAAKP,WAAa,IAAIO,MAGtB,EAAKT,UAAUU,OAAS,WACjB,EAAKP,WACR,EAAKQ,SAAS,CACZN,aAAc,CACZC,QAAQ,EACRC,OAAQ,EAAKH,MAAMC,aAAaE,OAChCC,QAAS,EAAKJ,MAAMC,aAAaG,YAMnC,EAAKT,MAAMa,KAAKC,cAAcP,SAClC,EAAKN,UAAUc,IACbC,oDAIJ,EAAKd,UAAUS,OAAS,WACjB,EAAKP,WACR,EAAKQ,SAAS,CACZN,aAAc,CACZC,OAAQ,EAAKF,MAAMC,aAAaC,OAChCC,QAAQ,EACRC,QAAS,EAAKJ,MAAMC,aAAaG,YAMnC,EAAKT,MAAMa,KAAKC,cAAcN,SAClC,EAAKN,UAAUa,IACbC,oDAIJ,EAAKb,WAAWQ,OAAS,WAClB,EAAKP,WACR,EAAKQ,SAAS,CACZN,aAAc,CACZC,OAAQ,EAAKF,MAAMC,aAAaC,OAChCC,OAAQ,EAAKH,MAAMC,aAAaE,OAChCC,SAAS,MAMX,EAAKT,MAAMa,KAAKC,cAAcL,UAClC,EAAKN,WAAWY,IACdC,6DApEqB,E,+DAwEDC,EAAmBC,GAAoB,IAAD,YAG3DC,KAAKd,MAAMC,aAAaC,SACzB,UAACU,EAAUJ,YAAX,aAAC,EAAgBC,cAAcP,WAC9B,UAACY,KAAKnB,MAAMa,YAAZ,aAAC,EAAiBC,cAAcP,UAEjCY,KAAKlB,UAAUc,IACbC,oDAKDG,KAAKd,MAAMC,aAAaE,SACzB,UAACS,EAAUJ,YAAX,aAAC,EAAgBC,cAAcN,WAC9B,UAACW,KAAKnB,MAAMa,YAAZ,aAAC,EAAiBC,cAAcN,UAEjCW,KAAKjB,UAAUa,IACbC,oDAKDG,KAAKd,MAAMC,aAAaG,UACzB,UAACQ,EAAUJ,YAAX,aAAC,EAAgBC,cAAcL,YAC9B,UAACU,KAAKnB,MAAMa,YAAZ,aAAC,EAAiBC,cAAcL,WAEjCU,KAAKhB,WAAWY,IACdC,+D,0CAKJG,KAAKf,WAAY,I,6CAIjBe,KAAKf,WAAY,I,+BAIjB,IAAMgB,EAAUD,KAAKnB,MAAMqB,EAAIF,KAAKlB,UAAUqB,aAAe,EACvDC,EAAUJ,KAAKnB,MAAMwB,EAAI1B,EAA4B,EAAI,GACzD2B,EACJN,KAAKd,MAAMC,aAAaC,UAAYY,KAAKnB,MAAMa,KAAKC,cAAcP,OAE9DmB,EAAcD,EAClB,cAAC,IAAD,CAEEJ,EAAGD,EACHI,EAAGD,EACHI,MAAOR,KAAKlB,UAAUqB,aACtBM,OAAQT,KAAKlB,UAAU4B,cACvBC,iBAAkBX,KAAKlB,WANzB,UACUkB,KAAKnB,MAAMa,KAAKhB,GAD1B,iBAQE,KAEEkC,EAAaN,EACjB,cAAC,IAAD,CAEEJ,EAAGD,EACHI,EAAGD,EACHI,MAAOR,KAAKlB,UAAUqB,aACtBM,OAAQT,KAAKlB,UAAU4B,cACvBG,KAAI,UAAKb,KAAKnB,MAAMa,KAAKC,cAAcP,QACvC0B,KAAK,QACLC,MAAM,SACNC,cAAc,SACdC,SAAU,IAVZ,UACUjB,KAAKnB,MAAMa,KAAKhB,GAD1B,gBAYE,KAEEwC,EAAUlB,KAAKnB,MAAMqB,EAAIF,KAAKjB,UAAUoB,aAAe,EACvDgB,EAAUf,EAAUJ,KAAKlB,UAAU4B,cAAgB,EACnDU,EACJpB,KAAKd,MAAMC,aAAaE,UAAYW,KAAKnB,MAAMa,KAAKC,cAAcN,OAE9DgC,EAAcD,EAClB,cAAC,IAAD,CAEElB,EAAGgB,EACHb,EAAGc,EACHX,MAAOR,KAAKjB,UAAUoB,aACtBM,OAAQT,KAAKjB,UAAU2B,cACvBC,iBAAkBX,KAAKjB,WANzB,UACUiB,KAAKnB,MAAMa,KAAKhB,GAD1B,iBAQE,KAEE4C,EAAaF,EACjB,cAAC,IAAD,CAEElB,EAAGgB,EACHb,EAAGc,EACHX,MAAOR,KAAKjB,UAAUoB,aACtBM,OAAQT,KAAKjB,UAAU2B,cACvBG,KAAI,UAAKb,KAAKnB,MAAMa,KAAKC,cAAcN,QACvCyB,KAAK,QACLC,MAAM,SACNC,cAAc,SACdC,SAAU,IAVZ,UACUjB,KAAKnB,MAAMa,KAAKhB,GAD1B,gBAYE,KAEE6C,EAAWvB,KAAKnB,MAAMqB,EAAIF,KAAKjB,UAAUoB,aAAe,EACxDqB,EAAWL,EAAUnB,KAAKjB,UAAU2B,cAAgB,EACpDe,EACJzB,KAAKd,MAAMC,aAAaG,WACtBU,KAAKnB,MAAMa,KAAKC,cAAcL,QA4BlC,MAAO,CACLiB,EACAK,EACAS,EACAC,EA9BmBG,EACnB,cAAC,IAAD,CAEEvB,EAAGqB,EACHlB,EAAGmB,EACHhB,MAAOR,KAAKhB,WAAWmB,aACvBM,OAAQT,KAAKhB,WAAW0B,cACxBC,iBAAkBX,KAAKhB,YANzB,UACUgB,KAAKnB,MAAMa,KAAKhB,GAD1B,kBAQE,KAEgB+C,EAClB,cAAC,IAAD,CAEEvB,EAAGqB,EACHlB,EAAGmB,EACHhB,MAAOR,KAAKhB,WAAWmB,aACvBM,OAAQT,KAAKhB,WAAW0B,cACxBG,KAAI,UAAKb,KAAKnB,MAAMa,KAAKC,cAAcL,SACvCwB,KAAK,QACLC,MAAM,SACNC,cAAc,SACdC,SAAU,IAVZ,UACUjB,KAAKnB,MAAMa,KAAKhB,GAD1B,iBAYE,U,GAnNiBgD,a,QCfZC,EAAW,SAACzC,GAAD,OAAsBA,EAAM0C,MAAMC,SAE7CC,EAAiBC,YAAeJ,GAAU,SAACC,GACtD,OAAOA,EAAMA,MAAMI,QAAO,SAACC,EAAkCvC,GAE3D,OADAuC,EAAIvC,EAAKhB,IAAMgB,EACRuC,IACN,OAGQC,EAAoBH,YAAeJ,GAAU,SAACC,GACzD,QAASA,EAAMO,aAAeP,EAAMA,MAAMQ,OAAM,SAAC1C,GAAD,OAAWA,EAAK2C,eAGrDC,EAAa,SAACpD,GAAD,OAAsBA,EAAM0C,MAAMC,QAAQU,SCCrDC,EAFaC,aANJ,SAACvD,EAAkBL,GACzC,MAAO,CACLa,KAAMoC,EAAe5C,GAAOL,EAAMH,OAIe,GAAzB+D,CAA6B7D,G,SCd5C8D,EAAYC,cCUZC,EAAwB,CAAC,cAAe,eA2hBtCC,E,kDAzcb,WAAYhE,GAAgB,IAAD,oCACzB,cAAMA,IARAiE,SAOmB,IANnBC,gBAMmB,IALnBC,iBAKmB,IAJnBC,cAImB,IAHnBhE,eAGmB,IAFnBiE,gBAA0B,EAEP,EAuJnBC,mBAAqB,SAACC,EAAqBC,GACjD,OACE,cAAC,SAAD,CAEEC,QAAQ,EACRC,GAAI,CACFC,SAAU,EAAK3E,MAAM4E,UAAY,GAAK,GAJ1C,SAOG,SAACC,GAAD,OACC,cAAC,WAASC,KAAV,2BACMD,GADN,IAEEE,aAAc,EACd1D,EAAG,EAAKrB,MAAMqB,EACdG,EAAG,EAAKxB,MAAMwB,EACdG,MAAO6C,EACP5C,OAAQ2C,EACRS,OAAQ,CACN3D,EAAGmD,EAAa,EAChBhD,EAAG+C,EAAc,GAEnBU,OAAQ,EAAKjF,MAAMkF,WAAa,OAAS,GACzCC,YAAa,EAAKnF,MAAMkF,WAAa,EAAI,EACzCpD,iBAAkB,EAAKmC,IACvBmB,kBACE,EAAK/E,MAAMgF,YACPb,EAAa,EAAKP,IAAI3C,aACtBkD,EAENc,kBACE,EAAKjF,MAAMgF,YACPd,EAAc,EAAKN,IAAIpC,cACvB0C,EAENgB,WAAY,EAAKvF,MAAMwD,SAAW,GAAK,EAAKxD,MAAMwF,SAAW,EAAI,EACjEC,QAAS,EAAKzF,MAAM0F,QAAU,GAAM,EACpCC,WAAW,EACXC,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,UAAW,EAAKC,cAChBC,WAAY,EAAKC,kBACjBC,SAAU,EAAKD,kBACfE,QAAS,EAAKC,YACdC,MAAO,EAAKD,YACZE,YAAa,EAAKC,gBAClBC,aAAc,EAAKD,gBACnBE,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,cAAe,EAAKC,uBA9C1B,UACU,EAAKhH,MAAMH,GADrB,WAzJuB,EA8MnBoH,qBAAuB,SAAC1C,EAAqBC,GAAwB,IAAD,MACpE0C,EAAQ,EAAKC,SAAS3C,EAAYD,GAClCS,EAAS,CACb3D,EAAGmD,EAAa,EAChBhD,EAAG+C,EAAc,GAGb1D,EACJ,cAAC,IAAD,CAEE4D,QAAQ,EACRE,SAAU,EAAK3E,MAAM4E,UAAY,GAAK,EACtCG,aAAc,EACd1D,EAAG,EAAKrB,MAAMqB,EACdG,EAAG,EAAKxB,MAAMwB,EACdG,MAAO6C,EACP5C,OAAQ2C,EACRS,OAAQA,EACRC,OAAQ,EAAKjF,MAAMkF,WAAa,OAAS,GACzCC,YAAa,EAAKnF,MAAMkF,WAAa,EAAI,EACzCkC,oBACE,EAAKC,4BACH,EAAKrH,MAAMsH,UAAY,GACvBvD,GAEE,IACA,EAENjC,iBAAkB,EAAKmC,IACvBmB,kBAAmB8B,EAAMvF,MACzB2D,kBAAmB4B,EAAMtF,OAEzB2F,YACI,EAAKvH,MAAMwH,aAAe,EAAKxH,MAAMyH,cAAgB,QAEzDlC,WAAY,EAAKvF,MAAMwD,SAAW,GAAK,EAAKxD,MAAMwF,SAAW,GAAK,EAClEC,QAAS,EAAKzF,MAAM0F,QAAU,GAAM,EACpCC,UAC8B,KAA5B,EAAK3F,MAAMwH,cACX,EAAKxH,MAAMwH,eAAiB3D,EAE9B+B,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,UAAW,EAAKC,cAChBC,WAAY,EAAKC,kBACjBC,SAAU,EAAKD,kBACfE,QAAS,EAAKC,YACdC,MAAO,EAAKD,YACZE,YAAa,EAAKC,gBAClBC,aAAc,EAAKD,gBACnBE,YAAa,EAAKC,gBAClBC,WAAY,EAAKC,eACjBC,cAAe,EAAKC,mBA5CtB,UACU,EAAKhH,MAAMH,GADrB,UAgDI6H,EAAkB,CACtBrG,EAAG2D,EAAO3D,EAAI,EACdG,EAAGwD,EAAOxD,EAAI,GAGVmG,GACH,EAAK3H,MAAM4H,iBAAmB,GAAK,EAClC,cAAC,IAAD,CAEEnD,QAAQ,EACRE,SAAU,EAAK3E,MAAM4E,UAAY,GAAK,EACtCG,aAAc,CAAC,EAAG,EAAG,EAAG,GACxB1D,EAAG,EAAKrB,MAAMqB,EACdG,EAAG,EAAKxB,MAAMwB,EACdG,MAAO6C,EACP5C,OAAQ2C,EACRS,OAAQ0C,EACRjC,QAAS,EAAKzF,MAAM0F,QAAU,GAAM,EACpCzD,KAAM,OACNsD,WAAY,EAAKvF,MAAMwD,SAAW,GAAK,EAAKxD,MAAMwF,SAAW,EAAI,GAZnE,UACU,EAAKxF,MAAMH,GADrB,eAcE,KAEAgI,KACH,UAAC,EAAK7H,MAAM8H,iBAAZ,aAAC,EAAsBC,UAAW,EAAK1H,MAAM2H,kBAAkBD,QA+BlE,MAAO,CACLJ,EACA9G,EA/BmB,EAAKoH,eACxBJ,EACA,EAAK3D,WACLc,EACA,GAEoB,EAAKiD,kBACxB,UAAC,EAAKjI,MAAM8H,iBAAZ,aAAC,EAAsBI,WAAY,EAAK7H,MAAM2H,kBAAkBE,SACjE,EAAK/D,YACLa,EACA,GAEiB,EAAKiD,kBACrB,UAAC,EAAKjI,MAAM8H,iBAAZ,aAAC,EAAsBK,QAAS,EAAK9H,MAAM2H,kBAAkBG,MAC9D,EAAK/D,SACLY,EACA,GAIA,EAAKhF,MAAMwD,UAAY,EAAKxD,MAAM0F,QAAU,KAC1C,cAAC,EAAD,CAEE7F,GAAI,EAAKG,MAAMH,GACfwB,EAAG,EAAKrB,MAAMqB,EACdG,EAAG,EAAKxB,MAAMwB,GAJhB,UACU,EAAKxB,MAAMH,GADrB,kBArTqB,EA+YnBmH,kBAAoB,SAACoB,GACrB,EAAKpI,MAAMgH,mBACf,EAAKhH,MAAMgH,kBAAkB,EAAKhH,MAAMH,GAAIuI,IAjZrB,EAqZnBjC,kBAAoB,SAACiC,GACvB,EAAKpI,MAAMmG,mBACb,EAAKnG,MAAMmG,kBAAkB,EAAKnG,MAAMH,GAAIuI,IAvZrB,EA2ZnBvC,gBAAkB,SAACuC,GACrB,EAAKpI,MAAM6F,iBACb,EAAK7F,MAAM6F,gBAAgB,EAAK7F,MAAMH,GAAIuI,IA7ZnB,EAianBrC,eAAiB,SAACqC,GACpB,EAAKpI,MAAM+F,gBACb,EAAK/F,MAAM+F,eAAe,CACxBlG,GAAI,EAAKG,MAAMH,GACfwI,GAAID,EAAME,OAAOjH,IAAM,EAAKrB,MAAMqB,EAClCkH,GAAIH,EAAME,OAAO9G,IAAM,EAAKxB,MAAMwB,KAtab,EA2anByE,cAAgB,WAClB,EAAKjG,MAAMiG,eAAiB,EAAKjG,MAAMwD,UACzC,EAAKxD,MAAMiG,cAAc,EAAKjG,MAAMH,KA7ab,EAibnByG,YAAc,SAAC8B,GACjB,EAAKpI,MAAMsG,cACb,EAAKtG,MAAMsG,YAAY,EAAKtG,MAAMH,GAAIuI,GACtCA,EAAMI,cAAe,IApbE,EAwbnB/B,gBAAkB,SAAC2B,GACzBA,EAAMI,cAAe,GAzbI,EA4bnB5B,gBAAkB,WACpB,EAAK5G,MAAMyI,aACb,EAAKzI,MAAMyI,YAAY,EAAKzI,MAAMH,KA9bX,EAkcnBiH,eAAiB,WACnB,EAAK9G,MAAM0I,kBACb,EAAK1I,MAAM0I,iBAAiB,EAAK1I,MAAMH,KAjcrC8I,aAAaC,QAAQ,yBACvB,EAAKvE,gBAAiB,GAGxB,EAAKjE,WAAY,EAEjB,EAAKC,MAAQ,CACXgF,aAAa,EACbwD,WAAY,EAAK7I,MAAM8I,OACvBd,kBAAmB,CACjBD,SAAS,EACTG,UAAU,EACVC,OAAO,IAIX,EAAKlE,IAAM,IAAIvD,MACf,EAAKwD,WAAa,IAAIxD,MACtB,EAAKyD,YAAc,IAAIzD,MACvB,EAAK0D,SAAW,IAAI1D,MAGpB,EAAKuD,IAAItD,OAAS,WACX,EAAKP,WACR,EAAKQ,SAAS,CACZyE,aAAa,KAKfrF,EAAM8I,SACR,EAAK7E,IAAIlD,IAAMf,EAAM8I,QAIvB,EAAK5E,WAAWvD,OAAS,WAClB,EAAKP,WACR,EAAKQ,SAAS,CACZoH,kBAAmB,CACjBD,SAAS,EACTG,SAAU,EAAK7H,MAAM2H,kBAAkBE,SACvCC,MAAO,EAAK9H,MAAM2H,kBAAkBG,WAMvC,UAACnI,EAAM8H,iBAAP,aAAC,EAAiBC,WACrB,EAAK7D,WAAWnD,IACdC,qDAIJ,EAAKmD,YAAYxD,OAAS,WACnB,EAAKP,WACR,EAAKQ,SAAS,CACZoH,kBAAmB,CACjBD,QAAS,EAAK1H,MAAM2H,kBAAkBD,QACtCG,UAAU,EACVC,MAAO,EAAK9H,MAAM2H,kBAAkBG,WAMvC,UAACnI,EAAM8H,iBAAP,aAAC,EAAiBI,YACrB,EAAK/D,YAAYpD,IACfC,sDAIJ,EAAKoD,SAASzD,OAAS,WAChB,EAAKP,WACR,EAAKQ,SAAS,CACZoH,kBAAmB,CACjBD,QAAS,EAAK1H,MAAM2H,kBAAkBD,QACtCG,SAAU,EAAK7H,MAAM2H,kBAAkBE,SACvCC,OAAO,OAMV,UAACnI,EAAM8H,iBAAP,aAAC,EAAiBK,SACrB,EAAK/D,SAASrD,IAAMC,mDAvFG,E,0EAvBKhB,EAAeK,GAC7C,OAAIL,EAAM8I,SAAWzI,EAAMwI,WAClB,CACLxD,aAAa,EACbwD,WAAY7I,EAAM8I,OAClBd,kBAAmB,CACjBD,QAAS1H,EAAM2H,kBAAkBD,QACjCG,SAAU7H,EAAM2H,kBAAkBE,SAClCC,MAAO9H,EAAM2H,kBAAkBG,QAK9B,S,wDAqGiBlH,EAAmBC,GAAoB,IAAD,aAE3DC,KAAKd,MAAMgF,aACZlE,KAAKnB,MAAM8I,QACX3H,KAAKnB,MAAM8I,SAAW3H,KAAK8C,IAAIlD,MAE/BI,KAAK8C,IAAIlD,IAAMI,KAAKnB,MAAM8I,QAKzB3H,KAAKd,MAAM2H,kBAAkBD,UAC9B,UAAC9G,EAAU6G,iBAAX,aAAC,EAAqBC,YACrB,UAAC5G,KAAKnB,MAAM8H,iBAAZ,aAAC,EAAsBC,WAExB5G,KAAK+C,WAAWnD,IACdC,qDAKDG,KAAKd,MAAM2H,kBAAkBE,WAC9B,UAACjH,EAAU6G,iBAAX,aAAC,EAAqBI,aACrB,UAAC/G,KAAKnB,MAAM8H,iBAAZ,aAAC,EAAsBI,YAExB/G,KAAKgD,YAAYpD,IACfC,sDAKDG,KAAKd,MAAM2H,kBAAkBG,QAC9B,UAAClH,EAAU6G,iBAAX,aAAC,EAAqBK,UACrB,UAAChH,KAAKnB,MAAM8H,iBAAZ,aAAC,EAAsBK,SAExBhH,KAAKiD,SAASrD,IAAMC,qD,0CAKtBG,KAAKf,WAAY,I,6CAIjBe,KAAKf,WAAY,I,+BAIjB,OAAOe,KAAKd,MAAMgF,YAAclE,KAAK4H,aAAe,O,mCAIpD,IAAMxE,EAAcpD,KAAKnB,MAAM4B,QAAU9B,EACnC0E,EAAarD,KAAKnB,MAAM2B,OAAS7B,EAEvC,OAAOqB,KAAKkD,eACRlD,KAAKmD,mBAAmBC,EAAaC,GACrCrD,KAAK8F,qBAAqB1C,EAAaC,K,qCAoL3CwE,EACA/E,EACAe,EACAiE,GAEA,IAAMC,EAAa,CACjBvH,MAAOsC,EAAI3C,aAAe,EAC1BM,OAAQqC,EAAIpC,cAAgB,GAGxBsH,EAAgB,CACpB9H,EAAG2D,EAAO3D,EAAIvB,EAA2BoJ,EAAWvH,MAAQ,EAC5DH,EAAGwD,EAAOxD,EAAI0H,EAAWtH,OAASqH,EAAO,GAAKA,EAAO,GAAK,IAG5D,OAAOD,EACL,cAAC,IAAD,CAEEvE,QAAQ,EACRM,aAAc,EACd1D,EAAGF,KAAKnB,MAAMqB,EACdG,EAAGL,KAAKnB,MAAMwB,EACdG,MAAOuH,EAAWvH,MAClBC,OAAQsH,EAAWtH,OACnBwD,kBAAmB,GACnBE,kBAAmB,GACnBN,OAAQmE,EACRrH,iBAAkBmC,GAXpB,UACU9C,KAAKnB,MAAMH,GADrB,kBACiCoJ,IAY/B,O,kDAIJG,EACAC,GAEA,OAAOA,EAAUC,SAASF,KAAUjI,KAAKoI,gB,+BAU1B/E,EAAoBD,GACnC,IAAM5C,EAAQR,KAAKd,MAAMgF,YACrBb,EAAarD,KAAK8C,IAAI3C,aACtBkD,EAEEgF,EAAkBrI,KAAKd,MAAMgF,YAC/Bd,EAAcpD,KAAK8C,IAAI3C,aACvBkD,EAEE5C,EAAST,KAAKd,MAAMgF,YACtBd,EAAcpD,KAAK8C,IAAIpC,cACvB0C,EAEEkF,EAAmBtI,KAAKd,MAAMgF,YAChCb,EAAarD,KAAK8C,IAAIpC,cACtB0C,EAEJ,OAAOpD,KAAKkG,4BACVlG,KAAKnB,MAAMsH,UAAY,GACvBvD,GAEE,CAAEpC,MAAO6H,EAAiB5H,OAAQ6H,GAClC,CAAE9H,QAAOC,Y,oCA7Bc,IAAD,IAC1B,OACE,UAAAT,KAAKnB,MAAM8I,cAAX,eAAmBQ,SAAS,eAA5B,UACAnI,KAAKnB,MAAM8I,cADX,aACA,EAAmBQ,SAAS,c,GA3YfzG,a,kBCLJ6G,E,4MAfLC,eAAiB,SACvBvB,GAEAA,EAAMuB,kB,EAGAC,yBAA2B,SAACC,GAAD,OAA2B,WAC5DA,EAAKC,SACC,EAAK9J,MAAM+J,oBACf,EAAK/J,MAAM+J,mBAAmB,EAAK/J,MAAMgK,MAAM,IAEjD,EAAKhK,MAAMiK,oB,uDAzCH,IAAD,OACP,OACE,qBACEpK,GAAG,qBACHkH,cAAe5F,KAAKwI,eACpBtD,QAASlF,KAAKnB,MAAMiK,gBAHtB,SAKE,cAACC,EAAA,EAAD,CACEC,aAAW,EACXC,MAAM,EACNC,QAASlJ,KAAKnB,MAAMiK,gBACpBK,gBAAgB,iBAChBC,eAAgB,CACdC,IAAKrJ,KAAKnB,MAAMyK,SAASjJ,EAAI,EAC7BkJ,KAAMvJ,KAAKnB,MAAMyK,SAASpJ,EAAI,GAPlC,SAUGF,KAAKnB,MAAMgK,MAAM5G,KAAI,SAACuH,EAAGC,GAAJ,OACpB,cAACC,EAAA,EAAD,CAEExE,QAAS,EAAKuD,yBAAyBe,GAFzC,SAIGA,EAAEG,OAJL,2BAC2BF,e,GApBb/H,aCWXkI,E,4MAXLvC,aAAe,SAACJ,GACtBA,EAAM4C,mB,EAGAC,cAAgB,SAAC7C,GACL,UAAdA,EAAM8C,KACR,EAAKlL,MAAMmL,YAAY/C,EAAMgD,cAAcC,Q,uDAf7C,OACE,uBACEC,UAAWnK,KAAK8J,cAChB5E,QAASlF,KAAKqH,aACdY,KAAK,e,GANYvG,a,kBCgCV0I,E,4MAXLC,eAAiB,SAACC,EAAaJ,GAC/BA,GACJ,EAAKrL,MAAM0L,UAAUL,EAAMtI,MAAMK,KAAI,SAACuI,GAAD,OAAOA,EAAEnM,U,EAI1CgJ,aAAe,SAACJ,GACtBA,EAAM4C,mB,uDAvBN,OACE,qBAAK3E,QAASlF,KAAKqH,aAAnB,SACE,cAACoD,EAAA,EAAD,CACE/L,GAAG,4BACHgM,QAAS1K,KAAKnB,MAAM8L,eAAiB,GACrCC,eAAgB,SAACC,GAAD,OAAYA,EAAOC,QAAQC,MAC3CC,MAAO,CAAExK,MAAO,KAChByK,SAAUjL,KAAKqK,eACfa,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBxB,MAAM,gBAAgB0B,QAAQ,uB,GAXnC3J,a,QCCjB4J,EAAe,SAACpM,GAAD,OAAsBA,EAAMqM,WAE3CC,EAAuBzJ,YAClCuJ,GACA,SAACC,GACC,OAAO,2BAAKA,EAAUE,UAAaF,EAAUG,sBAIpCC,EAA2B5J,YACtCuJ,GACA,SAACC,GACC,OAAOA,EAAUE,YAIRG,EAAgC7J,YAC3CuJ,GACA,SAACC,GACC,OAAOA,EAAUG,qBAIRG,EAAsB9J,YAAeuJ,GAAc,SAACC,GAC/D,OAAOA,EAAUT,WAGNgB,EAAyC/J,YACpD6J,EACAC,GACA,SAACH,EAAmBZ,GAClB,IAAMiB,EAAoD,GAW1D,OATAC,OAAOC,OAAOP,GAAmBQ,SAAQ,SAACC,GACxC,IAAMC,EAAUD,EAAcE,UAAY,UACpCN,EAAmBK,GACvBL,EAAmBK,GAASE,KAAKH,GAEjCJ,EAAmBK,GAAW,CAACD,MAI5BH,OAAOO,QAAQR,GACnB9J,KAAI,mCAAE8H,EAAF,KAAOG,EAAP,WAAmB,CACtBkC,QAASrC,EACTe,QAASA,EAAQf,GACjBnI,MAAOsI,MAERsC,QACC,SAACC,GAAD,MAC8B,YAA5BA,EAAI3B,QAAQ4B,aACgB,SAA5BD,EAAI3B,QAAQ4B,eAEfC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9B,QAAQC,KAAO8B,EAAE/B,QAAQC,KAAO,GAAK,QClD/C+B,EAFkBrK,aANT,SAACvD,GACvB,MAAO,CACLyL,cAAemB,EAAuC5M,MAIA,GAAzBuD,CAA6B2H,G,QCVjD2C,EAAc,SAACC,EAAkBC,GAC5C,IAAMC,EAASF,EAAO9M,EAAI+M,EAAO/M,EAC3BiN,EAASH,EAAO3M,EAAI4M,EAAO5M,EACjC,OAAO+M,KAAKC,KAAKH,EAASA,EAASC,EAASA,ICHjCG,EAAY,SAACvD,GACxB,IACE,IAAMwD,EAAkB/F,aAAaC,QAAQsC,GAC7C,OAAwB,OAApBwD,EACK,GAEFC,KAAKC,MAAMF,GAAmB,MAAM1L,QAC3C,MAAO6L,GAEP,OADAC,QAAQC,MAAM,mBACP,KC2BLC,EAAiCP,EAAU,SAG3CO,EAAkBjM,OACtBiM,EAAkBjM,MAAMsK,SAAQ,SAAC1B,GAC/BA,EAAEnE,aAAe,GACjBmE,EAAEnG,UAAW,KAIjB,IC5BYyJ,GAMAC,GD8BCC,GAAyB,2BARJ,CAChCpM,MAAO,GACPqM,WAAY,GACZ9L,YAAa,KACb+L,eAAgB,KAChB3L,SAAS,IAKNsL,G,mDE9BQM,GAAqBC,YAChC,sBAGWC,GAA+BD,YAC1C,gCAGWE,GAAgCF,YAC3C,iCAGWG,GAAmBH,YAC9B,oBCqCWI,GAAoBC,YAC/B,2BAD+C,yCAE/C,WAAOC,EAAqDC,GAA5D,4BAAA/B,EAAA,sEACyBgC,KAAMC,IAAN,oDACwBH,EAAQI,aAFzD,cACQC,EADR,OAIQ7P,EAAmByP,EAASK,WAC5BC,EAAgBtD,EAAyBzM,GACzCgQ,EAAcD,EAAcF,EAASI,KAAKC,mBAAmB/C,SAC7DgD,EAAqBzD,EAA8B1M,GAEnDoQ,EAAqBtD,OAAOO,QAAQ8C,GACvC7C,QACC,mCAAQtC,GAAR,kBACEA,EAAMmC,WAAN,UAAsB6C,IACF,eAApBhF,EAAMqF,aAETtN,KAAI,mCAAE8H,EAAF,iBAAmBA,KAEpByF,EAAoBxD,OAAOO,QAAQ8C,GACtC7C,QAAO,oDAAyBH,WAAN,UAAsB6C,EAAtB,eAC1BjN,KAAI,mCAAE8H,EAAF,iBAAmBA,KAnB5B,kBAqBS,CACLT,SAAUoF,EAAQpF,SAClBmG,OAAQ9M,cACRwM,KAAMJ,EAASI,KACfO,OAAQ/M,cACRgN,qBAAsBH,EACtBI,gBAAiBjN,cACjBkN,sBAAuBP,EACvBQ,iBAAkBnN,gBA7BtB,4CAF+C,yDAoC3CoN,GAAU,SAACC,GAOf,IANA,IAEEC,EACAC,EAHIC,EAAc3C,KAAKC,MAAMD,KAAK4C,UAAUJ,IAC1CK,EAAeF,EAAYG,OAKxB,IAAMD,GAEXH,EAAc9C,KAAKmD,MAAMnD,KAAKoD,SAAWH,GAIzCJ,EAAiBE,EAHjBE,GAAgB,GAIhBF,EAAYE,GAAgBF,EAAYD,GACxCC,EAAYD,GAAeD,EAG7B,OAAOE,GCjIIM,GAAWrC,YAAa,eAExBsC,GAAyBtC,YACpC,2B,SHcUN,K,kBAAAA,E,oBAAAA,E,eAAAA,Q,cAMAC,K,gBAAAA,E,gBAAAA,E,mBAAAA,Q,KAOZ,IAAM4C,GAAqB,SACzBzR,EACAR,GAEA,OAAOQ,EAAM0C,MAAMgP,MAAK,SAAClR,GAAD,OAAUA,EAAKhB,KAAOA,MAG1CmS,GAAmB,SACvB3R,EACAR,EACAoS,EACAC,GAEA,IAAMC,EAAeL,GAAmBzR,EAAOR,IAE7CsS,GAC+B,KAA9BA,EAAa3K,cAAuB2K,EAAa3K,eAAiByK,GAEnEC,EAASC,IA0LPC,GAAwE,SAC5E/R,EACAyJ,GAEAzJ,EAAM0C,MACH4K,QACC,SAAC9M,GAAD,MACwB,KAAtBA,EAAK2G,cACL3G,EAAK2G,eAAkBsC,EAAeuI,aAEzChF,SAAQ,SAACxM,GACRA,EAAK2E,UAAW,EAChB3E,EAAK2G,aAAe,OAqEpB8K,GAAaC,YAAY,CAC7BrG,KAAM,QACNiD,aAAcA,GACdqD,SAAU,CACRC,WApPA,SAACpS,EAAOyJ,GACNA,EAAO+F,QAAQ6C,oBACjBN,GAAwB/R,EAAOyJ,GAGjCkI,GACE3R,EACAyJ,EAAO+F,QAAQhQ,GACdiK,EAAeuI,WAChB,SAACxR,GACCA,EAAK2E,UAAW,EAChB3E,EAAK2G,aAAgBsC,EAAeuI,cA0OtCM,aArOyE,SAC3EtS,EACAyJ,GAEAkI,GAAiB3R,EAAOyJ,EAAO+F,QAAU/F,EAAeuI,WAAW,SAACxR,GAClEA,EAAK2E,UAAW,EAChB3E,EAAK2G,aAAe,OAgOpBoL,iBAzNA,SAACvS,EAAOyJ,GACVkI,GAAiB3R,EAAOyJ,EAAO+F,QAAU/F,EAAeuI,WAAW,SAACxR,GAClEA,EAAK2E,UAAY3E,EAAK2E,SACjB3E,EAAK2E,SAGR3E,EAAK2G,aAAgBsC,EAAeuI,UAFpCxR,EAAK2G,aAAe,OAsNtBqL,YA/MwE,SAC1ExS,EACAyJ,GAEAzJ,EAAM0C,MACH4K,QACC,SAAC9M,GAAD,OACEA,EAAK2G,eAAkBsC,EAAeuI,YACrCxR,EAAKhB,KAAOiK,EAAO+F,SAAWhP,EAAK2E,aAEvC6H,SAAQ,SAACxM,GACRA,EAAK+D,WAAa/D,EAAK+D,cAqMzBkO,SA9LA,SAACzS,EAAOyJ,GAAY,IAAD,IAGjBiJ,EAFEC,EAA2B,GAIjC3S,EAAM0C,MACH4K,QACC,SAAC9M,GAAD,OACEA,EAAKhB,KAAOiK,EAAO+F,QAAQhQ,IAC1BgB,EAAK2E,UAAY3E,EAAK2G,eAAkBsC,EAAeuI,aAE3DhF,SAAQ,SAACxM,GACJA,EAAKhB,KAAOiK,EAAO+F,QAAQhQ,KAC7BkT,EAAclS,GAGhBA,EAAKQ,GAAKyI,EAAO+F,QAAQxH,GACzBxH,EAAKW,GAAKsI,EAAO+F,QAAQtH,GAEzByK,EAAWvF,KAAK5M,MAKpB,IAAMoS,EAAgE,IA/F1C,SAC5B5S,EACA6R,GAEA7R,EAAM0C,MACH4K,QAAO,SAAC9M,GAAD,OAAWA,EAAK2E,YACvB6H,SAAQ,SAACxM,GAAD,OAAUqR,EAASrR,MA0F9BqS,CAAsB7S,GAAO,SAACQ,GAC5B,IAAMsS,EAAWjF,EAAYrN,EAAMkS,GAC/BI,EAjJ0B,IAkJ5BF,EAAoBxF,KAAK,CACvB0F,WACAtS,YAKNR,EAAMgP,eAAN,oBACE4D,EAAoBnF,MAAK,SAACsF,EAAIC,GAAL,OAAYD,EAAGD,SAAWE,EAAGF,YAAU,UADlE,aACE,EAAoEtS,YADtE,QAEE,KAIFmS,EAAW3F,SAAQ,SAACiG,GAClBjT,EAAM0C,MAAM0K,KAAKpN,EAAM0C,MAAMwQ,OAAOlT,EAAM0C,MAAMyQ,QAAQF,GAAY,GAAG,QAqJvEG,YAjJwE,SAC1EpT,EACAyJ,GAEA,IAAI4J,EAAkC,GAatC,GAZArT,EAAM0C,MACH4K,QAAO,SAAC9M,GAAD,OAAUA,EAAKhB,KAAOiK,EAAO+F,SAAWhP,EAAK2E,YACpD6H,SAAQ,SAACxM,GACRA,EAAK2C,UAAW,EAEVnD,EAAMgP,iBAEVqE,EAAkBA,EAAgBC,OAAO9S,EAAK8G,eAK9CtH,EAAMgP,eAAgB,CAC1BhP,EAAM0C,MAAQ1C,EAAM0C,MAAM4K,QACxB,SAAC9M,GAAD,QAAYA,EAAKhB,KAAOiK,EAAO+F,SAAWhP,EAAK2E,aAGjD,IAAM6J,EAAiBhP,EAAM0C,MAAMgP,MACjC,SAAClR,GAAD,aAAUA,EAAKhB,MAAL,UAAYQ,EAAMgP,sBAAlB,aAAY,EAAsBxP,OAExCwP,GAAkBqE,EAAgBjC,OAAS,IAE/CpC,EAAe1H,UAAY+L,EAAgBC,OACzCtE,EAAe1H,YAKrBtH,EAAM+O,WAAa,GACnB/O,EAAMgP,eAAiB,MAgHrBuE,oBA1GA,SAACvT,EAAOyJ,GACVA,EAAO+F,QAAQgE,IACZzQ,KAAI,SAACvD,GAAD,OAAQQ,EAAM0C,MAAMgP,MAAK,SAAClR,GAAD,OAAUA,EAAKhB,KAAOA,QACnDwN,SAAQ,SAACxM,IAENA,GACuB,KAAtBA,EAAK2G,cACJ3G,EAAK2G,eAAkBsC,EAAeuI,YAExCxR,EAAK2E,UAAW,EAChB3E,EAAK2G,aAAgBsC,EAAeuI,eAiGxCyB,iBAAkB1B,GAClB2B,UA7EsE,SACxE1T,EACAyJ,GAEA,IAAMkK,EAAgB3T,EAAM0C,MAAMgP,MAAK,SAACpG,GAAD,OAAOA,EAAE9L,KAAOiK,EAAO+F,YAC1D,OAACmE,QAAD,IAACA,OAAD,EAACA,EAAeC,UAEM,OAAtB5T,EAAMiD,YACRjD,EAAMiD,YAAc,CAClBzD,GAAIiK,EAAO+F,SAEJ/F,EAAO+F,UAAYxP,EAAMiD,YAAYzD,KAC9CQ,EAAMiD,YAAYzD,GAAKiK,EAAO+F,WAkE9BqE,eA9DoD,SAAC7T,GAC7B,OAAtBA,EAAMiD,cACRjD,EAAMiD,YAAc,OA6DpB6Q,cAzDmD,SAAC9T,GACtDA,EAAMqD,SAAWrD,EAAMqD,SAyDrB0Q,UAtD+C,SAAC/T,EAAOyJ,GACzDzJ,EAAM0C,MACH4K,QAAO,SAAC9M,GAAD,OAAUA,EAAK2E,YACtB6H,SAAQ,SAACxM,GACRA,EAAKoT,QAAUpT,EAAKoT,OACpBpT,EAAK8G,UAAY9G,EAAK8G,UAAU0M,cAkDlCC,WA9CgD,SAACjU,GACnDA,EAAM0C,MAAQ,IA8CZwR,YAxCA,SAAClU,EAAOyJ,GACV,IAAM0K,EAAenU,EAAM0C,MAAMgP,MAAK,SAACpG,GAAD,OAAOA,EAAE9L,KAAOiK,EAAO+F,QAAQhQ,MAC/D2U,IACJA,EAAaC,aAAa3K,EAAO+F,QAAQ6E,WAAa5K,EAAO+F,QAAQxE,QAsCrEsJ,mBA/BA,SAACtU,EAAOyJ,GACV,IAAM0K,EAAenU,EAAM0C,MAAMgP,MAAK,SAACpG,GAAD,OAAOA,EAAE9L,KAAOiK,EAAO+F,QAAQhQ,MAC/D2U,IACJA,EAAa1T,cAAcgJ,EAAO+F,QAAQ6E,YACxC5K,EAAO+F,QAAQ+E,MACbJ,EAAa1T,cAAcgJ,EAAO+F,QAAQ6E,WAAa,IACzDF,EAAa1T,cAAcgJ,EAAO+F,QAAQ6E,WAAa,MA2B3DG,cAAe,SAACC,GACdA,EAAQC,QAAQlD,IAAwB,SAACxR,EAAOyJ,GAE9CzJ,EAAM0C,MAAQ+G,EAAO+F,QAAQ9M,MAAMC,QAAQD,MAC3C1C,EAAM+O,WAAatF,EAAO+F,QAAQ9M,MAAMC,QAAQoM,cAGlD0F,EAAQC,QAAQrF,IAAkB,SAACrP,EAAOyJ,GACxC,IAAMkL,EAAqB3U,EAAM0C,MAAMgP,MACrC,SAACpG,GAAD,OAAOA,EAAE9L,KAAOiK,EAAO+F,QAAQhQ,MAE3BmV,IACJA,EAAmBrN,UAAYmC,EAAO+F,QAAQoF,aAIlDH,EAAQC,QAAQnD,IAAU,SAACvR,GACzBA,EAAM0C,MAAQ,GACd1C,EAAMiD,YAAc,KACpBjD,EAAMgP,eAAiB,KACvBhP,EAAM+O,WAAa,GACnB/O,EAAMqD,SAAU,KAGlBoR,EAAQC,QAAQzF,IAAoB,SAACjP,EAAOyJ,GAC1C,IAAMmL,EAAuB,CAC3BzN,aAAc,GACdnG,EAAGyI,EAAO+F,QAAQpF,SAASpJ,EAC3BG,EAAGsI,EAAO+F,QAAQpF,SAASjJ,EAC3BgC,UAAU,EACVoB,WAAW,EACXqP,QAAQ,EACRhS,KAAM,MACNpC,GAAIiK,EAAO+F,QAAQhQ,GACnB8H,UAAWmC,EAAO+F,QAAQqF,YAAY9R,KAAI,SAAC+R,GAAD,MAAa,CACrDA,aAEF3P,UAAU,EACViP,aAAc,CACZ1M,SAAS,EACTG,UAAU,EACVC,OAAO,GAETrH,cAAe,CACbP,OAAQ,EACRC,OAAQ,EACRC,QAAS,IAIbJ,EAAM0C,MAAM0K,KAAKwH,MAGnBH,EAAQC,QAAQvF,IAA8B,SAACnP,EAAOyJ,GACpD,IAAMsL,EAAiB/U,EAAM0C,MAAMgP,MACjC,SAACpG,GAAD,OAAOA,EAAE9L,KAAOiK,EAAO+F,QAAQwF,eAEjC,GAAMD,GAAkBA,EAAezN,UAAU8J,OAAS,EAAG,CAC3D,IAAM6D,EAA+B,CACnC,CAAEH,OAAQrL,EAAO+F,QAAQsF,SAErBI,EAAUpI,OAAOqI,OAAO,GAAIJ,EAAgB,CAChDzN,UAAW2N,IAEbC,EAAQ1V,GAAKiK,EAAO+F,QAAQhQ,GAC5B0V,EAAQ/P,UAAW,EACnB+P,EAAQ/N,aAAgBsC,EAAeuI,UACvCkD,EAAQlU,EAAIkU,EAAQlU,EAAIvB,EAA2B,EAEnDsV,EAAezN,UAAYyN,EAAezN,UAAUgG,QAClD,SAAChC,GAAD,OAAOA,EAAEwJ,SAAWrL,EAAO+F,QAAQsF,UAErCC,EAAe5P,UAAW,EAC1B4P,EAAe5N,aAAe,GAE9BnH,EAAM0C,MAAM0K,KAAK8H,OAIrBT,EAAQC,QAAQtF,IAA+B,SAACpP,EAAOyJ,GAErD,IAAM2L,EAAoB3D,GAAmBzR,EAAOyJ,EAAO+F,QAAQhQ,IAmBnE,GAlBI4V,IAAsBA,EAAkBjQ,WAC1CnF,EAAM0C,MAAQ1C,EAAM0C,MAAMK,KAAI,SAACvC,GAY7B,MAVwB,KAAtBA,EAAK2G,cACL3G,EAAK2G,eAAkBsC,EAAeuI,YAEtCxR,EAAK2E,SAAW3E,EAAKhB,KAAOiK,EAAO+F,QAAQhQ,GACvCgB,EAAK2E,SACP3E,EAAK2G,aAAgBsC,EAAeuI,UAEpCxR,EAAK2G,aAAe,IAGjB3G,MAKPiJ,EAAO+F,QAAQ6F,aAAc,CAC/B,IAAMC,EAAatV,EAAM0C,MAAMgP,MAAK,SAACpG,GAAD,OAAOA,EAAE9L,KAAOiK,EAAO+F,QAAQhQ,MAEnE,IAAK8V,EACH,MAAM,IAAIpW,MAAM,yBAGlBoW,EAAWnQ,UAAW,EACtBmQ,EAAWnO,aAAe,GAE1B,IAAMoO,EAAUD,EAAWhO,UAAUkO,QAC/BN,EAAUpI,OAAOqI,OAAO,GAAIG,EAAY,CAC5CnQ,UAAU,EACVgC,aAAesC,EAAeuI,UAC9B7O,UAAU,EACVmE,UAAW,CAACiO,KAGdD,EAAW9V,GAAKiK,EAAO+F,QAAQiG,YAE/BzV,EAAM0C,MAAM0K,KAAK8H,GAInBlV,EAAM+O,WAAa,GAEdtF,EAAO+F,QAAQ6F,cAzZe,SACvCrV,EACA0V,EACA7D,GAEA7R,EAAM0C,MACH4K,QAAO,SAAC9M,GAAD,OAAUA,EAAK2E,UAAY3E,EAAK2G,eAAiBuO,KACxD1I,SAAQ,SAACxM,GAAD,OAAUqR,EAASrR,MAmZxBmV,CACE3V,EACCyJ,EAAeuI,WAChB,SAACxR,GACCA,EAAK2C,UAAW,EAChBnD,EAAM+O,WAAW3B,KAAKN,OAAOqI,OAAO,GAAI3U,UAMhDiU,EAAQC,QAAQpF,GAAkBsG,WAAW,SAAC5V,EAAOyJ,GACnDgF,QAAQoH,IAAI,gBACZpH,QAAQoH,IAAIpM,GAEZ,IAAMqM,EAAuB,CAC3B3O,aAAc,GACdnG,EAAGyI,EAAO+F,QAAQpF,SAASpJ,EAC3BG,EAAGsI,EAAO+F,QAAQpF,SAASjJ,EAC3BgC,UAAU,EACVoB,WAAW,EACXqP,QAAQ,EACRhS,KAAM,MACNpC,GAAIiK,EAAO+F,QAAQe,OACnBjJ,UAAW,CAAC,CAAEwN,OAAQrL,EAAO+F,QAAQS,KAAKC,oBAC1C/K,UAAU,EACViP,aAAc,CACZ1M,SAAS,EACTG,UAAU,EACVC,OAAO,GAETrH,cAAe,CACbP,OAAQ,EACRC,OAAQ,EACRC,QAAS,IAIT2V,EAAgC,GACpCjJ,OAAOO,QAAQ5D,EAAO+F,QAAQS,KAAK+F,OAAOhJ,SAAQ,YAAmB,IAAD,mBAAhBnC,EAAgB,KAAXG,EAAW,KAC5DiL,EAA8BC,MAAMC,KAAKD,MAAMlL,GAAO5L,QAAQ2D,KAClE,iBAAqB,CAAE+R,OAAQjK,MAEjCkL,EAAgBA,EAAczC,OAAO2C,MAGvC,IAAMG,EAAc3W,EAA2B,GAEzC4W,EAAsB,CAC1BlP,aAAc,GACdnG,EAAGyI,EAAO+F,QAAQpF,SAASpJ,EAAIoV,EAC/BjV,EAAGsI,EAAO+F,QAAQpF,SAASjJ,EAC3BgC,UAAU,EACVoB,WAAW,EACXqP,QAAQ,EACRhS,KAAM,MACNpC,GAAIiK,EAAO+F,QAAQgB,OACnBlJ,UAAWyO,EACX5Q,UAAU,EACViP,aAAc,CACZ1M,SAAS,EACTG,UAAU,EACVC,OAAO,GAETrH,cAAe,CACbP,OAAQ,EACRC,OAAQ,EACRC,QAAS,IAIPkW,EAA4B,CAChCnP,aAAc,GACdnG,EAAGyI,EAAO+F,QAAQpF,SAASpJ,EAAkB,EAAdoV,EAC/BjV,EAAGsI,EAAO+F,QAAQpF,SAASjJ,EAC3BgC,UAAU,EACVoB,WAAW,EACXqP,QAAQ,EACRhS,KAAM,MACNpC,GAAIiK,EAAO+F,QAAQkB,gBACnBpJ,UAAWmC,EAAO+F,QAAQiB,qBAAqB1N,KAAI,SAAC+R,GAAD,MAAa,CAC9DA,aAEF3P,UAAU,EACViP,aAAc,CACZ1M,SAAS,EACTG,UAAU,EACVC,OAAO,GAETrH,cAAe,CACbP,OAAQ,EACRC,OAAQ,EACRC,QAAS,IAIPmW,EAA6B,CACjCpP,aAAc,GACdnG,EAAGyI,EAAO+F,QAAQpF,SAASpJ,EAAkB,EAAdoV,EAC/BjV,EAAGsI,EAAO+F,QAAQpF,SAASjJ,EAC3BgC,UAAU,EACVoB,WAAW,EACXqP,QAAQ,EACRhS,KAAM,MACNpC,GAAIiK,EAAO+F,QAAQoB,iBACnBtJ,UAAWmC,EAAO+F,QAAQmB,sBAAsB5N,KAAI,SAAC+R,GAAD,MAAa,CAC/DA,aAEF3P,UAAU,EACViP,aAAc,CACZ1M,SAAS,EACTG,UAAU,EACVC,OAAO,GAETrH,cAAe,CACbP,OAAQ,EACRC,OAAQ,EACRC,QAAS,IAIbJ,EAAM0C,MAAM0K,KAAK0I,EAAUO,EAASC,EAAeC,S,GAqBrDtE,GAAWuE,QAfbpE,G,GAAAA,WACAE,G,GAAAA,aACAC,G,GAAAA,iBACAC,G,GAAAA,YACAC,G,GAAAA,SACAW,G,GAAAA,YACAG,G,GAAAA,oBACAE,G,GAAAA,iBACAC,G,GAAAA,UACAG,G,GAAAA,eACAC,G,GAAAA,cACAC,G,GAAAA,UAEAG,I,GADAD,W,GACAC,aACAI,G,GAAAA,mBAGarC,MAAf,QInjBewE,I,mNAZLxQ,YAAc,SAAC8B,GACrBA,EAAM4C,kBACN,EAAKhL,MAAM+W,a,EAGLpN,eAAiB,SACvBvB,GAEAA,EAAMuB,kB,uDA9BN,IAAMqN,EAAsC,CAC1CxM,IAAI,GAAD,OAAKrJ,KAAKnB,MAAMyK,SAASjJ,EAAI,EAA7B,MACHkJ,KAAK,GAAD,OAAKvJ,KAAKnB,MAAMyK,SAASpJ,EAAI,EAA7B,OAEN,OACE,qBACExB,GAAG,YACHwG,QAASlF,KAAKnB,MAAM+W,UACpBhQ,cAAe5F,KAAKwI,eAHtB,SAKE,qBACEsN,UAAU,4BACV9K,MAAO6K,EACPjQ,cAAe5F,KAAKwI,eACpBtD,QAASlF,KAAKmF,YAJhB,SAMGnF,KAAKnB,MAAMkX,iB,GAlBCrU,cCyCRsU,G,kDAnCb,WAAYnX,GAAgB,IAAD,8BACzB,cAAMA,IAHAoX,iBAA+B,GAEZ,EAwBnB5L,eAAiB,SAACC,EAAaJ,GAC/BA,GAAW,EAAKrL,MAAMqX,cAC1B,EAAKrX,MAAMqX,aAAahM,EAAM7L,OA1BP,EA8BnBgJ,aAAe,SAACJ,GACtBA,EAAM4C,mBA7BN,EAAKoM,iBAAmBpX,EAAMa,KAAK8G,UAAUvE,KAAI,SAACuI,GAChD,OAAO,EAAK3L,MAAMsX,kBAAkB3L,EAAEwJ,WAHf,E,qDAQzB,OACE,qBAAK9O,QAASlF,KAAKqH,aAAnB,SACE,cAACoD,EAAA,EAAD,CACE/L,GAAG,mCACHgM,QAAS1K,KAAKiW,iBACdrL,eAAgB,SAACC,GAAD,OAAYA,EAAOE,MACnCC,MAAO,CAAExK,MAAO,KAChByK,SAAUjL,KAAKqK,eACfa,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBxB,MAAM,eAAe0B,QAAQ,uB,GApB5B3J,aCIrB0U,GALwB3T,aANf,SAACvD,GACvB,MAAO,CACLiX,kBAAmB3K,EAAqBtM,MAM1C,GAFqCuD,CAGrCuT,ICsDaK,G,4MATLC,gBAAkB,WACxB,EAAKzX,MAAM0X,sBAAsB,I,EAG3BC,gBAAkB,WACxB,EAAK3X,MAAM0X,qBAAqB,I,uDAhDhC,OACE,eAAC,IAAD,CACErW,EAAGF,KAAKnB,MAAM4X,IAAIvW,EAClBG,EAAGL,KAAKnB,MAAM4X,IAAIpW,EAClBmE,WAAW,EACXoB,cAAe5F,KAAKnB,MAAMgH,kBAC1BhB,UAAW7E,KAAKnB,MAAMgG,UALxB,UAOE,cAAC,IAAD,CAAMjB,aAAc,GAAIpD,MAAO,IAAKC,OAAQ,IAAKK,KAAM,QACvD,cAAC,IAAD,CACEN,MAAO,IACPC,OAAQ,IACRQ,SAAU,GACVJ,KAAI,UAAKb,KAAKnB,MAAMqL,OACpBnJ,MAAO,SACPC,cAAe,WAEjB,cAAC,IAAD,CACEd,EAAG,GACHG,EAAG,GACHG,MAAO,GACPC,OAAQ,GACRQ,SAAU,GACVJ,KAAI,IACJE,MAAO,SACPC,cAAe,SACfkE,QAASlF,KAAKsW,kBAEhB,cAAC,IAAD,CACEpW,EAAG,IACHG,EAAG,GACHG,MAAO,GACPC,OAAQ,GACRQ,SAAU,GACVJ,KAAI,IACJE,MAAO,SACPC,cAAe,SACfkE,QAASlF,KAAKwW,yB,GAvCF9U,aCmBPgV,G,4MA3BNC,SAAoC,K,EAgBnClU,QAAU,SAAC6H,GAAiB,IAAD,IACjCqD,QAAQoH,IAAI,sCAA6B,EAAK4B,gBAAlC,aAA6B,EAAezM,QAExD,EAAKrL,MAAM4D,SAAQ,YAAKkU,gBAAL,eAAezM,QAAS,K,EAGrC7C,aAAe,SAACJ,GACtBA,EAAM4C,mB,uDArBE,IAAD,OACP,OACE,sBAAK3E,QAASlF,KAAKqH,aAAnB,UACE,uBACEyJ,IAAK,SAACA,GACCA,IACL,EAAK6F,SAAW7F,MAGpB,wBAAQ5L,QAASlF,KAAKyC,QAAtB,4B,GAZoBf,aCuiCbkV,G,kDA37Bb,WAAY/X,GAAgB,IAAD,8BACzB,cAAMA,IAHDgY,MAA4B,KAER,EAyPnBC,yBAA2B,SAACpY,GAAD,OAAgB,SAAC+U,GAClD,EAAK5U,MAAMkY,mBAAmB,CAAErY,KAAI+U,YA1PX,EA6PnBuD,kBAAoB,SAACtY,GAAD,OAAgB,SAC1CuI,GAEA,EAAKpI,MAAMoY,YAAY,CACrBvY,KACAwY,OAAQ,CACNhX,EAAG+G,EAAME,OAAOjH,IAChBG,EAAG4G,EAAME,OAAO9G,SApQK,EAyQnB8W,KAAO,aAzQY,EA2QnBC,mBAAqB,WAC3B,OAAI,EAAKvY,MAAM+C,MAAMA,MAAM0O,OAAS,EAAU,KAG5C,2GA/QuB,EAqRnB+G,kBAAoB,WAAO,IAAD,EAChC,IAAK,EAAKnY,MAAMoY,gBAAiB,OAAO,KAExC,IAAMC,EAAa,UAAG,EAAKV,aAAR,aAAG,EAAYW,YAAYC,wBACxCC,EAAkB,EAAKxY,MAAMyY,oBACnC,IAAKJ,IAAkBG,EACrB,MAAM,IAAItZ,MAAM,2CAGlB,OACE,cAAC,EAAD,CACEkL,SAAU,CACRpJ,EAAGqX,EAAchO,KAAOmO,EAAgBxX,EACxCG,EAAGkX,EAAclO,IAAMqO,EAAgBrX,GAEzCwI,MAAO,EAAK3J,MAAM0Y,iBAClB9O,gBAAiB,kBAAM,EAAK+O,uBArSP,EA0SnBC,mBAAqB,WAAO,IAAD,EACjC,IAAK,EAAK5Y,MAAM6Y,iBAAkB,OAAO,KAEzC,IAAMR,EAAa,UAAG,EAAKV,aAAR,aAAG,EAAYW,YAAYC,wBACxCC,EAAkB,EAAKxY,MAAM8Y,qBACnC,IAAKT,IAAkBG,EACrB,MAAM,IAAItZ,MAAM,4CAGlB,OACE,cAAC,GAAD,CACEkL,SAAU,CACRpJ,EAAGqX,EAAchO,KAAOmO,EAAgBxX,EACxCG,EAAGkX,EAAclO,IAAMqO,EAAgBrX,GAEzCuV,UAAW,EAAKqC,kBALlB,SAOE,cAAC,EAAD,CACEjO,WAAY,EAAKkO,iBACf,EAAKC,8BAA8B,EAAKtB,aA7TvB,EAoUnBuB,wBAA0B,WAAO,IAAD,EACtC,IAAK,EAAKlZ,MAAMmZ,sBAAuB,OAAO,KAE9C,IAAMd,EAAa,UAAG,EAAKV,aAAR,aAAG,EAAYW,YAAYC,wBACxCC,EAAkB,EAAKxY,MAAMoZ,0BACnC,IAAKf,IAAkBG,EACrB,MAAM,IAAItZ,MAAM,4CAGlB,IAAMqY,EAAM,CACVvW,EAAGqX,EAAchO,KAAOmO,EAAgBxX,EACxCG,EAAGkX,EAAclO,IAAMqO,EAAgBrX,GAGzC,OACE,cAAC,GAAD,CAAUiJ,SAAUmN,EAAKb,UAAW,EAAK2C,uBAAzC,SACE,cAAC,EAAD,CACEhO,UAAW,EAAKiO,oBACd,EAAKL,8BAA8B,EAAKtB,aAtVvB,EA6VnB4B,iBAAmB,WAAO,IAAD,EAC/B,IAAK,EAAKvZ,MAAMwZ,eAAgB,OAAO,KAEvC,IAAMnB,EAAa,UAAG,EAAKV,aAAR,aAAG,EAAYW,YAAYC,wBACxCC,EAAkB,EAAKxY,MAAMyZ,mBACnC,IAAKpB,IAAkBG,EACrB,MAAM,IAAItZ,MAAM,0CAGlB,IAAMqY,EAAM,CACVvW,EAAGqX,EAAchO,KAAOmO,EAAgBxX,EACxCG,EAAGkX,EAAclO,IAAMqO,EAAgBrX,GAGzC,OAAS,EAAKnB,MAAM0Z,sBAClB,cAAC,GAAD,CAAUtP,SAAUmN,EAAKb,UAAW,EAAKiD,gBAAzC,SACE,cAAC,GAAD,CACEnZ,KAAM,EAAKR,MAAM0Z,sBACjB1C,aAAc,EAAK4C,gCACjB,EAAK5Z,MAAM0Z,sBAAsBla,GACjC+X,OAIJ,MArXqB,EAwXnBsC,oBAAsB,WAAO,IAAD,EAClC,IAAK,EAAK7Z,MAAM8Z,kBAAmB,OAAO,KAE1C,IAAMzB,EAAa,UAAG,EAAKV,aAAR,aAAG,EAAYW,YAAYC,wBACxCC,EAAkB,EAAKxY,MAAM+Z,sBACnC,IAAK1B,IAAkBG,EACrB,MAAM,IAAItZ,MAAM,6CAGlB,IAAMqY,EAAM,CACVvW,EAAGqX,EAAchO,KAAOmO,EAAgBxX,EACxCG,EAAGkX,EAAclO,IAAMqO,EAAgBrX,GAGzC,OAAS,EAAKnB,MAAM8Z,kBAClB,cAAC,GAAD,CAAU1P,SAAUmN,EAAKb,UAAW,EAAKsD,mBAAzC,SACE,cAAC,GAAD,CAAezW,QAAS,EAAK0W,sBAE7B,MA1YqB,EA6YnBX,oBAAsB,SAAClP,GAAD,OAAwB,SAAC1H,GACrD,EAAK2W,yBACL,EAAK1Z,MAAMua,aAAa,CAAE9P,WAAUyK,YAAanS,MA/YxB,EAkZnBsW,iBAAmB,SAAC5O,GAAD,OAAwB,SAAC5K,GAClD,EAAKuZ,oBACL,EAAKpZ,MAAM2P,kBAAkB,CAAEM,WAAYpQ,EAAI4K,eApZtB,EAuZnB6P,kBAAoB,SAACE,GAC3B,EAAKH,qBACL,EAAKra,MAAMya,oBAAoBD,IAzZN,EA4ZnBP,gCAAkC,SACxC5E,EACAuC,GAFwC,OAGrC,SAACzC,GACJ,EAAK6E,kBACL,EAAKha,MAAM0a,uBAAuB,CAAErF,cAAaF,SAAQyC,UAjahC,EAoanBoB,iBAAmB,WACzB,EAAKpY,SAAS,CACZ6X,iBAAiB,EACjBK,oBAAqB,KACrBC,iBAAkB,MAxaK,EA4anBK,kBAAoB,WAC1B,EAAKxY,SAAS,CACZsY,kBAAkB,EAClBC,qBAAsB,QA/aC,EAmbnBO,uBAAyB,WAC/B,EAAK9Y,SAAS,CACZ4Y,uBAAuB,EACvBC,0BAA2B,QAtbJ,EA0bnBO,gBAAkB,WACxB,EAAKpZ,SAAS,CACZiZ,gBAAgB,EAChBC,mBAAoB,KACpBC,sBAAuB,QA9bA,EAkcnBM,mBAAqB,WAC3B,EAAKzZ,SAAS,CACZuZ,mBAAmB,EACnBC,sBAAuB,QArcA,EAycnBO,sBAAwB,SAACvS,GAC/B,IAAMwS,EAAW,EAAKtB,8BAA8B,EAAKtB,QAEvD,EAAKhY,MAAM0D,SACXwK,EAAY,EAAK7N,MAAMwa,eAAgBD,GAAY,KAEnD,EAAK5a,MAAM8T,oBA/cY,EAmdnBgH,YAAc,SAAC1S,GAAyC,IAAD,EAG7D,GAFAA,EAAM2S,IAAIpR,iBAEL,EAAKqO,MAAV,CAEA,IAAIgD,EAAW,EAAKhb,MAAMib,UAAUC,UAAU7Z,EAExC8Z,EAAO,UAAG,EAAKnD,MAAMoD,4BAAd,QAAsC,CAAE/Z,EAAG,EAAGG,EAAG,GAExD6Z,GACAF,EAAQ9Z,EAAI,EAAK2W,MAAM3W,KAAO2Z,EAD9BK,GAEAF,EAAQ3Z,EAAI,EAAKwW,MAAMxW,KAAOwZ,EAG9BM,EACJlT,EAAM2S,IAAIzM,OAAS,EAxjBR,KAwjBY0M,EAAsBA,EAxjBlC,KA0jBb,EAAKhb,MAAMub,WAAW,CAAEla,EAAGia,EAAU9Z,EAAG8Z,IAExC,IAAMjD,EAAS,CACbhX,EAAG8Z,EAAQ9Z,EAAIga,EAAiBC,EAChC9Z,EAAG2Z,EAAQ3Z,EAAI6Z,EAAiBC,GAGlC,EAAKtb,MAAMwb,eAAenD,KA3eD,EA8enBoD,yBAA2B,SAACC,GAAD,OAAuB,SACxDtT,GACI,IAAD,IACHA,EAAM2S,IAAIpR,iBACVvB,EAAMI,cAAe,EAErB,IAAMmT,EAAY,CAChB,CACE7Q,MAAO,SACPhB,OAAQ,WACN,EAAK9J,MAAM4b,cAAcF,MAK/B,EAAK9a,SAAS,CACZ6X,iBAAiB,EACjBK,oBAAmB,oBAAE,EAAKd,aAAP,aAAE,EAAYoD,4BAAd,QAAsC,KACzDrC,iBAAkB4C,MAhgBK,EAogBnBE,sBAAwB,SAC9BC,EACA1T,GACI,IAAD,MACHA,EAAM2S,IAAIpR,iBACVvB,EAAMI,cAAe,EAGrB,EAAKxI,MAAMyS,WAAW,CAAE5S,GAAIic,EAAQpJ,oBAAoB,IAExD,IAAM7R,EAAO,EAAKb,MAAM+C,MAAMA,MAAMgP,MAAK,SAACpG,GAAD,OAAOA,EAAE9L,KAAOic,KACnDlU,GAAsB,OAAJ/G,QAAI,IAAJA,GAAA,UAAAA,EAAM8G,iBAAN,eAAiB8J,SAAU,EAC7CsK,GAA0B,OAAJlb,QAAI,IAAJA,OAAA,EAAAA,EAAM4T,eAAgB,CAChD1M,SAAS,EACTG,UAAU,EACVC,OAAO,GAGHwT,EAAY,CAChB,CACE7Q,MAAO,OACPhB,OAAQ,WACN,EAAK9J,MAAMoU,eAKbxM,EAAkB,IACpB+T,EAAUlO,KAAK,CACb3C,MAAO,UACPhB,OAAQ,WACN,EAAK9J,MAAMgc,aAAaF,MAI5BH,EAAUlO,KAAK,CACb3C,MAAO,qBACPhB,OAAQ,WACO,IAAD,IAANjJ,GACJ,EAAKD,SAAS,CACZiZ,gBAAgB,EAChBC,mBAAkB,oBAAE,EAAK9B,aAAP,aAAE,EAAYoD,4BAAd,QAAsC,KACxDrB,sBAAuBlZ,QAOjC8a,EAAUlO,KAAK,CACb3C,MAASiR,EAAoBhU,QAAU,cAAgB,OACvD+B,OAAQ,WACN,EAAK9J,MAAMuU,YAAY,CACrB1U,IAAQ,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMhB,KAAM,GAChB6U,UAAWzF,GAAgBgN,QAC3B5Q,OAAQ0Q,EAAoBhU,aAKlC4T,EAAUlO,KAAK,CACb3C,MAASiR,EAAoB7T,SAAW,kBAAoB,UAC5D4B,OAAQ,WACN,EAAK9J,MAAMuU,YAAY,CACrB1U,IAAQ,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMhB,KAAM,GAChB6U,UAAWzF,GAAgBiN,SAC3B7Q,OAAQ0Q,EAAoB7T,cAKlCyT,EAAUlO,KAAK,CACb3C,MAASiR,EAAoB5T,MAAQ,eAAiB,QACtD2B,OAAQ,WACN,EAAK9J,MAAMuU,YAAY,CACrB1U,IAAQ,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMhB,KAAM,GAChB6U,UAAWzF,GAAgBkN,MAC3B9Q,OAAQ0Q,EAAoB5T,WAKlCwT,EAAUlO,KAAK,CACb3C,MAAO,eACPhB,OAAQ,WACN,EAAK9J,MAAM2U,mBAAmB,CAC5B9U,IAAQ,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMhB,KAAM,GAChB6U,UAAWxF,GAAiBkN,OAC5BxH,MAAO,OAKb+G,EAAUlO,KAAK,CACb3C,MAAO,kBACPhB,OAAQ,WACN,EAAK9J,MAAM2U,mBAAmB,CAC5B9U,IAAQ,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMhB,KAAM,GAChB6U,UAAWxF,GAAiBkN,OAC5BxH,OAAQ,OAKd+G,EAAUlO,KAAK,CACb3C,MAAO,eACPhB,OAAQ,WACN,EAAK9J,MAAM2U,mBAAmB,CAC5B9U,IAAQ,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMhB,KAAM,GAChB6U,UAAWxF,GAAiBmN,OAC5BzH,MAAO,OAKb+G,EAAUlO,KAAK,CACb3C,MAAO,kBACPhB,OAAQ,WACN,EAAK9J,MAAM2U,mBAAmB,CAC5B9U,IAAQ,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMhB,KAAM,GAChB6U,UAAWxF,GAAiBmN,OAC5BzH,OAAQ,OAKd+G,EAAUlO,KAAK,CACb3C,MAAO,sBACPhB,OAAQ,WACN,EAAK9J,MAAM2U,mBAAmB,CAC5B9U,IAAQ,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMhB,KAAM,GAChB6U,UAAWxF,GAAiBoN,QAC5B1H,MAAO,OAKb+G,EAAUlO,KAAK,CACb3C,MAAO,yBACPhB,OAAQ,WACN,EAAK9J,MAAM2U,mBAAmB,CAC5B9U,IAAQ,OAAJgB,QAAI,IAAJA,OAAA,EAAAA,EAAMhB,KAAM,GAChB6U,UAAWxF,GAAiBoN,QAC5B1H,OAAQ,OAKd,EAAKhU,SAAS,CACZ6X,iBAAiB,EACjBK,oBAAmB,oBAAE,EAAKd,aAAP,aAAE,EAAYoD,4BAAd,QAAsC,KACzDrC,iBAAkB4C,KA3pBK,EA+pBnBY,gBAAkB,SAAC1b,GAAD,OAAsB,SAC9Cib,EACA1T,GAGA,IAAMoU,EACJpU,EAAM2S,IAAI0B,UAAYrU,EAAM2S,IAAI2B,SAAWtU,EAAM2S,IAAI4B,QAEnD9b,EAAK2E,UAAYgX,EACnB,EAAKxc,MAAM4S,iBAAiBkJ,GAE5B,EAAK9b,MAAMyS,WAAW,CACpB5S,GAAIic,EACJpJ,oBAAqB8J,MA5qBA,EAirBnBI,uBAAyB,SAC/Bd,EACA1T,GAGA,IAAMoU,EACJpU,EAAM2S,IAAI0B,UAAYrU,EAAM2S,IAAI2B,SAAWtU,EAAM2S,IAAI4B,QACvD,EAAK3c,MAAMyS,WAAW,CAAE5S,GAAIic,EAAQpJ,oBAAqB8J,IACzD,EAAKxc,MAAM6S,YAAYiJ,IAzrBE,EA4rBnBe,oBAAsB,SAC5Bf,EACA1T,GAEA,IAAIsN,GAAe,EAMnB,KAFE,EAAK1V,MAAM+C,MAAMA,MAAM4K,QAAO,SAAChC,GAAD,OAAOA,EAAEnG,YAAUiM,OAAS,GAErC,CACrB,IAAMqL,EAAe,EAAK9c,MAAM+C,MAAMA,MAAMgP,MAAK,SAACpG,GAAD,OAAOA,EAAE9L,KAAOic,KAC3DiB,IAAwB,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcnV,YAAa,IAAI8J,OAAS,EAC1D,GAAMqL,GAAgBC,EAAU,CAE9B,IAAMC,EAAkB,CACtB3b,EAAGyb,EAAazb,EAAIvB,EAA2B,EAC/C0B,EAAGsb,EAAatb,EAAI1B,EAA4B,GAEjCoO,EACf8O,EACA,EAAK1D,8BAA8B,EAAKtB,QAE3B,KACbtC,GAAe,IAKrB,EAAK1V,MAAMid,cAAc,CAAEpd,GAAIic,EAAQpG,kBAztBd,EA4tBnBwH,eAAiB,SAAC9U,GACxB,IAAM5I,EAAO4I,EAAM+U,OAAS/U,EAAMgV,QACrB,MAAT5d,EACF,EAAKQ,MAAMmU,gBACO,MAAT3U,GACT,EAAKQ,MAAMoU,aAjuBY,EAquBnBnJ,cAAgB,SAAC7C,GAErBA,EAAMqU,WACLrU,EAAMuU,SAAWvU,EAAMsU,UACV,MAAdtU,EAAM8C,IAEN,EAAKlL,MAAMqd,QACDjV,EAAMuU,SAAWvU,EAAMsU,UAA0B,MAAdtU,EAAM8C,MACnD9C,EAAMuB,iBACN,EAAK3J,MAAMsd,SA9uBY,EAkvBnBC,0BAA4B,WAAiB,IAAD,IAC5CC,EAAU,oBAAG,EAAKxF,aAAR,aAAG,EAAYoD,4BAAf,QAAuC,CAAE/Z,EAAG,EAAGG,EAAG,GAC5Dic,EAAkBC,OAAOC,WAAa,EAC5C,OAAOH,EAAWnc,EAAIoc,EAClB,CACEpc,EAAGqc,OAAOC,WAAa7d,EAAmC,EAC1D0B,EAAG1B,EAAoC,GAEzC,CACEuB,EAAGvB,EAAmC,EACtC0B,EAAG1B,EAAoC,IA5vBpB,EAgwBnBwZ,8BAAgC,SACtChR,EACAsV,GAEA,IAAMC,EAAYvV,EAAOwV,uBAAuBC,OAChDF,EAAUG,SACV,IAAIpG,EAAMgG,GAAYtV,EAAO8S,qBAC7B,OAAOyC,EAAUI,MAAMrG,IAvwBE,EA0wBnBnR,gBAAkB,SAAC2B,GACzB,GAAyB,IAArBA,EAAM2S,IAAImD,OAAc,CAE1B,IAAMtG,EAAM,EAAK0B,8BAA8B,EAAKtB,OAEpD,EAAKpX,SAAS,CACZia,eAAgB,CACdxZ,EAAGuW,EAAIvW,EACPG,EAAGoW,EAAIpW,GAET2c,WAAW,IAIf,OAAO,GAxxBkB,EA2xBnBC,qBAAuB,WAC7B,IAAMvD,EAAiB,EAAKxa,MAAMwa,eAC5BwD,EAAa,EAAKhe,MAAMge,WAC9B,MAAO,CACLzc,OAAQ2M,KAAK+P,IAAID,EAAWzc,QAC5BD,MAAO4M,KAAK+P,IAAID,EAAW1c,OAC3BN,EACEgd,EAAW1c,MAAQ,EACfkZ,EAAexZ,EAAIgd,EAAW1c,MAC9BkZ,EAAexZ,EACrBG,EACE6c,EAAWzc,OAAS,EAChBiZ,EAAerZ,EAAI6c,EAAWzc,OAC9BiZ,EAAerZ,IAxyBE,EA4yBnB+c,cAAgB,WAEtB,GAAI,EAAKle,MAAMme,mBAAoB,CACjC,IAAMH,EAAa,EAAKD,uBAClBK,EAAuB,EAAKze,MAAM+C,MAAMA,MAAMI,QAClD,SAACub,EAAmB7d,GAgBlB,OAfmB8d,SACjBN,EAAWhd,EACXgd,EAAW7c,EACX6c,EAAW1c,MACX0c,EAAWzc,OACXf,EAAKQ,EAAI,GACTR,EAAKW,EAAI,GACT1B,EACAA,IAIA4e,EAAkBjR,KAAK5M,GAGlB6d,IAET,IAGF,EAAK1e,MAAM4T,oBAAoB,CAC7BC,IAAK4K,EAAcrb,KAAI,SAACvC,GAAD,OAAUA,EAAKhB,QAa1C,OATA,EAAKe,SAAS,CACZ4d,oBAAoB,EACpBH,WAAY,CACVzc,OAAQ,EACRD,MAAO,GAETwc,WAAW,KAGN,GAp1BkB,EAu1BnBS,gBAAkB,SAACxW,GACzB,GAAI,EAAK/H,MAAM8d,UAAW,CACxB,IAAMvG,EAAM,EAAK0B,8BAA8BlR,EAAMgD,eACrD,EAAKxK,SAAS,CACZ4d,oBAAoB,EACpBH,WAAY,CACVzc,OAAQgW,EAAIpW,EAAI,EAAKnB,MAAMwa,eAAerZ,EAC1CG,MAAOiW,EAAIvW,EAAI,EAAKhB,MAAMwa,eAAexZ,KAI/C+G,EAAMI,cAAe,GAl2BI,EAq2BnBxB,kBAAoB,SAACoB,GAAiD,IAAD,IAC3EA,EAAM2S,IAAIpR,iBACVvB,EAAMI,cAAe,EAErB,IAAMmT,EAAY,CAChB,CACE7Q,MAAO,eACPhB,OAAQ,WAAO,IAAD,IACZ,EAAKlJ,SAAS,CACZsY,kBAAkB,EAClBC,qBAAoB,oBAAE,EAAKnB,aAAP,aAAE,EAAYoD,4BAAd,QAAsC,SAIhE,CACEtQ,MAAO,iBACPhB,OAAQ,WAAO,IAAD,IACZ,EAAKlJ,SAAS,CACZ4Y,uBAAuB,EACvBC,0BAAyB,oBAAE,EAAKzB,aAAP,aAAE,EAAYoD,4BAAd,QAAsC,SAIrE,CACEtQ,MAAO,qBACPhB,OAAQ,WAAO,IAAD,EACZ,EAAK9J,MAAM6e,cAAX,UACE,EAAKvF,8BAA8B,EAAKtB,cAD1C,QACoD,CAAE3W,EAAG,EAAGG,EAAG,MAInE,CAAEsJ,MAAO,QAAShB,OAAQ,EAAK9J,MAAM4R,UACrC,CACE9G,MAAO,yBACPhB,OAAQ,WAAO,IAAD,IACZ,EAAKlJ,SAAS,CACZuZ,mBAAmB,EACnBC,sBAAqB,oBAAE,EAAKpC,aAAP,aAAE,EAAYoD,4BAAd,QAAsC,UAMnE,EAAKxa,SAAS,CACZ6X,iBAAiB,EACjBK,oBAAmB,oBAAE,EAAKd,aAAP,aAAE,EAAYoD,4BAAd,QAAsC,KACzDrC,iBAAkB4C,KAn5BK,EAu5BnBmD,YAAc,SAACje,GACrB,OAAiD,IAA7CsM,OAAO1N,KAAK,EAAKO,MAAM0M,WAAW+E,OAAqB,GAE1C,EAAKzR,MAAM0M,UAAU7L,EAAK8G,UAAU,GAAGwN,QAExCzE,WA55BS,EA+5BnBqO,UAAY,SAACle,GACnB,GAAiD,IAA7CsM,OAAO1N,KAAK,EAAKO,MAAM0M,WAAW+E,OAAc,MAAO,GAE3D,IAAMuN,EAAc,EAAKhf,MAAM0M,UAAU7L,EAAK8G,UAAU,GAAGwN,QACrD8J,EAAiB,EAAKjf,MAAM0M,UAChC7L,EAAK8G,UAAU9G,EAAK8G,UAAU8J,OAAS,GAAG0D,QAG5C,OACGtU,EAAKoT,SACHgL,EAAeC,YAAeD,EAAeE,aAQtCte,EAAKoT,OAKfjT,sCAA4Cge,EAAYI,SAAW,OAJ5Dpe,sDANLA,sCAEAie,EAAeG,SACf,UA56BJ,EAAK/e,MAAQ,CACXme,oBAAoB,EACpBH,WAAY,CACVzc,OAAQ,EACRD,MAAO,GAETkZ,eAAgB,CACdxZ,EAAG,EACHG,EAAG,GAEL2c,WAAW,EACX1F,iBAAiB,EACjBK,oBAAqB,KACrBC,iBAAkB,GAClBG,kBAAkB,EAClBC,qBAAsB,KACtBK,uBAAuB,EACvBC,0BAA2B,KAC3BI,gBAAgB,EAChBC,mBAAoB,KACpBC,sBAAuB,KACvBI,mBAAmB,EACnBC,sBAAuB,MAzBA,E,gEA8BzBjZ,KAAKnB,MAAMqf,kB,+BAGI,IAAD,OACRC,EAAcne,KAAKnB,MAAM+C,MAAMA,MAClC4K,QAAO,SAAC9M,GAAD,OAAWA,EAAK2C,YACvBJ,KAAI,SAACvC,GAAU,IAAD,IACb,OACE,cAAC,EAAD,CACE4G,cAAa,UACX,EAAKzH,MAAMuf,aAAa1e,EAAK2G,qBADlB,QACmC,QAEhDA,aAAc3G,EAAK2G,aAEnB3H,GAAIgB,EAAKhB,GACTwB,EAAGR,EAAKQ,EACRG,EAAGX,EAAKW,EACRoD,UAAW/D,EAAK+D,UAChB3C,KAAMpB,EAAKoB,KACXuD,SAAU3E,EAAK2E,SACfN,WAAYrE,EAAKhB,MAAL,UAAY,EAAKG,MAAM+C,MAAMsM,sBAA7B,aAAY,EAAiCxP,IACzD2D,SAAU3C,EAAK2C,SACfqC,gBAAiB,EAAKgX,oBACtB9W,eAAgB,EAAK/F,MAAM8S,SAC3B7M,cAAe,EAAKjG,MAAMyT,YAC1BtN,kBAAmB,EAAKyW,uBACxBtW,YAAa,EAAKiW,gBAAgB1b,GAClC4H,YAAa,EAAKzI,MAAM+T,UACxBrL,iBAAkB,EAAK1I,MAAMkU,eAC7BlN,kBAAmB,EAAK6U,sBACxB/S,OAAQ,EAAKiW,UAAUle,GACvByG,SAAU,EAAKwX,YAAYje,GAC3BoT,OAAQpT,EAAKoT,OACbrM,gBAAiB/G,EAAK8G,UAAU8J,OAChC3J,UAAW,CACTC,QAASlH,EAAK4T,aAAa1M,QAC3BG,SAAUrH,EAAK4T,aAAavM,SAC5BC,MAAOtH,EAAK4T,aAAatM,MACzBqX,OAAQ,CAAEjf,OAAQ,EAAGC,OAAQ,EAAGC,QAAS,KAzBtCI,EAAKhB,OA+BZuP,EAAajO,KAAKnB,MAAM+C,MAAMqM,WAAWhM,KAAI,SAACvC,GAAU,IAAD,EAC3D,OACE,cAAC,EAAD,CACE4G,cAAa,UAAE,EAAKzH,MAAMuf,aAAa1e,EAAK2G,qBAA/B,QAAgD,QAC7DA,aAAc3G,EAAK2G,aAEnB3H,GAAIgB,EAAKhB,GACTwB,EAAGR,EAAKQ,EACRG,EAAGX,EAAKW,EACRoD,UAAW/D,EAAK+D,UAChB3C,KAAMpB,EAAKoB,KACXuD,UAAU,EACVhC,UAAU,EACVsF,OAAQ,EAAKiW,UAAUle,GACvByG,SAAU,EAAKwX,YAAYje,GAC3BoT,OAAQpT,EAAKoT,OACbvO,SAAS,GAdX,eAGe7E,EAAKhB,QAgBlB4f,EAActe,KAAKnB,MAAM+C,MAAMA,MAClC4K,QAAO,SAAC9M,GAAD,OAAUA,EAAK2C,YACtBJ,KAAI,SAACvC,GAAU,IAAD,EACb,OACE,cAAC,EAAD,CACE4G,cAAa,UACX,EAAKzH,MAAMuf,aAAa1e,EAAK2G,qBADlB,QACmC,QAEhDA,aAAc3G,EAAK2G,aAEnB3H,GAAIgB,EAAKhB,GACTwB,EAAGR,EAAKQ,EACRG,EAAGX,EAAKW,EACRoD,UAAW/D,EAAK+D,UAChB3C,KAAMpB,EAAKoB,KACXuD,SAAU3E,EAAK2E,SACfhC,SAAU3C,EAAK2C,SACfqC,gBAAiB,EAAKgX,oBACtB9W,eAAgB,EAAK/F,MAAM8S,SAC3B7M,cAAe,EAAKjG,MAAMyT,YAC1B3K,OAAQ,EAAKiW,UAAUle,GACvByG,SAAU,EAAKwX,YAAYje,GAC3BoT,OAAQpT,EAAKoT,OACbrM,gBAAiB/G,EAAK8G,UAAU8J,QAd3B5Q,EAAKhB,OAmBZ6f,EAAeve,KAAK6W,MACtB7W,KAAKnB,MAAM+C,MAAMA,MACd4K,QACC,SAAC9M,GAAD,OACG,EAAKR,MAAM8d,WACZ,EAAKne,MAAM2f,eACT,EAAK3f,MAAM+C,MAAMO,aACnBzC,EAAKhB,KAAO,EAAKG,MAAM+C,MAAMO,YAAYzD,MAE5CuD,KAAI,SAACvC,GAAU,IAAD,EACP+e,EAAS,EAAKrC,4BACdsC,EAAa,EAAKvG,8BACtB,EAAKtB,MACL4H,GAEF,OACE,cAAC,EAAD,CACEnY,cAAa,UACX,EAAKzH,MAAMuf,aAAa1e,EAAK2G,qBADlB,QACmC,QAEhDA,aAAc3G,EAAK2G,aAEnB3H,GAAIgB,EAAKhB,GACTwB,EAAGwe,EAAWxe,EACdG,EAAGqe,EAAWre,EACdoD,UAAWb,EAAsBuF,SAC/B,EAAKwV,YAAYje,IAEnBoB,KAAMpB,EAAKoB,KACXuD,UAAU,EACVhC,UAAU,EACVsF,OAAQ,EAAKiW,UAAUle,GACvByG,SAAU,EAAKwX,YAAYje,GAC3BoT,OAAQpT,EAAKoT,OACbrS,OAAQ9B,EACR6B,MAAO7B,GAnBT,iBAKiBe,EAAKhB,QAkB5B,GAEJ,OACE,sBACEigB,SAAU,EACVxU,UAAWnK,KAAK8J,cAChB8U,WAAY5e,KAAK+b,eAHnB,UAKG/b,KAAKoX,qBACLpX,KAAKqX,oBACLrX,KAAK8X,qBACL9X,KAAKoY,0BACLpY,KAAKyY,mBACLzY,KAAK+Y,sBACN,cAAC,IAAkB8F,SAAnB,UACG,gBAAGC,EAAH,EAAGA,MAAH,OACC,cAAC,IAAD,CACEhO,IAAK,SAACA,GACCA,IAEL,EAAK+F,MAAQ/F,IAEf5Q,EAAG,EAAKrB,MAAMib,UAAUiF,cAAc7e,EACtCG,EAAG,EAAKxB,MAAMib,UAAUiF,cAAc1e,EACtCG,MAAO+b,OAAOC,WACd/b,OAAQ8b,OAAOyC,YACf9Z,QAAS,EAAKsU,sBACdpU,MAAO,EAAKoU,sBACZnU,YACE,EAAKxG,MAAM0D,QAAU,EAAK4U,KAAO,EAAK7R,gBAExC2Z,UAAW,EAAKpgB,MAAM0D,QAAU,EAAK4U,KAAO,EAAKiG,cACjD8B,YACE,EAAKrgB,MAAM0D,QAAU,EAAK4U,KAAO,EAAKsG,gBAExC0B,YACE,EAAKtgB,MAAM0D,QAAU,EAAK4U,KAAO,EAAKsG,gBAExC7X,cAAe,EAAKC,kBACpBE,MAAO,EAAKlH,MAAMib,UAAUC,UAC5BqF,QAAS,EAAKzF,YACdnV,UAAW,EAAK3F,MAAM0D,QACtBoC,WAAY,EAAKwS,KACjBtS,UAAW,EAAKsS,KAChB3O,gBAAgB,EA5BlB,SA8BE,eAAC,IAAD,CAAUsW,MAAOA,EAAjB,UACE,cAAC,IAAD,UACG,EAAKjgB,MAAMib,UAAUuF,SAASpd,KAAI,SAACqd,GAAD,OACjC,cAAC,GAAD,CAEE5gB,GAAI4gB,EAAQ5gB,GACZ+X,IAAK6I,EAAQhW,SACbY,MAAOoV,EAAQpV,MACfqM,qBAAsB,EAAKO,yBACzBwI,EAAQ5gB,IAEVmH,kBAAmB,EAAKyU,yBACtBgF,EAAQ5gB,IAEVmG,UAAW,EAAKmS,kBAAkBsI,EAAQ5gB,KAX5C,UACU4gB,EAAQ5gB,GADlB,kBAeJ,cAAC,IAAD,CAAO8J,gBAAgB,EAAvB,SACG2V,EACE3L,OAAOvE,GACPuE,OAAO8L,GACP9L,OAAO+L,KAEZ,cAAC,IAAD,UACE,cAAC,IAAD,CACEre,EAAG,EAAKhB,MAAMwa,eAAexZ,EAC7BG,EAAG,EAAKnB,MAAMwa,eAAerZ,EAC7BG,MAAO,EAAKtB,MAAMge,WAAW1c,MAC7BC,OAAQ,EAAKvB,MAAMge,WAAWzc,OAC9BqD,OAAO,2B,GAjPTpC,a,oQCpDZ6d,GAAiBnO,YAAY,CACjCrG,KAAM,YACNiD,aCxC2C,CAC3CvC,SAAU,GACVC,kBAAmB,GACnBZ,QAAS,IDsCTuG,SAAU,CACR6M,cAvDuD,SAAChf,GAE1DA,EAAMuM,SAAW,GACjBvM,EAAMwM,kBAAoB,GAC1B,IAAM8T,EAAYxT,OAAOO,QAAQkT,GAC9BjT,QAAO,mCAAEzC,EAAF,iBAAmBA,EAAI5B,SAAS,iBACvClG,KAAI,uDAEDyd,EAAiB1T,OAAOO,QAAQkT,GACnCjT,QAAO,mCAAEzC,EAAF,iBAAkBA,EAAI5B,SAAS,iBACtClG,KAAI,uDAqCP,OAnCAud,EAAUtT,SAAQ,SAACyT,GAAD,OAChBA,EAAKzT,SAAQ,SAACxM,GACRR,EAAMuM,SAAS/L,EAAKrB,OACtBsP,QAAQC,MAAM,kCAAoClO,EAAKrB,MAOzDa,EAAMuM,SAAS/L,EAAKrB,MAAQqB,QAIhCggB,EAAexT,SAAQ,SAACyT,GAAD,OACrBA,EAAKzT,SAAQ,SAACxM,GACRR,EAAMwM,kBAAkBhM,EAAKrB,OAC/BsP,QAAQC,MAAM,kCAAoClO,EAAKrB,MAOzDa,EAAMwM,kBAAkBhM,EAAKrB,MAAQqB,QAIzCkgB,GAAQ1T,SAAQ,SAACO,GACfvN,EAAM4L,QAAQ2B,EAAIpO,MAAQ,CACxB0M,KAAM0B,EAAI1B,KACV2B,YAAaD,EAAIoT,uBAId3gB,MAYMgf,GAAkBqB,GAAe7J,QAAjCwI,cAEAqB,MAAf,QElEaO,GAAU,SAAC5gB,GAAD,OAAsBA,EAAM6gB,KAAKle,SAM3Cme,IAJiBje,YAAe+d,IAAS,SAACC,GACrD,OAAOA,EAAKhG,aAGiBhY,YAAe+d,IAAS,SAACC,GACtD,OAAOA,EAAK3B,iBCFD6B,GAAsB7R,YACjC,uBCQIP,GAAgCP,EAAU,QAChDO,GAAkBuQ,aAAe,GACjCvQ,GAAkBuQ,aAAa1b,GAAa,MAE5C,IAMasL,GAAwB,2BANJ,CAC/BoQ,aAAc,GACdrE,UAAW,CAAE7Z,EAAG,EAAGG,EAAG,GACtB0e,cAAe,CAAE7e,EAAG,EAAGG,EAAG,GAC1Bgf,SAAU,KAIPxR,ICyCCqS,GAAY9O,YAAY,CAC5BrG,KAAM,OACNiD,aAAcA,GACdqD,SAAU,CACR+I,WAlEwE,SAC1Elb,EACAyJ,GAGA,OADAzJ,EAAM6a,UAAYpR,EAAO+F,QAClBxP,GA8DLmb,eAxDA,SAACnb,EAAOyJ,GAEV,OADAzJ,EAAM6f,cAAgBpW,EAAO+F,QACtBxP,GAuDL6X,mBAjDA,SAAC7X,EAAOyJ,GACV,IAAM2W,EAAUpgB,EAAMmgB,SAASzO,MAAK,SAACpG,GAAD,OAAOA,EAAE9L,KAAOiK,EAAO+F,QAAQhQ,MAC7D4gB,IACJA,EAAQpV,OAASvB,EAAO+F,QAAQ+E,MAC5B6L,EAAQpV,MAAQ,IAClBoV,EAAQpV,MAAQ,KA6ClBuQ,cAxCyE,SAC3Evb,EACAyJ,GAEAzJ,EAAMmgB,SAAWngB,EAAMmgB,SAAS7S,QAAO,SAAChC,GAAD,OAAOA,EAAE9L,KAAOiK,EAAO+F,YAqC5DuI,YA/BA,SAAC/X,EAAOyJ,GACV,IAAM2W,EAAUpgB,EAAMmgB,SAASzO,MAAK,SAACpG,GAAD,OAAOA,EAAE9L,KAAOiK,EAAO+F,QAAQhQ,MAC7D4gB,IACJA,EAAQhW,SAAW,CACjBpJ,EAAGyI,EAAO+F,QAAQwI,OAAOhX,EACzBG,EAAGsI,EAAO+F,QAAQwI,OAAO7W,KA2B3BiZ,oBAnBA,SAACpa,EAAOyJ,KAoBRwX,eAfA,SAACjhB,EAAOyJ,GACVzJ,EAAMkf,aAAazV,EAAO+F,QAAQoC,KAAOnI,EAAO+F,QAAQ0R,QAgBxD1M,cAAe,SAACC,GACdA,EAAQC,QAAQlD,IAAwB,SAACxR,EAAOyJ,GAE9CzJ,EAAMmgB,SAAW1W,EAAO+F,QAAQqR,KAAKle,QAAQwd,YAG/C1L,EAAQC,QAAQnD,IAAU,SAACvR,EAAOyJ,GAChCzJ,EAAM6f,cAAgB,CAAE7e,EAAG,EAAGG,EAAG,GACjCnB,EAAM6a,UAAY,CAAE7Z,EAAG,EAAGG,EAAG,GAC7BnB,EAAMmgB,SAAW,MAGnB1L,EAAQC,QAAQqM,IAAqB,SAAC/gB,EAAOyJ,GAC3CzJ,EAAMmgB,SAAS/S,KAAK,CAClB5N,GAAIiK,EAAO+F,QAAQhQ,GACnB4K,SAAUX,EAAO+F,QAAQ+H,IACzBvM,MAAO,U,GAcXgW,GAAUxK,QAPZ0E,G,GAAAA,WACAC,G,GAAAA,eACAtD,G,GAAAA,mBACA0D,G,GAAAA,cACAxD,G,GAAAA,YACAqC,G,GAAAA,oBACA6G,G,GAAAA,eAGaD,MAAf,QCxBeG,GAjCM5d,aAXG,SAACvD,GACvB,MAAO,CACLkf,aAAc4B,GAAgB9gB,GAC9B0C,MAAOD,EAASzC,GAChBqM,UAAWC,EAAqBtM,GAChCsf,YAAatc,EAAkBhD,GAC/BqD,QAASD,EAAWpD,GACpB4a,UAAWgG,GAAQ5gB,MAIuB,CAC5CyS,YACAW,eACAZ,eACAwM,iBACA5M,cACAE,gBACAC,oBACAgB,uBACAqJ,cdE2B,SAC3BpN,GAD2B,OAE+B,SAAC4R,GAC3D,IAAMC,EAAa,2BACd7R,GADc,IAEjBiG,YAAahS,gBAEf2d,EAAShS,GAA8BiS,McRvC5N,oBACAC,aACAG,kBACAC,iBACAC,aACA4H,adtC0B,SAC1Bnc,GAD0B,OAEgC,SAC1D4hB,EACAtR,GAEA,IACMwR,EADa7e,EAASqN,KACMpN,MAAMgP,MAAK,SAACpG,GAAD,OAAOA,EAAE9L,KAAOA,KAC7D,GAAM8hB,EAAgB,CACpB,IAAMC,EAAgB1Q,GAAQyQ,EAAeha,WAC7C8Z,EAAS/R,GAAiB,CAAE7P,KAAIoV,SAAU2M,Qc6B5CjS,qBACA4L,cACAC,kBACA5J,YACA2I,ad7B0B,SAC1B1K,GAD0B,OAEgC,SAAC4R,GAC3D,IAAMC,EAAa,2BACd7R,GADc,IAEjBhQ,GAAIiE,gBAEN2d,EAASnS,GAAmBoS,McuB5BnN,eACAI,sBACA+F,uBdtBoC,SACpC7K,GADoC,OAEsB,SAAC4R,GAC3D,IAAMC,EAAa,2BACd7R,GADc,IAEjBhQ,GAAIiE,gBAEN2d,EAASjS,GAA6BkS,McgBtC7C,cC1E2B,SAC3BjH,GAD2B,OAE+B,SAAC6J,GAC3D,IAAMC,EAAgB,CACpB9J,MACA/X,GAAIiE,eAEN2d,EAASL,GAAoBM,MDoE7BxJ,sBACA0D,iBACAxD,eACAqC,uBACA6C,KAAMuE,iBAAevE,KACrBD,KAAMwE,iBAAexE,MA9BFzZ,CA+BlBmU,IE5EiB+J,QACW,cAA7BpE,OAAOqE,SAASC,UAEe,UAA7BtE,OAAOqE,SAASC,UAEhBtE,OAAOqE,SAASC,SAASC,MACvB,2D,qCCsBSC,GAxBKC,aAAgB,CAClCjB,KAAMkB,IAASlB,GAAM,CACnBmB,MAAO,GACPC,QAASC,6BAAmB,CAACnK,GAAYhP,OACzCuE,OAAQ6U,wBAAc,CACpBjH,GAAWnS,KACXoS,GAAepS,KACfqR,GAAoBrR,SAGxBrG,MAAOqf,IAASrf,GAAO,CACrBsf,MAAO,GACP1U,OAAQ6U,wBAAc,CACpB/S,GAA8BrG,KAC9B0J,GAAS1J,KACT2K,GAAU3K,KACV8K,GAAe9K,SAGnBsD,e,8BClBI+V,IAAsB,sBACzBhI,GAAoBrR,MAAO,GADF,gBAEzBoS,GAAepS,MAAO,GAFG,gBAGzBmS,GAAWnS,MAAO,GAHO,gBAIzB2K,GAAU3K,MAAO,GAJQ,gBAKzB8K,GAAe9K,MAAO,GALG,gBAMzB+K,GAAc/K,MAAO,GANI,gBAOzByI,GAAuBzI,MAAO,GAPL,IAUtB8M,GAAM,WAZE,OAkBRwM,GAAkB,SAACC,EAAWC,GAClCD,EAAKE,GAAG,QAAQ,SAACvS,GACVA,EAAKwS,mBAMRhU,QAAQoH,IAAI,wCAAyC5F,EAAKjQ,OAC1D0iB,YAAW,WACTH,EAASnB,SAAS5P,GAAuBvB,EAAKjQ,UAC7C,KARH6V,GAAI,yBAA0B5F,GAC9BA,EAAK0S,eAAgB,EACrB9M,GAAI,4BAA6B5F,GACjCsS,EAASnB,SAASnR,QC9BlB2S,GAAuBC,YAAqB,CAChDC,OAAO,EACPC,gBAAgB,EAChBC,mBAAmB,IAClB1P,QDoC6B,SAACiP,GAC/B,IACIU,EADEC,EAAU,IAAIC,UAAKC,EAAW,CAAEC,MAAO,IAiE7C,OA/DAH,EAAQV,GAAG,SAAS,SAAChU,GACnBC,QAAQC,MAAM,iCACdD,QAAQC,MAAMF,MAGhB0U,EAAQV,GAAG,gBAAgB,WACzB/T,QAAQoH,IAAI,8CAGdqN,EAAQV,GAAG,QAAQ,SAAChjB,GAClBiP,QAAQoH,IAAI,kBAAoBrW,MAGlC0jB,EAAQV,GAAG,cAAc,SAACF,GACxB7T,QAAQoH,IAAI,wBAEZwM,GADAY,EAAYX,EACeC,GAE3BU,EAAUT,GAAG,QAAQ,WACnB/T,QAAQoH,IAAI,6BACZA,GAAI,8BAA+B0M,EAASzS,YAC5CmT,EAAUK,KAAK,CACbb,mBAAmB,EACnBziB,MAAOuiB,EAASzS,aAIlB,IAAMyT,EAAuBtC,GAAe,CAC1CrP,IAAKqR,EAAUO,SAAS5R,IACxBsP,MAAO,SAET+B,EAAUK,KAAKC,GACfN,EAAUK,KACRrC,GAAe,CACbrP,IAAKpO,EACL0d,MAAO,SAGXqB,EAASnB,SAASmC,MAGpBN,EAAUT,GAAG,SAAS,SAAChU,GACrBC,QAAQC,MAAM,oCAAqCF,MAGrDyU,EAAUT,GAAG,SAAS,WACpB/T,QAAQoH,IAAI,mCAAqCoN,EAAUO,SAAS5R,QAGtEqR,EAAUQ,eAAeC,wBAA0B,SAACC,GAClDlV,QAAQoH,IAAR,4BACApH,QAAQoH,IAAI8N,GACZlV,QAAQoH,IAAIoN,EAAUQ,eAAeG,iBAEU,WAA7CX,EAAUQ,eAAeG,iBACoB,iBAA7CX,EAAUQ,eAAeG,iBAEzBnV,QAAQoH,IACN,mCAAqCoN,EAAUO,SAAS5R,SAKzD,SAACiS,GAAD,OAAe,SAACpa,GA4BrB,OA3BAoM,GAAI,wBAAyBpM,GAGxBA,EAAOkZ,cAEAlZ,EAAOuI,YACjBvD,QAAQC,MAAR,kDACAD,QAAQoH,IAAIpM,IAHZA,EAAOuI,UAAYxO,EAMjBiG,EAAOV,OAASqR,GAAoBrR,OACtC0F,QAAQoH,IAAI,4BAA8BpM,EAAO+F,SACjDyT,EAAYC,EAAQ3f,QAAQkG,EAAO+F,QAAS,CAC1CgU,SAAU,CAAE5R,IAAKpO,KAEnB6e,GAAgBY,EAAWV,IAI1B9Y,EAAOkZ,gBACNM,GACDb,GAAuB3Y,EAAOV,QAE/B8M,GAAI,iCACJoN,EAAUK,KAAK7Z,IAGVoa,EAAKpa,QEvIhB,IAAMmW,GDOS,WACbnR,QAAQoH,IAAI,6CACZ,IAAM+J,EAAQkE,YAAkB,CAC9BC,QAASlC,GACTmC,WAAYpB,GACZqB,UAAUtjB,IASZ,OANAif,EAAMsE,UACJC,MAAS,YvBTY,SAACnkB,GACxB,IAAMokB,EAAqB,CAAC,aAC5B,IACEtX,OAAOO,QAAQrN,GAAOgN,SAAQ,YAAmB,IAAD,mBAAhBnC,EAAgB,KAAXG,EAAW,KAC9C,IAAKoZ,EAAmBnb,SAAS4B,GAAM,CACrC,IAAMwD,EAAkBC,KAAK4C,UAAUlG,GACvC1C,aAAa+b,QAAQxZ,EAAKwD,OAG9B,SAEAI,QAAQC,MAAM,yCuBDZ4V,CAAU1E,EAAM9P,cACf,MAGE8P,ECrBK2E,GAEdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU9E,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJ+E,SAASC,eAAe,SJwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACzW,GACND,QAAQC,MAAMA,EAAM0W,c","file":"static/js/main.fb1f659e.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 273;","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect, Text } from \"react-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\ninterface IProps {\n  x: number;\n  y: number;\n  card: ICardStack;\n}\n\ninterface IState {\n  imagesLoaded: {\n    damage: boolean;\n    threat: boolean;\n    generic: boolean;\n  };\n}\n\nclass CardTokens extends Component<IProps, IState> {\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imagesLoaded: {\n        damage: false,\n        threat: false,\n        generic: false,\n      },\n    };\n\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // DAMAGE\n    this.damageImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: true,\n            threat: this.state.imagesLoaded.threat,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.damage) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    this.threatImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: true,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.threat) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // GENERIC\n    this.genericImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: this.state.imagesLoaded.threat,\n            generic: true,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.generic) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.damage &&\n      !prevProps.card?.counterTokens.damage &&\n      !!this.props.card?.counterTokens.damage\n    ) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    if (\n      !this.state.imagesLoaded.threat &&\n      !prevProps.card?.counterTokens.threat &&\n      !!this.props.card?.counterTokens.threat\n    ) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.generic &&\n      !prevProps.card?.counterTokens.generic &&\n      !!this.props.card?.counterTokens.generic\n    ) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    const damageX = this.props.x - this.damageImg.naturalWidth / 2;\n    const damageY = this.props.y - cardConstants.CARD_HEIGHT / 2 + 20;\n    const showDamage =\n      this.state.imagesLoaded.damage && !!this.props.card.counterTokens.damage;\n\n    const damageToken = showDamage ? (\n      <Rect\n        key={`${this.props.card.id}-damageToken`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        fillPatternImage={this.damageImg}\n      ></Rect>\n    ) : null;\n\n    const damageText = showDamage ? (\n      <Text\n        key={`${this.props.card.id}-damageText`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        text={`${this.props.card.counterTokens.damage}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const threatX = this.props.x - this.threatImg.naturalWidth / 2;\n    const threatY = damageY + this.damageImg.naturalHeight + 5;\n    const showThreat =\n      this.state.imagesLoaded.threat && !!this.props.card.counterTokens.threat;\n\n    const threatToken = showThreat ? (\n      <Rect\n        key={`${this.props.card.id}-threatToken`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        fillPatternImage={this.threatImg}\n      ></Rect>\n    ) : null;\n\n    const threatText = showThreat ? (\n      <Text\n        key={`${this.props.card.id}-threatText`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        text={`${this.props.card.counterTokens.threat}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const genericX = this.props.x - this.threatImg.naturalWidth / 2;\n    const genericY = threatY + this.threatImg.naturalHeight + 5;\n    const showGeneric =\n      this.state.imagesLoaded.generic &&\n      !!this.props.card.counterTokens.generic;\n\n    const genericToken = showGeneric ? (\n      <Rect\n        key={`${this.props.card.id}-genericToken`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        fillPatternImage={this.genericImg}\n      ></Rect>\n    ) : null;\n\n    const genericText = showGeneric ? (\n      <Text\n        key={`${this.props.card.id}-genericText`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        text={`${this.props.card.counterTokens.generic}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    return [\n      damageToken,\n      damageText,\n      threatToken,\n      threatText,\n      genericToken,\n      genericText,\n    ];\n  }\n}\n\nexport default CardTokens;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.cards.present;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.present.panMode;\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const myPeerRef = uuidv4();\n\nexport type PlayerColor =\n  | \"red\"\n  | \"cyan\"\n  | \"green\"\n  | \"blue\"\n  | \"magnenta\"\n  | \"yellow\";\n\nexport const possibleColors: PlayerColor[] = [\n  \"red\",\n  \"cyan\",\n  \"green\",\n  \"blue\",\n  \"magnenta\",\n  \"yellow\",\n];\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { myPeerRef, PlayerColor } from \"./constants/app-constants\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  selectedColor: PlayerColor;\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDoubleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private unmounted: boolean;\n  private renderAnimated: boolean = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (localStorage.getItem(\"__render_animated__\")) {\n      this.renderAnimated = true;\n    }\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.img = new Image();\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderAnimated\n      ? this.renderAnimatedCard(heightToUse, widthToUse)\n      : this.renderUnanimatedCard(heightToUse, widthToUse);\n  }\n\n  private renderAnimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  };\n\n  private renderUnanimatedCard = (heightToUse: number, widthToUse: number) => {\n    const scale = this.getScale(widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={this.img}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        // shadowOpacity={2}\n        shadowColor={\n          !!this.props.controlledBy ? this.props.selectedColor : \"black\"\n        }\n        shadowBlur={this.props.dragging ? 20 : this.props.selected ? 10 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={\n          this.props.controlledBy === \"\" ||\n          this.props.controlledBy === myPeerRef\n        }\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens =\n      this.props.dragging || this.props.isGhost ? null : (\n        <CardTokensContainer\n          key={`${this.props.id}-cardTokens`}\n          id={this.props.id}\n          x={this.props.x}\n          y={this.props.y}\n        ></CardTokensContainer>\n      );\n\n    return [\n      cardStack,\n      card,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrl?.includes(\"standard\") &&\n      this.props.imgUrl?.includes(\"_back\")\n    );\n  }\n\n  private getScale(widthToUse: number, heightToUse: number) {\n    const width = this.state.imageLoaded\n      ? widthToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const widthHorizontal = this.state.imageLoaded\n      ? heightToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const height = this.state.imageLoaded\n      ? heightToUse / this.img.naturalHeight\n      : heightToUse;\n\n    const heightHorizontal = this.state.imageLoaded\n      ? widthToUse / this.img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id, event);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id, event);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <Menu\n          keepMounted\n          open={true}\n          onClose={this.props.hideContextMenu}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{\n            top: this.props.position.y + 8,\n            left: this.props.position.x + 8,\n          }}\n        >\n          {this.props.items.map((i, index) => (\n            <MenuItem\n              key={`contextMenu-item-${index}`}\n              onClick={this.handleContextItemClicked(i)}\n            >\n              {i.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      this.props.loadCards(value.cards.map((c) => c.code));\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState || \"{}\").present;\n  } catch (err) {\n    console.error(\"problem parsing\");\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n    console.error(\"Error writing state to local storage\");\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { CounterTokenType, StatusTokenType } from \"./cards.slice\";\n\nexport interface ICardStack {\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n  counterTokens: {\n    [K in CounterTokenType]: number;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\n\n// Make sure initially, none of the cards are \"owned\" / \"selected\"\nif (!!localStorageState.cards) {\n  localStorageState.cards.forEach((c) => {\n    c.controlledBy = \"\";\n    c.selected = false;\n  });\n}\n\nconst defaultState: ICardsState = {\n  cards: [],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { fetchDecklistById } from \"./cards.thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport {\n  addCardStackWithId,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\nexport enum CounterTokenType {\n  Damage = \"damage\",\n  Threat = \"threat\",\n  Generic = \"generic\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  ref: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (\n    cardToUpdate &&\n    (cardToUpdate.controlledBy === \"\" || cardToUpdate.controlledBy === ref)\n  ) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedAndControlledCard = (\n  state: ICardsState,\n  actorRef: string,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => card.selected && card.controlledBy === actorRef)\n    .forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; unselectOtherCards: boolean }>\n> = (state, action) => {\n  if (action.payload.unselectOtherCards) {\n    unselectAllCardsReducer(state, action);\n  }\n\n  mutateCardWithId(\n    state,\n    action.payload.id,\n    (action as any).ACTOR_REF,\n    (card) => {\n      card.selected = true;\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  );\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = false;\n    card.controlledBy = \"\";\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = !card.selected;\n    if (!card.selected) {\n      card.controlledBy = \"\";\n    } else {\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === (action as any).ACTOR_REF &&\n        (card.id === action.payload || card.selected)\n    )\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload.id ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (\n        card &&\n        (card.controlledBy === \"\" ||\n          card.controlledBy === (action as any).ACTOR_REF)\n      ) {\n        card.selected = true;\n        card.controlledBy = (action as any).ACTOR_REF;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState, PayloadAction<any>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === \"\" ||\n        card.controlledBy === (action as any).ACTOR_REF\n    )\n    .forEach((card) => {\n      card.selected = false;\n      card.controlledBy = \"\";\n    });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n\nconst adjustCounterTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: CounterTokenType; delta: number }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.counterTokens[action.payload.tokenType] +=\n      action.payload.delta;\n    if (cardToToggle.counterTokens[action.payload.tokenType] < 0) {\n      cardToToggle.counterTokens[action.payload.tokenType] = 0;\n    }\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    resetCards: resetCardsReducer,\n    toggleToken: toggleTokenReducer,\n    adjustCounterToken: adjustCounterTokenReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.cards = action.payload.cards.present.cards;\n      state.ghostCards = action.payload.cards.present.ghostCards;\n    });\n\n    builder.addCase(replaceCardStack, (state, action) => {\n      const cardToReplaceStack = state.cards.find(\n        (c) => c.id === action.payload.id\n      );\n      if (!!cardToReplaceStack) {\n        cardToReplaceStack.cardStack = action.payload.newStack;\n      }\n    });\n\n    builder.addCase(resetApp, (state) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCard = null;\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(addCardStackWithId, (state, action) => {\n      const newStack: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.id,\n        cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(newStack);\n    });\n\n    builder.addCase(pullCardOutOfCardStackWithId, (state, action) => {\n      const cardStackToUse = state.cards.find(\n        (c) => c.id === action.payload.cardStackId\n      );\n      if (!!cardStackToUse && cardStackToUse.cardStack.length > 1) {\n        const newCardStack: ICardDetails[] = [\n          { jsonId: action.payload.jsonId },\n        ];\n        const newCard = Object.assign({}, cardStackToUse, {\n          cardStack: newCardStack,\n        });\n        newCard.id = action.payload.id;\n        newCard.selected = true;\n        newCard.controlledBy = (action as any).ACTOR_REF;\n        newCard.x = newCard.x + cardConstants.CARD_WIDTH + 5;\n\n        cardStackToUse.cardStack = cardStackToUse.cardStack.filter(\n          (c) => c.jsonId !== action.payload.jsonId\n        );\n        cardStackToUse.selected = false;\n        cardStackToUse.controlledBy = \"\";\n\n        state.cards.push(newCard);\n      }\n    });\n\n    builder.addCase(startCardMoveWithSplitStackId, (state, action) => {\n      // first, if the card moving isn't currently selected, clear all _our_ selected cards\n      const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n      if (cardToStartMoving && !cardToStartMoving.selected) {\n        state.cards = state.cards.map((card) => {\n          if (\n            card.controlledBy === \"\" ||\n            card.controlledBy === (action as any).ACTOR_REF\n          ) {\n            card.selected = card.id === action.payload.id;\n            if (card.selected) {\n              card.controlledBy = (action as any).ACTOR_REF;\n            } else {\n              card.controlledBy = \"\";\n            }\n          }\n          return card;\n        });\n      }\n\n      // If we are splitting, make a new stack of cards\n      if (action.payload.splitTopCard) {\n        const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n        if (!cardToMove) {\n          throw new Error(\"Expected to find card\");\n        }\n\n        cardToMove.selected = false;\n        cardToMove.controlledBy = \"\";\n\n        const topCard = cardToMove.cardStack.shift();\n        const newCard = Object.assign({}, cardToMove, {\n          selected: true,\n          controlledBy: (action as any).ACTOR_REF,\n          dragging: true,\n          cardStack: [topCard],\n        });\n\n        cardToMove.id = action.payload.splitCardId;\n\n        state.cards.push(newCard);\n      }\n\n      // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n      state.ghostCards = [];\n\n      if (!action.payload.splitTopCard) {\n        foreachSelectedAndControlledCard(\n          state,\n          (action as any).ACTOR_REF,\n          (card) => {\n            card.dragging = true;\n            state.ghostCards.push(Object.assign({}, card));\n          }\n        );\n      }\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.heroId,\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.dataId,\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.encounterDeckId,\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.obligationDeckId,\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  resetCards,\n  toggleToken,\n  adjustCounterToken,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { ICardDetails } from \"./initialState\";\n\nexport interface AddCardStackWithIdPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n  id: string;\n}\n\nexport interface PullCardOutOfCardStackWithIdPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n  id: string;\n}\n\nexport interface StartCardMoveWithSplitStackIdPayload {\n  id: string;\n  splitTopCard: boolean;\n  splitCardId: string;\n}\n\nexport interface ReplaceCardStackPayload {\n  id: string;\n  newStack: ICardDetails[];\n}\n\nexport const addCardStackWithId = createAction<AddCardStackWithIdPayload>(\n  \"addCardStackWithId\"\n);\n\nexport const pullCardOutOfCardStackWithId = createAction<PullCardOutOfCardStackWithIdPayload>(\n  \"pullCardOutOfCardStackWithId\"\n);\n\nexport const startCardMoveWithSplitStackId = createAction<StartCardMoveWithSplitStackIdPayload>(\n  \"startCardMoveWithSplitStackId\"\n);\n\nexport const replaceCardStack = createAction<ReplaceCardStackPayload>(\n  \"replaceCardStack\"\n);\n","import { Action, createAsyncThunk, ThunkAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  addCardStackWithId,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\nimport { ICardDetails } from \"./initialState\";\nimport { getCards } from \"./cards.selectors\";\n\ninterface AddCardStackPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n}\n\nexport interface PullCardOutOfCardStackPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n}\n\nexport interface StartCardMovePayload {\n  id: string;\n  splitTopCard: boolean;\n}\n\nexport const shuffleStack = (\n  id: string\n): ThunkAction<void, RootState, unknown, Action<string>> => (\n  dispatch,\n  getState\n) => {\n  const cardsState = getCards(getState());\n  const stackToShuffle = cardsState.cards.find((c) => c.id === id);\n  if (!!stackToShuffle) {\n    const shuffledStack = shuffle(stackToShuffle.cardStack);\n    dispatch(replaceCardStack({ id, newStack: shuffledStack }));\n  }\n};\n\nexport const addCardStack = (\n  payload: AddCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(addCardStackWithId(payloadWithId));\n};\n\nexport const pullCardOutOfCardStack = (\n  payload: PullCardOutOfCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(pullCardOutOfCardStackWithId(payloadWithId));\n};\n\nexport const startCardMove = (\n  payload: StartCardMovePayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    splitCardId: uuidv4(),\n  };\n  dispatch(startCardMoveWithSplitStackId(payloadWithId));\n};\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          value.set_code === `${heroSetCode}` &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      heroId: uuidv4(),\n      data: response.data,\n      dataId: uuidv4(),\n      relatedEncounterDeck: heroEncounterDeck,\n      encounterDeckId: uuidv4(),\n      relatedObligationDeck: heroObligationDeck,\n      obligationDeckId: uuidv4(),\n    };\n  }\n);\n\nconst shuffle = (array: ICardDetails[]): ICardDetails[] => {\n  const returnArray = JSON.parse(JSON.stringify(array));\n  var currentIndex = returnArray.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = returnArray[currentIndex];\n    returnArray[currentIndex] = returnArray[randomIndex];\n    returnArray[randomIndex] = temporaryValue;\n  }\n\n  return returnArray;\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"./rootReducer\";\n\nexport const resetApp = createAction(\"resetAction\");\n\nexport const receiveRemoteGameState = createAction<RootState>(\n  \"receiveRemoteGameState\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.handleClick}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    this.props.completed();\n  };\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { ICardStack } from \"./features/cards/initialState\";\ninterface IProps {\n  cardsDataEntities: ICardData;\n  card: ICardStack;\n  cardSelected: (jsonId: string) => void;\n}\n\nclass CardStackCardSelector extends Component<IProps> {\n  private cardsDataInStack: CardData[] = [];\n\n  constructor(props: IProps) {\n    super(props);\n    this.cardsDataInStack = props.card.cardStack.map((c) => {\n      return this.props.cardsDataEntities[c.jsonId];\n    });\n  }\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"cardstack-card-selector-combobox\"\n          options={this.cardsDataInStack}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Find Card...\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: CardData | null) => {\n    if (!!value && !!this.props.cardSelected) {\n      this.props.cardSelected(value.code);\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default CardStackCardSelector;\n","import { connect } from \"react-redux\";\nimport CardStackCardSelector from \"./CardStackCardSelector\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cardsDataEntities: getCardsDataEntities(state),\n  };\n};\n\nconst CardStackCardSelectorContainer = connect(\n  mapStateToProps,\n  {}\n)(CardStackCardSelector);\n\nexport default CardStackCardSelectorContainer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { Vector2d } from \"konva/types/types\";\nimport { Group, Rect, Text } from \"react-konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\n\ninterface IProps {\n  id: string;\n  pos: Vector2d;\n  value: number;\n  updateCounterValueBy: (amount: number) => void;\n  handleContextMenu: (event: KonvaEventObject<PointerEvent>) => void;\n  onDragEnd: (event: KonvaEventObject<DragEvent>) => void;\n}\n\nclass Counter extends Component<IProps> {\n  render() {\n    return (\n      <Group\n        x={this.props.pos.x}\n        y={this.props.pos.y}\n        draggable={true}\n        onContextMenu={this.props.handleContextMenu}\n        onDragEnd={this.props.onDragEnd}\n      >\n        <Rect cornerRadius={30} width={200} height={100} fill={\"red\"}></Rect>\n        <Text\n          width={200}\n          height={100}\n          fontSize={36}\n          text={`${this.props.value}`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n        ></Text>\n        <Text\n          x={10}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`-`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleDecrement}\n        ></Text>\n        <Text\n          x={140}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`+`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleIncrement}\n        ></Text>\n      </Group>\n    );\n  }\n\n  private handleDecrement = () => {\n    this.props.updateCounterValueBy(-1);\n  };\n\n  private handleIncrement = () => {\n    this.props.updateCounterValueBy(1);\n  };\n}\n\nexport default Counter;\n","import { Component } from \"react\";\nimport * as React from \"react\";\ninterface IProps {\n  connect: (peerId: string) => void;\n}\n\nclass PeerConnector extends Component<IProps> {\n  public inputRef: HTMLInputElement | null = null;\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <input\n          ref={(ref) => {\n            if (!ref) return;\n            this.inputRef = ref;\n          }}\n        ></input>\n        <button onClick={this.connect}>Connect</button>\n      </div>\n    );\n  }\n\n  private connect = (_event: any) => {\n    console.log(\"connecting with peer id \" + this.inputRef?.value);\n\n    this.props.connect(this.inputRef?.value || \"\");\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default PeerConnector;\n","import { ReactReduxContext, Provider } from \"react-redux\";\nimport * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport {\n  CounterTokenType,\n  StatusTokenType,\n} from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getDistance } from \"./utilities/geo\";\nimport CardStackCardSelectorContainer from \"./CardStackCardSelectorContainer\";\nimport Counter from \"./Counter\";\nimport PeerConnector from \"./PeerConnector\";\nimport { PlayerColor } from \"./constants/app-constants\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  playerColors: { [key: string]: PlayerColor };\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (payload: { id: string; unselectOtherCards: boolean }) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: (payload?: any) => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n  adjustCounterToken: (payload: {\n    id: string;\n    tokenType: CounterTokenType;\n    delta: number;\n  }) => void;\n  pullCardOutOfCardStack: (payload: {\n    cardStackId: string;\n    jsonId: string;\n    pos: Vector2d;\n  }) => void;\n  addNewCounter: (pos: Vector2d) => void;\n  updateCounterValue: (payload: { id: string; delta: number }) => void;\n  removeCounter: (id: string) => void;\n  moveCounter: (payload: { id: string; newPos: Vector2d }) => void;\n  connectToRemoteGame: (peerId: string) => void;\n  undo: () => void;\n  redo: () => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n  showCardSearch: boolean;\n  cardSearchPosition: Vector2d | null;\n  cardStackForSearching: ICardStack | null;\n  showPeerConnector: boolean;\n  peerConnectorPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.handleCardClick(card)}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          selectedColor={this.props.playerColors[card.controlledBy] ?? \"black\"}\n          controlledBy={card.controlledBy}\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                selectedColor={\n                  this.props.playerColors[card.controlledBy] ?? \"black\"\n                }\n                controlledBy={card.controlledBy}\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrl={this.getImgUrl(card)}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div\n        tabIndex={1}\n        onKeyDown={this.handleKeyDown}\n        onKeyPress={this.handleKeyPress}\n      >\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        {this.renderCardSearch()}\n        {this.renderPeerConnector()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer>\n                  {this.props.gameState.counters.map((counter) => (\n                    <Counter\n                      key={`${counter.id}-counter`}\n                      id={counter.id}\n                      pos={counter.position}\n                      value={counter.value}\n                      updateCounterValueBy={this.handleCounterValueUpdate(\n                        counter.id\n                      )}\n                      handleContextMenu={this.handleCounterContextMenu(\n                        counter.id\n                      )}\n                      onDragEnd={this.handleCounterDrag(counter.id)}\n                    ></Counter>\n                  ))}\n                </Layer>\n                <Layer preventDefault={true}>\n                  {staticCards\n                    .concat(ghostCards)\n                    .concat(movingCards)\n                    .concat(previewCards)}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"black\"\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private handleCounterValueUpdate = (id: string) => (delta: number) => {\n    this.props.updateCounterValue({ id, delta });\n  };\n\n  private handleCounterDrag = (id: string) => (\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    this.props.moveCounter({\n      id,\n      newPos: {\n        x: event.target.x(),\n        y: event.target.y(),\n      },\n    });\n  };\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderCardSearch = () => {\n    if (!this.state.showCardSearch) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.cardSearchPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing card search position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.cardStackForSearching ? (\n      <TopLayer position={pos} completed={this.clearCardSearch}>\n        <CardStackCardSelectorContainer\n          card={this.state.cardStackForSearching}\n          cardSelected={this.handleCardSelectedFromCardStack(\n            this.state.cardStackForSearching.id,\n            pos\n          )}\n        />\n      </TopLayer>\n    ) : null;\n  };\n\n  private renderPeerConnector = () => {\n    if (!this.state.showPeerConnector) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.peerConnectorPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing peer connector position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.showPeerConnector ? (\n      <TopLayer position={pos} completed={this.clearPeerConnector}>\n        <PeerConnector connect={this.handlePeerConnect}></PeerConnector>\n      </TopLayer>\n    ) : null;\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private handlePeerConnect = (peerId: string) => {\n    this.clearPeerConnector();\n    this.props.connectToRemoteGame(peerId);\n  };\n\n  private handleCardSelectedFromCardStack = (\n    cardStackId: string,\n    pos: Vector2d\n  ) => (jsonId: string) => {\n    this.clearCardSearch();\n    this.props.pullCardOutOfCardStack({ cardStackId, jsonId, pos });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private clearCardSearch = () => {\n    this.setState({\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    });\n  };\n\n  private clearPeerConnector = () => {\n    this.setState({\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCounterContextMenu = (counterId: string) => (\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Remove\",\n        action: () => {\n          this.props.removeCounter(counterId);\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard({ id: cardId, unselectOtherCards: false });\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n\n      menuItems.push({\n        label: \"Find Specific Card\",\n        action: () => {\n          if (!!card) {\n            this.setState({\n              showCardSearch: true,\n              cardSearchPosition: this.stage?.getPointerPosition() ?? null,\n              cardStackForSearching: card,\n            });\n          }\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: -1,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardClick = (card: ICardStack) => (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n\n    if (card.selected && modifierKeyHeld) {\n      this.props.toggleSelectCard(cardId);\n    } else {\n      this.props.selectCard({\n        id: cardId,\n        unselectOtherCards: !modifierKeyHeld,\n      });\n    }\n  };\n\n  private handleSelectAndExhaust = (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n    this.props.selectCard({ id: cardId, unselectOtherCards: !modifierKeyHeld });\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (\n      event.shiftKey &&\n      (event.ctrlKey || event.metaKey) &&\n      event.key === \"z\"\n    ) {\n      this.props.redo();\n    } else if ((event.ctrlKey || event.metaKey) && event.key === \"z\") {\n      event.preventDefault();\n      this.props.undo();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: KonvaEventObject<MouseEvent>) => {\n    if (event.evt.button === 0) {\n      // Only do something if it's the primary button (not a right-click)\n      const pos = this.getRelativePositionFromTarget(this.stage);\n\n      this.setState({\n        selectStartPos: {\n          x: pos.x,\n          y: pos.y,\n        },\n        selecting: true,\n      });\n    }\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Create new counter\",\n        action: () => {\n          this.props.addNewCounter(\n            this.getRelativePositionFromTarget(this.stage) ?? { x: 0, y: 0 }\n          );\n        },\n      },\n      { label: \"Reset\", action: this.props.resetApp },\n      {\n        label: \"Connect to Remote Game\",\n        action: () => {\n          this.setState({\n            showPeerConnector: true,\n            peerConnectorPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n    const bottomCardData = this.props.cardsData[\n      card.cardStack[card.cardStack.length - 1].jsonId\n    ];\n\n    if (\n      !card.faceup &&\n      (!!bottomCardData.back_link || !!bottomCardData.double_sided)\n    ) {\n      return (\n        process.env.PUBLIC_URL +\n        \"/images/cards/\" +\n        bottomCardData.octgn_id +\n        \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + topCardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game.present;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n\nexport const getPlayerColors = createSelector(getGame, (game) => {\n  return game.playerColors;\n});\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\n\nexport interface AddNewCounterWithIdPayload {\n  pos: Vector2d;\n  id: string;\n}\n\nexport const addNewCounterWithId = createAction<AddNewCounterWithIdPayload>(\n  \"addNewCounterWithId\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport { myPeerRef, PlayerColor } from \"../../constants/app-constants\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n  counters: ICounter[];\n  playerColors: { [key: string]: PlayerColor };\n}\n\nexport interface ICounter {\n  id: string;\n  position: Vector2d;\n  value: number;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nlocalStorageState.playerColors = {};\nlocalStorageState.playerColors[myPeerRef] = \"red\";\n\nconst defaultState: IGameState = {\n  playerColors: {},\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n  counters: [],\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { PlayerColor } from \"../../constants/app-constants\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport { addNewCounterWithId } from \"./game.actions\";\nimport { IGameState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\nconst updateCounterValueReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ id: string; delta: number }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.value += action.payload.delta;\n    if (counter.value < 0) {\n      counter.value = 0;\n    }\n  }\n};\n\nconst removeCounterReducer: CaseReducer<IGameState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.counters = state.counters.filter((c) => c.id !== action.payload);\n};\n\nconst moveCounterReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ id: string; newPos: Vector2d }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.position = {\n      x: action.payload.newPos.x,\n      y: action.payload.newPos.y,\n    };\n  }\n};\n\nconst connectToRemoteGameReducer: CaseReducer<\n  IGameState,\n  PayloadAction<string>\n> = (state, action) => {};\n\nconst setPlayerColorReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ ref: string; color: PlayerColor }>\n> = (state, action) => {\n  state.playerColors[action.payload.ref] = action.payload.color;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n    updateCounterValue: updateCounterValueReducer,\n    removeCounter: removeCounterReducer,\n    moveCounter: moveCounterReducer,\n    connectToRemoteGame: connectToRemoteGameReducer,\n    setPlayerColor: setPlayerColorReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.counters = action.payload.game.present.counters;\n    });\n\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n      state.counters = [];\n    });\n\n    builder.addCase(addNewCounterWithId, (state, action) => {\n      state.counters.push({\n        id: action.payload.id,\n        position: action.payload.pos,\n        value: 0,\n      });\n    });\n  },\n});\n\nexport const {\n  updateZoom,\n  updatePosition,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n  connectToRemoteGame,\n  setPlayerColor,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { connect } from \"react-redux\";\nimport { ActionCreators } from \"redux-undo\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  adjustCounterToken,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  togglePanMode,\n  toggleSelectCard,\n  toggleToken,\n  unselectAllCards,\n  unselectCard,\n} from \"./features/cards/cards.slice\";\nimport {\n  addCardStack,\n  fetchDecklistById,\n  pullCardOutOfCardStack,\n  startCardMove,\n  shuffleStack,\n} from \"./features/cards/cards.thunks\";\nimport { getGame, getPlayerColors } from \"./features/game/game.selectors\";\nimport {\n  connectToRemoteGame,\n  moveCounter,\n  removeCounter,\n  updateCounterValue,\n  updatePosition,\n  updateZoom,\n} from \"./features/game/game.slice\";\nimport { addNewCounter } from \"./features/game/game.thunks\";\nimport { resetApp } from \"./store/global.actions\";\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    playerColors: getPlayerColors(state),\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n  connectToRemoteGame,\n  undo: ActionCreators.undo,\n  redo: ActionCreators.redo,\n})(App);\n\nexport default AppContainer;\n","import { Vector2d } from \"konva/types/types\";\nimport { Action } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { addNewCounterWithId } from \"./game.actions\";\n\nexport const addNewCounter = (\n  pos: Vector2d\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    pos,\n    id: uuidv4(),\n  };\n  dispatch(addNewCounterWithId(payloadWithId));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport undoable, { excludeAction, groupByActionTypes } from \"redux-undo\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport { startCardMoveWithSplitStackId } from \"../features/cards/cards.actions\";\nimport cards, {\n  cardMove,\n  hoverCard,\n  hoverLeaveCard,\n} from \"../features/cards/cards.slice\";\nimport game, {\n  connectToRemoteGame,\n  moveCounter,\n  updatePosition,\n  updateZoom,\n} from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game: undoable(game, {\n    limit: 20,\n    groupBy: groupByActionTypes([moveCounter.type]),\n    filter: excludeAction([\n      updateZoom.type,\n      updatePosition.type,\n      connectToRemoteGame.type,\n    ]),\n  }),\n  cards: undoable(cards, {\n    limit: 20,\n    filter: excludeAction([\n      startCardMoveWithSplitStackId.type,\n      cardMove.type,\n      hoverCard.type,\n      hoverLeaveCard.type,\n    ]),\n  }),\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import Peer from \"peerjs\";\nimport { myPeerRef } from \"../constants/app-constants\";\nimport {\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n} from \"../features/cards/cards.slice\";\nimport {\n  connectToRemoteGame,\n  setPlayerColor,\n  updatePosition,\n  updateZoom,\n} from \"../features/game/game.slice\";\nimport { receiveRemoteGameState } from \"./global.actions\";\n\nconst DEBUG = false;\n\nconst blacklistRemoteActions = {\n  [connectToRemoteGame.type]: true,\n  [updatePosition.type]: true,\n  [updateZoom.type]: true,\n  [hoverCard.type]: true,\n  [hoverLeaveCard.type]: true,\n  [togglePanMode.type]: true,\n  [receiveRemoteGameState.type]: true,\n};\n\nconst log = (...args: any[]) => {\n  if (DEBUG) {\n    console.log(args[0], args[1]);\n  }\n};\n\nconst setupConnection = (conn: any, storeAPI: any) => {\n  conn.on(\"data\", (data: any) => {\n    if (!data.INITIAL_STATE_MSG) {\n      log(\"recieved remote action\", data);\n      data.REMOTE_ACTION = true;\n      log(\"dispatching remote action\", data);\n      storeAPI.dispatch(data);\n    } else {\n      console.log(\"going to replace (most of) state with\", data.state);\n      setTimeout(() => {\n        storeAPI.dispatch(receiveRemoteGameState(data.state));\n      }, 0);\n    }\n  });\n};\n\nexport const peerJSMiddleware = (storeAPI: any) => {\n  const cgpPeer = new Peer(undefined, { debug: 3 });\n  let activeCon: Peer.DataConnection;\n  cgpPeer.on(\"error\", (err) => {\n    console.error(\"*****************Server error\");\n    console.error(err);\n  });\n\n  cgpPeer.on(\"disconnected\", () => {\n    console.log(\"****Peer server connection disconnected\");\n  });\n\n  cgpPeer.on(\"open\", (id) => {\n    console.log(\"My peer ID is: \" + id);\n  });\n\n  cgpPeer.on(\"connection\", (conn) => {\n    console.log(\"Connection received!\");\n    activeCon = conn;\n    setupConnection(activeCon, storeAPI);\n\n    activeCon.on(\"open\", () => {\n      console.log(\"connection ready for data\");\n      log(\"going to send initial state\", storeAPI.getState());\n      activeCon.send({\n        INITIAL_STATE_MSG: true,\n        state: storeAPI.getState(),\n      });\n      // TODO: more complicated logic to handle multiple connections. Right now\n      // this just changes the connecting client to blue\n      const setPlayerColorAction = setPlayerColor({\n        ref: activeCon.metadata.ref,\n        color: \"blue\",\n      });\n      activeCon.send(setPlayerColorAction);\n      activeCon.send(\n        setPlayerColor({\n          ref: myPeerRef,\n          color: \"red\",\n        })\n      );\n      storeAPI.dispatch(setPlayerColorAction);\n    });\n\n    activeCon.on(\"error\", (err) => {\n      console.error(\"****************Connection error:\", err);\n    });\n\n    activeCon.on(\"close\", () => {\n      console.log(\"******connection closed for ref \" + activeCon.metadata.ref);\n    });\n\n    activeCon.peerConnection.onconnectionstatechange = (ev: Event) => {\n      console.log(`connection state changed`);\n      console.log(ev);\n      console.log(activeCon.peerConnection.connectionState);\n      if (\n        activeCon.peerConnection.connectionState === \"closed\" ||\n        activeCon.peerConnection.connectionState === \"disconnected\"\n      ) {\n        console.log(\n          \"CLEARING CLIENT OWNED CARDS for \" + activeCon.metadata.ref\n        );\n      }\n    };\n  });\n  return (next: any) => (action: any) => {\n    log(\"received local action\", action);\n\n    // If this isn't a REMOTE action, add our ref onto it\n    if (!action.REMOTE_ACTION) {\n      action.ACTOR_REF = myPeerRef;\n    } else if (!action.ACTOR_REF) {\n      console.error(`Received a REMOTE action without an ACTOR_REF:`);\n      console.log(action);\n    }\n\n    if (action.type === connectToRemoteGame.type) {\n      console.log(\"going to connect to peer \" + action.payload);\n      activeCon = cgpPeer.connect(action.payload, {\n        metadata: { ref: myPeerRef },\n      });\n      setupConnection(activeCon, storeAPI);\n    }\n\n    if (\n      !action.REMOTE_ACTION &&\n      !!activeCon &&\n      !blacklistRemoteActions[action.type]\n    ) {\n      log(\"going to send action to peer!\");\n      activeCon.send(action);\n    }\n\n    return next(action);\n  };\n};\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\nimport { peerJSMiddleware } from \"./peer-js-redux-middleware\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n}).concat(peerJSMiddleware);\n\nexport default function configureStore() {\n  console.log(\"configuring store. NODE_ENV is \" + process.env.NODE_ENV);\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}