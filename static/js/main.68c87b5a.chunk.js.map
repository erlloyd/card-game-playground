{"version":3,"sources":["constants/card-constants.ts","Card.tsx","utilities/geo.ts","ContextMenu.tsx","TopLayer.tsx","DeckLoader.tsx","EncounterLoader.tsx","App.tsx","features/cards-data/cards-data.selectors.ts","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/cards/cards.async-thunks.ts","features/cards/cards.selectors.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/game/initialState.ts","features/game/game.slice.ts","features/game/game.selectors.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","Card","props","img","unmounted","renderAnimated","renderAnimatedCard","heightToUse","widthToUse","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","x","y","width","height","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","state","imageLoaded","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","dragging","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","id","renderUnanimatedCard","event","dx","target","dy","cancelBubble","handleHover","handleHoverLeave","localStorage","getItem","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","renderCard","Component","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","menuStyle","top","position","left","className","style","map","i","index","label","TopLayer","containerStyle","completed","children","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","type","EncounterLoader","App","stage","noOp","renderEmptyMessage","cards","length","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","Error","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","fetchDecklistById","decklistId","handleStageClickOrTap","mousePos","selectStartPos","unselectAllCards","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","newPos","updatePosition","handleCardContextMenu","cardId","selectCard","card","find","c","menuItems","flipCards","cardStack","push","shuffleStack","handleSelectAndExhaust","exhaustCard","handleCardDragStart","splitTopCard","filter","draggingCard","hasStack","upperRightPoint","startCardMove","handleKeyPress","code","which","keyCode","togglePanMode","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","pos","point","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","reduce","currSelectedCards","Intersects","selectMultipleCards","ids","handleMouseMove","resetCards","getImgUrl","Object","keys","cardsData","cardData","jsonId","faceup","back_link","process","octgn_id","loadCardsData","staticCards","fill","dropTargetCard","cardMove","endCardMove","toggleSelectCard","hoverCard","hoverLeaveCard","numCardsInStack","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","previewPos","tabIndex","onKeyPress","ref","stagePosition","innerHeight","panMode","onMouseUp","onMouseMove","onTouchMove","scale","onWheel","concat","getCardsData","getCardsDataEntities","createSelector","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","cardsDataSlice","createSlice","name","initialState","reducers","heroPacks","entries","PackData","includes","encounterPacks","forEach","pack","console","error","actions","createAsyncThunk","payload","thunkApi","a","axios","get","response","getState","heroCardsData","heroSetCode","data","investigator_code","set_code","encounterCardsData","heroEncounterDeck","relatedEncounterDeck","getCards","shouldShowPreview","every","getPanMode","loadState","serializedState","JSON","parse","err","localStorageState","getCardStackWithId","mutateCardWithId","callback","cardToUpdate","cardsSlice","unselectCard","cardToStartMoving","cardToMove","topCard","shift","newCard","assign","uuidv4","foreachSelectedCard","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","sort","c1","c2","movedCard","splice","indexOf","dropTargetCards","cardToPreview","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","extraReducers","builder","addCase","fulfilled","log","heroCard","mainDeckStack","slots","cardDetails","Array","from","cardPadding","newDeck","encounterDeck","gameSlice","getGame","game","AppContainer","connect","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","store","rtkConfigureStore","reducer","middleware","subscribe","throttle","blacklistStateKeys","stringify","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.68c87b5a.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  fill: string;\n  handleClick?: (id: string) => void;\n  handleDoubleClick?: (id: string) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n  private renderAnimated: boolean = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (localStorage.getItem(\"__render_animated__\")) {\n      this.renderAnimated = true;\n    }\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    };\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderContext() {\n    // return this.state.showContextMenu ? (\n    //   <Portal key={`${this.props.id}-context`}>\n    //     <div>HI THERE</div>\n    //   </Portal>\n    // ) : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderAnimated\n      ? this.renderAnimatedCard(heightToUse, widthToUse)\n      : this.renderUnanimatedCard(heightToUse, widthToUse);\n  }\n\n  private renderAnimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  };\n\n  private renderUnanimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={{\n          x: widthToUse / 2,\n          y: heightToUse / 2,\n        }}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternImage={this.img}\n        fillPatternScaleX={\n          this.state.imageLoaded\n            ? widthToUse / this.img.naturalWidth\n            : widthToUse\n        }\n        fillPatternScaleY={\n          this.state.imageLoaded\n            ? heightToUse / this.img.naturalHeight\n            : heightToUse\n        }\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n    // console.log('Context Menu in Card!');\n    // event.evt.preventDefault();\n    // event.cancelBubble = true;\n    // if (!!this.props.numCardsInStack && this.props.numCardsInStack > 1) {\n    //   console.log('Can shuffle!');\n    // } else {\n    //   console.log('Can\\'t shuffle!');\n    // }\n  };\n\n  private handleDoubleClick = () => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: any) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    const menuStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <div\n          className=\"context-menu\"\n          style={menuStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.hideContextMenu}\n        >\n          {this.props.items.map((i, index) => (\n            <div key={`context-menu-item-${index}`}>\n              <button\n                className=\"context-menu-item\"\n                onContextMenu={this.preventDefault}\n                onClick={this.handleContextItemClicked(i)}\n              >\n                {i.label}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.completed}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return <input onClick={this.cancelBubble}></input>;\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import * as Intersects from \"intersects\";\nimport { Component } from \"react\";\nimport * as React from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport Konva from \"konva\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport \"./App.scss\";\nimport Card from \"./Card\";\nimport { ICardStack, ICardsState } from \"./features/cards/initialState\";\nimport { Vector2d } from \"konva/types/types\";\nimport { getDistance } from \"./utilities/geo\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport TopLayer from \"./TopLayer\";\nimport DeckLoader from \"./DeckLoader\";\nimport { IGameState } from \"./features/game/initialState\";\nimport EncounterLoader from \"./EncounterLoader\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetCards: () => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            imgUrl={this.getImgUrl(card)}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={false}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrl={this.getImgUrl(card)}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        <Stage\n          ref={(ref) => {\n            if (!ref) return;\n\n            this.stage = ref;\n          }}\n          x={this.props.gameState.stagePosition.x}\n          y={this.props.gameState.stagePosition.y}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={this.handleStageClickOrTap}\n          onTap={this.handleStageClickOrTap}\n          onMouseDown={this.props.panMode ? this.noOp : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? this.noOp : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? this.noOp : this.handleMouseMove}\n          onContextMenu={this.handleContextMenu}\n          scale={this.props.gameState.stageZoom}\n          onWheel={this.handleWheel}\n          draggable={this.props.panMode}\n          preventDefault={true}\n        >\n          <Layer preventDefault={true}>\n            {staticCards\n              .concat(ghostCards)\n              .concat(movingCards)\n              .concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"\n            />\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearEncounterImporter}\n      >\n        <EncounterLoader />\n      </TopLayer>\n    );\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (getDistance(this.state.selectStartPos, mousePos) < 30) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard(cardId);\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n    }\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleSelectAndExhaust = (cardId: string) => {\n    this.props.selectCard(cardId);\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: any) => {\n    const pos = this.getRelativePositionFromTarget(this.stage);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      { label: \"Reset\", action: this.props.resetCards },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    if (!card.faceup && !!cardData.back_link) {\n      return (\n        process.env.PUBLIC_URL + \"/images/cards/\" + cardData.octgn_id + \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + cardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      data: response.data,\n      relatedEncounterDeck: heroEncounterDeck,\n    };\n  }\n);\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\n\n// import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\nconst defaultState: ICardsState = {\n  cards: [\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 200,\n    //   cardStack: [{ jsonId: \"01001a\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 400,\n    //   y: 400,\n    //   cardStack: [{ jsonId: \"01027\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 600,\n    //   cardStack: [{ jsonId: \"01036\" }],\n    // },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      selected: true,\n      dragging: true,\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n    resetCards: resetCardsReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: mainDeckStack,\n        selected: false,\n      };\n\n      const encounterDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  resetCards,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nconst defaultState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { initialState, IGameState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n  },\n});\n\nexport const { updateZoom, updatePosition } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { connect } from \"react-redux\";\n// import Types from 'Types';\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n  resetCards,\n} from \"./features/cards/cards.slice\";\n\nimport { updateZoom, updatePosition } from \"./features/game/game.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetCards,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n});\n\nexport default function configureStore() {\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}