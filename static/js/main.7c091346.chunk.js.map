{"version":3,"sources":["features/cards/cards.slice.ts","CardTokens.tsx","features/cards/cards.selectors.ts","CardTokensContainer.tsx","constants/card-constants.ts","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.async-thunks.ts","store/global.actions.ts","TopLayer.tsx","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["StatusTokenType","CardTokens","console","log","this","props","card","x","y","width","height","fill","Component","getCards","state","cards","getCardMapById","createSelector","reduce","map","id","shouldShowPreview","previewCard","every","dragging","getPanMode","panMode","CardTokensContainer","connect","cardConstants","HORIZONTAL_TYPE_CODES","Card","img","stunnedImg","confusedImg","toughImg","damageImg","threatImg","genericImg","unmounted","renderAnimated","renderAnimatedCard","heightToUse","widthToUse","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","imageLoaded","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","renderUnanimatedCard","scale","getScale","fillPatternRotation","shouldRenderImageHorizontal","typeCode","cardStackOffset","cardStack","numCardsInStack","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","getTokenInSlot","confused","tough","event","dx","target","dy","cancelBubble","handleHover","handleHoverLeave","localStorage","getItem","prevImgUrl","imgUrl","Image","onload","setState","src","process","prevProps","prevState","renderCard","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","menuStyle","top","position","left","className","style","i","index","label","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","value","onKeyDown","EncounterLoader","handleSelected","_event","loadCards","c","code","Autocomplete","options","encounterData","getOptionLabel","option","setData","name","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","Object","values","forEach","encounterCard","setCode","set_code","push","entries","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","loadState","serializedState","JSON","parse","err","localStorageState","initialState","ghostCards","dropTargetCard","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSetCode","data","investigator_code","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeck","relatedEncounterDeck","relatedObligationDeck","resetApp","createAction","getCardStackWithId","find","mutateCardWithId","callback","cardToUpdate","cardsSlice","createSlice","reducers","selectCard","unselectCard","toggleSelectCard","exhaustCard","startCardMove","cardToStartMoving","splitTopCard","cardToMove","Error","topCard","shift","newCard","assign","uuidv4","foreachSelectedCard","cardMove","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCards","concat","length","selectMultipleCards","ids","unselectAllCards","hoverCard","cardToPreview","faceup","hoverLeaveCard","togglePanMode","flipCards","reverse","shuffleStack","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","resetCards","addCardStack","newStack","cardJsonIds","jsonId","statusTokens","toggleToken","cardToToggle","tokenType","extraReducers","builder","addCase","fulfilled","heroCard","mainDeckStack","slots","cardDetails","Array","from","keys","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","containerStyle","completed","children","App","stage","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","pos","clearEncounterImporter","handleLoadEncounter","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","newPos","updatePosition","handleCardContextMenu","cardId","currentStatusTokens","menuItems","Stunned","Confused","Tough","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","handleKeyPress","which","keyCode","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","handleMouseMove","getCardType","getImgUrl","topCardData","bottomCardData","back_link","double_sided","octgn_id","loadCardsData","staticCards","tokens","damage","threat","generic","movingCards","previewCards","showPreview","rawPos","previewPos","tabIndex","onKeyPress","Consumer","store","ref","stagePosition","innerHeight","onMouseUp","onMouseMove","onTouchMove","onWheel","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","error","SetData","card_set_type_code","getGame","game","gameSlice","AppContainer","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","rtkConfigureStore","reducer","middleware","subscribe","throttle","blacklistStateKeys","stringify","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7c091346.chunk.js","sourcesContent":["import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { fetchDecklistById } from \"./cards.async-thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (cardToUpdate) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards.filter((card) => card.selected).forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\nconst shuffle = (array: ICardDetails[]) => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = true;\n  });\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = false;\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected;\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst startCardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; splitTopCard: boolean }>\n> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map((card) => {\n      card.selected = card.id === action.payload.id;\n      return card;\n    });\n  }\n\n  // If we are splitting, make a new stack of cards\n  if (action.payload.splitTopCard) {\n    const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n    if (!cardToMove) {\n      throw new Error(\"Expected to find card\");\n    }\n\n    cardToMove.selected = false;\n\n    const topCard = cardToMove.cardStack.shift();\n    const newCard = Object.assign({}, cardToMove, {\n      selected: true,\n      dragging: true,\n      cardStack: [topCard],\n    });\n\n    cardToMove.id = uuidv4();\n\n    state.cards.push(newCard);\n  }\n\n  // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n  state.ghostCards = [];\n\n  if (!action.payload.splitTopCard) {\n    foreachSelectedCard(state, (card) => {\n      card.dragging = true;\n      state.ghostCards.push(Object.assign({}, card));\n    });\n  }\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter((card) => card.id === action.payload.id || card.selected)\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (card) {\n        card.selected = true;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach((card) => {\n    card.selected = false;\n  });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst shuffleStackReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  shuffle(state.cards.find((c) => c.id === action.payload)?.cardStack || []);\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst addCardStackReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ cardJsonIds: string[]; position: Vector2d }>\n> = (state, action) => {\n  const newStack: ICardStack = {\n    x: action.payload.position.x,\n    y: action.payload.position.y,\n    dragging: false,\n    exhausted: false,\n    faceup: true,\n    fill: \"red\",\n    id: uuidv4(),\n    cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n      jsonId,\n    })),\n    selected: false,\n    statusTokens: {\n      stunned: false,\n      confused: false,\n      tough: false,\n    },\n  };\n\n  state.cards.push(newStack);\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    shuffleStack: shuffleStackReducer,\n    resetCards: resetCardsReducer,\n    addCardStack: addCardStackReducer,\n    toggleToken: toggleTokenReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCard = null;\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: uuidv4(),\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  resetCards,\n  addCardStack,\n  toggleToken,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect } from \"react-konva\";\ninterface IProps {\n  x?: number;\n  y?: number;\n  card?: ICardStack;\n}\n\nclass CardTokens extends Component<IProps> {\n  render() {\n    console.log(this.props.card);\n    return (\n      <Rect\n        x={this.props.x}\n        y={this.props.y}\n        width={10}\n        height={10}\n        fill=\"green\"\n      ></Rect>\n    );\n  }\n}\n\nexport default CardTokens;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect } from \"react-konva\";\nimport { animated, Spring } from \"react-spring/renderprops-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { cardConstants } from \"./constants/card-constants\";\n// import Portal from './Portal';\n// import ContextMenu from './ContextMenu';\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string) => void;\n  handleDoubleClick?: (id: string) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrl: string;\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n  private renderAnimated: boolean = false;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (localStorage.getItem(\"__render_animated__\")) {\n      this.renderAnimated = true;\n    }\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.img = new Image();\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      this.props.imgUrl &&\n      this.props.imgUrl !== this.img.src\n    ) {\n      this.img.src = this.props.imgUrl;\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.state.imageLoaded ? this.renderCard() : null;\n  }\n\n  private renderCard() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderAnimated\n      ? this.renderAnimatedCard(heightToUse, widthToUse)\n      : this.renderUnanimatedCard(heightToUse, widthToUse);\n  }\n\n  private renderAnimatedCard = (heightToUse: number, widthToUse: number) => {\n    return (\n      <Spring\n        key={`${this.props.id}-card`}\n        native={true}\n        to={{\n          rotation: this.props.exhausted ? 90 : 0,\n        }}\n      >\n        {(animatedProps: any) => (\n          <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n              x: widthToUse / 2,\n              y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? \"blue\" : \"\"}\n            strokeWidth={this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={\n              this.state.imageLoaded\n                ? widthToUse / this.img.naturalWidth\n                : widthToUse\n            }\n            fillPatternScaleY={\n              this.state.imageLoaded\n                ? heightToUse / this.img.naturalHeight\n                : heightToUse\n            }\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            onContextMenu={this.handleContextMenu}\n          />\n        )}\n      </Spring>\n    );\n  };\n\n  private renderUnanimatedCard = (heightToUse: number, widthToUse: number) => {\n    const scale = this.getScale(widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={this.img}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleMouseDown}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens = (\n      <CardTokensContainer\n        key={`${this.props.id}-cardTokens`}\n        id={this.props.id}\n        x={this.props.x}\n        y={this.props.y}\n      ></CardTokensContainer>\n    );\n\n    return [\n      cardStack,\n      card,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrl?.includes(\"standard\") &&\n      this.props.imgUrl?.includes(\"_back\")\n    );\n  }\n\n  private getScale(widthToUse: number, heightToUse: number) {\n    const width = this.state.imageLoaded\n      ? widthToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const widthHorizontal = this.state.imageLoaded\n      ? heightToUse / this.img.naturalWidth\n      : widthToUse;\n\n    const height = this.state.imageLoaded\n      ? heightToUse / this.img.naturalHeight\n      : heightToUse;\n\n    const heightHorizontal = this.state.imageLoaded\n      ? widthToUse / this.img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = () => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: any) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    const menuStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <div\n          className=\"context-menu\"\n          style={menuStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.hideContextMenu}\n        >\n          {this.props.items.map((i, index) => (\n            <div key={`context-menu-item-${index}`}>\n              <button\n                className=\"context-menu-item\"\n                onContextMenu={this.preventDefault}\n                onClick={this.handleContextItemClicked(i)}\n              >\n                {i.label}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      this.props.loadCards(value.cards.map((c) => c.code));\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { StatusTokenType } from \"./cards.slice\";\n\n// import { v4 as uuidv4 } from \"uuid\";\nexport interface ICardStack {\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\nconst defaultState: ICardsState = {\n  cards: [\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 200,\n    //   cardStack: [{ jsonId: \"01001a\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 400,\n    //   y: 400,\n    //   cardStack: [{ jsonId: \"01027\" }],\n    // },\n    // {\n    //   dragging: false,\n    //   exhausted: false,\n    //   faceup: true,\n    //   fill: \"red\",\n    //   id: uuidv4(),\n    //   selected: false,\n    //   x: 200,\n    //   y: 600,\n    //   cardStack: [{ jsonId: \"01036\" }],\n    // },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          value.set_code === `${heroSetCode}` &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      data: response.data,\n      relatedEncounterDeck: heroEncounterDeck,\n      relatedObligationDeck: heroObligationDeck,\n    };\n  }\n);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const resetApp = createAction(\"resetAction\");\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.props.completed}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { ReactReduxContext, Provider } from \"react-redux\";\nimport * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { StatusTokenType } from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getDistance } from \"./utilities/geo\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (id: string) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrl={this.getImgUrl(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.props.toggleSelectCard}\n            imgUrl={this.getImgUrl(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrl={this.getImgUrl(card)}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer preventDefault={true}>\n                  {staticCards\n                    .concat(ghostCards)\n                    .concat(movingCards)\n                    .concat(previewCards)}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"black\"\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard(cardId);\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleSelectAndExhaust = (cardId: string) => {\n    this.props.selectCard(cardId);\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: any) => {\n    const pos = this.getRelativePositionFromTarget(this.stage);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      { label: \"Reset\", action: this.props.resetApp },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getImgUrl = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n    const bottomCardData = this.props.cardsData[\n      card.cardStack[card.cardStack.length - 1].jsonId\n    ];\n\n    if (\n      !card.faceup &&\n      (!!bottomCardData.back_link || !!bottomCardData.double_sided)\n    ) {\n      return (\n        process.env.PUBLIC_URL +\n        \"/images/cards/\" +\n        bottomCardData.octgn_id +\n        \".b.jpg\"\n      );\n    } else if (!card.faceup) {\n      return process.env.PUBLIC_URL + \"/images/standard/card_back.png\";\n    }\n\n    return (\n      process.env.PUBLIC_URL + \"/images/cards/\" + topCardData.octgn_id + \".jpg\"\n    );\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nconst defaultState: IGameState = {\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { initialState, IGameState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n    });\n  },\n});\n\nexport const { updateZoom, updatePosition } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport { fetchDecklistById } from \"./features/cards/cards.async-thunks\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  addCardStack,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  shuffleStack,\n  startCardMove,\n  togglePanMode,\n  toggleSelectCard,\n  unselectAllCards,\n  unselectCard,\n  toggleToken,\n} from \"./features/cards/cards.slice\";\nimport { getGame } from \"./features/game/game.selectors\";\nimport { updatePosition, updateZoom } from \"./features/game/game.slice\";\nimport { RootState } from \"./store/rootReducer\";\nimport { resetApp } from \"./store/global.actions\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n})(App);\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport cards from \"../features/cards/cards.slice\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport game from \"../features/game/game.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  cards,\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n});\n\nexport default function configureStore() {\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}