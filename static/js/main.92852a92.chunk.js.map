{"version":3,"sources":["../node_modules/peerjs/dist sync","constants/card-constants.ts","CardTokens.tsx","features/cards/cards.selectors.ts","CardTokensContainer.tsx","constants/app-constants.ts","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/cards/cards.actions.ts","constants/card-pack-mapping.ts","features/cards/cards.thunks.ts","store/global.actions.ts","TopLayer.tsx","CardStackCardSelector.tsx","CardStackCardSelectorContainer.tsx","Counter.tsx","PeerConnector.tsx","constants/card-missing-image-map.ts","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","features/counters/counters.actions.ts","features/counters/initialState.ts","features/counters/counters.slice.ts","features/counters/counters.selectors.ts","AppContainer.tsx","features/counters/counters.thunks.ts","serviceWorker.ts","store/rootReducer.ts","store/peer-js-redux-middleware.ts","store/configureStore.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","cardConstants","CardTokens","props","damageImg","threatImg","genericImg","unmounted","state","imagesLoaded","damage","threat","generic","Image","onload","setState","card","counterTokens","src","process","prevProps","prevState","this","damageX","x","naturalWidth","damageY","y","showDamage","damageToken","width","height","naturalHeight","fillPatternImage","damageText","text","fill","align","verticalAlign","fontSize","threatX","threatY","showThreat","threatToken","threatText","genericX","genericY","showGeneric","Component","getCards","cards","present","getCardMapById","createSelector","reduce","map","shouldShowPreview","previewCard","every","dragging","getPanMode","panMode","CardTokensContainer","connect","myPeerRef","uuidv4","HORIZONTAL_TYPE_CODES","stringArraysEqual","array1","array2","length","value","index","Card","imgs","stunnedImg","confusedImg","toughImg","touchTimer","initCardImages","imgUrls","forEach","img","imageLoaded","onerror","imageLoadFailed","imgUrl","renderUnanimatedCard","heightToUse","widthToUse","imgToUse","find","i","complete","undefined","scale","getScale","offset","native","rotation","exhausted","cornerRadius","stroke","dropTarget","strokeWidth","fillPatternRotation","shouldRenderImageHorizontal","typeCode","fillPatternScaleX","fillPatternScaleY","shadowColor","controlledBy","selectedColor","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","handleTouchStart","onTouchMove","handleTouchMove","onTouchEnd","handleTouchEnd","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","cardStackOffset","cardStack","numCardsInStack","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","stunnedToken","getTokenInSlot","confusedToken","confused","toughToken","tough","cardTokens","renderCardName","event","console","log","dx","target","dy","cancelBubble","clearTimeout","setTimeout","handleHover","handleHoverLeave","prevImgUrls","renderCard","cardWidth","cardHeight","textOffset","name","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","some","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","Menu","keepMounted","open","onClose","anchorReference","anchorPosition","top","position","left","MenuItem","label","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","onKeyDown","EncounterLoader","handleSelected","_event","loadCards","c","Autocomplete","options","encounterData","getOptionLabel","option","setData","style","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","Object","values","encounterCard","setCode","set_code","push","entries","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","getCenter","p1","p2","loadState","serializedState","localStorage","getItem","baseState","JSON","parse","err","error","localStorageState","StatusTokenType","CounterTokenType","initialState","ghostCards","dropTargetCard","addCardStackWithId","createAction","pullCardOutOfCardStackWithId","startCardMoveWithSplitStackId","replaceCardStack","CARD_PACK_REMAPPING","bkw","cap","drs","hlk","trors","twc","EXTRA_CARDS","doctor_strange","jsonId","ant","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSet","data","investigator_code","heroSetCode","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeck","extraCards","heroId","dataId","extraHeroCards","relatedEncounterDeck","encounterDeckId","relatedObligationDeck","obligationDeckId","shuffle","array","temporaryValue","randomIndex","returnArray","stringify","currentIndex","floor","random","resetApp","receiveRemoteGameState","getCardStackWithId","mutateCardWithId","ref","callback","cardToUpdate","unselectAllCardsReducer","ACTOR_REF","cardsSlice","createSlice","reducers","selectCard","unselectOtherCards","unselectCard","toggleSelectCard","exhaustCard","cardMove","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCards","concat","selectMultipleCards","ids","unselectAllCards","hoverCard","cardToPreview","faceup","hoverLeaveCard","togglePanMode","flipCards","reverse","resetCards","toggleToken","cardToToggle","statusTokens","tokenType","adjustCounterToken","delta","extraReducers","builder","addCase","cardToReplaceStack","newStack","cardJsonIds","cardStackToUse","cardStackId","newCardStack","newCard","assign","cardToStartMoving","splitTopCard","cardToMove","topCard","shift","splitCardId","actorRef","foreachSelectedAndControlledCard","fulfilled","heroCard","mainDeckStack","slots","cardDetails","Array","from","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","completed","containerStyle","className","children","CardStackCardSelector","cardsDataInStack","cardSelected","cardsDataEntities","CardStackCardSelectorContainer","Counter","handleDecrement","updateCounterValueBy","handleIncrement","pos","PeerConnector","inputRef","MISSING_CARD_IMAGE_MAP","App","stage","lastCenter","lastDist","handleCounterValueUpdate","updateCounterValue","handleCounterDrag","moveCounter","newPos","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","handleLoadEncounter","renderCardSearch","showCardSearch","cardSearchPosition","cardStackForSearching","clearCardSearch","handleCardSelectedFromCardStack","renderPeerConnector","showPeerConnector","peerConnectorPosition","clearPeerConnector","handlePeerConnect","addCardStack","peerId","connectToRemoteGame","pullCardOutOfCardStack","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","updatePosition","handleCounterContextMenu","counterId","menuItems","removeCounter","handleCardContextMenu","cardId","currentStatusTokens","shuffleStack","Stunned","Confused","Tough","Damage","Threat","Generic","handleCardClick","modifierKeyHeld","shiftKey","metaKey","ctrlKey","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","startCardMove","handleKeyPress","which","keyCode","redo","undo","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","button","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","touch1","touches","touch2","handleMultiTouch","handleMouseMove","isDragging","stopDrag","clientX","clientY","newCenter","dist","pointTo","stagePosition","addNewCounter","getCardType","getCardName","cardInQuestion","getCardCode","getImgUrls","urls","topCardData","bottomCardData","cardData","back_link","double_sided","generateLCGCDNImageUrl","missingImageOverride","checkMissingImageMap","unshift","Konva","hitOnDragEnabled","loadCardsData","staticCards","playerColors","tokens","movingCards","previewCards","showPreview","rawPos","previewPos","tabIndex","onKeyPress","Consumer","store","innerHeight","onMouseUp","onMouseMove","onWheel","counters","counter","codeToUse","groupCode","pack_code","substring","cardCode","toLocaleUpperCase","cardSuffix","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","SetData","card_set_type_code","getGame","game","getPlayerColors","gameSlice","setPlayerColor","color","addNewCounterWithId","countersSlice","getCurrentCounters","AppContainer","dispatch","payloadWithId","stackToShuffle","shuffledStack","ActionCreators","Boolean","location","hostname","match","rootReducer","combineReducers","undoable","limit","groupBy","groupByActionTypes","excludeAction","blacklistRemoteActions","setupConnection","conn","storeAPI","on","INITIAL_STATE_MSG","REMOTE_ACTION","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","activeCon","cgpPeer","Peer","debug","send","setPlayerColorAction","metadata","peerConnection","onconnectionstatechange","ev","connectionState","next","rtkConfigureStore","reducer","middleware","devTools","subscribe","throttle","blacklistStateKeys","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.92852a92.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 255;","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect, Text } from \"react-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\ninterface IProps {\n  x: number;\n  y: number;\n  card: ICardStack;\n}\n\ninterface IState {\n  imagesLoaded: {\n    damage: boolean;\n    threat: boolean;\n    generic: boolean;\n  };\n}\n\nclass CardTokens extends Component<IProps, IState> {\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imagesLoaded: {\n        damage: false,\n        threat: false,\n        generic: false,\n      },\n    };\n\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // DAMAGE\n    this.damageImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: true,\n            threat: this.state.imagesLoaded.threat,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.damage) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    this.threatImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: true,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.threat) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // GENERIC\n    this.genericImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: this.state.imagesLoaded.threat,\n            generic: true,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.generic) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.damage &&\n      !prevProps.card?.counterTokens.damage &&\n      !!this.props.card?.counterTokens.damage\n    ) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    if (\n      !this.state.imagesLoaded.threat &&\n      !prevProps.card?.counterTokens.threat &&\n      !!this.props.card?.counterTokens.threat\n    ) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.generic &&\n      !prevProps.card?.counterTokens.generic &&\n      !!this.props.card?.counterTokens.generic\n    ) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    const damageX = this.props.x - this.damageImg.naturalWidth / 2;\n    const damageY = this.props.y - cardConstants.CARD_HEIGHT / 2 + 20;\n    const showDamage =\n      this.state.imagesLoaded.damage && !!this.props.card.counterTokens.damage;\n\n    const damageToken = showDamage ? (\n      <Rect\n        key={`${this.props.card.id}-damageToken`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        fillPatternImage={this.damageImg}\n      ></Rect>\n    ) : null;\n\n    const damageText = showDamage ? (\n      <Text\n        key={`${this.props.card.id}-damageText`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        text={`${this.props.card.counterTokens.damage}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const threatX = this.props.x - this.threatImg.naturalWidth / 2;\n    const threatY = damageY + this.damageImg.naturalHeight + 5;\n    const showThreat =\n      this.state.imagesLoaded.threat && !!this.props.card.counterTokens.threat;\n\n    const threatToken = showThreat ? (\n      <Rect\n        key={`${this.props.card.id}-threatToken`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        fillPatternImage={this.threatImg}\n      ></Rect>\n    ) : null;\n\n    const threatText = showThreat ? (\n      <Text\n        key={`${this.props.card.id}-threatText`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        text={`${this.props.card.counterTokens.threat}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const genericX = this.props.x - this.threatImg.naturalWidth / 2;\n    const genericY = threatY + this.threatImg.naturalHeight + 5;\n    const showGeneric =\n      this.state.imagesLoaded.generic &&\n      !!this.props.card.counterTokens.generic;\n\n    const genericToken = showGeneric ? (\n      <Rect\n        key={`${this.props.card.id}-genericToken`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        fillPatternImage={this.genericImg}\n      ></Rect>\n    ) : null;\n\n    const genericText = showGeneric ? (\n      <Text\n        key={`${this.props.card.id}-genericText`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        text={`${this.props.card.counterTokens.generic}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    return [\n      damageToken,\n      damageText,\n      threatToken,\n      threatText,\n      genericToken,\n      genericText,\n    ];\n  }\n}\n\nexport default CardTokens;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.cards.present;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.present.panMode;\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const myPeerRef = uuidv4();\n\nexport type PlayerColor =\n  | \"red\"\n  | \"cyan\"\n  | \"green\"\n  | \"blue\"\n  | \"magnenta\"\n  | \"yellow\";\n\nexport const possibleColors: PlayerColor[] = [\n  \"red\",\n  \"cyan\",\n  \"green\",\n  \"blue\",\n  \"magnenta\",\n  \"yellow\",\n];\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect, Text } from \"react-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { myPeerRef, PlayerColor } from \"./constants/app-constants\";\nimport { cardConstants } from \"./constants/card-constants\";\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  name: string;\n  code: string;\n  selectedColor: PlayerColor;\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDoubleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrls: string[];\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  imageLoadFailed: number;\n  prevImgUrls: string[];\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nconst stringArraysEqual = (array1: string[], array2: string[]) => {\n  return (\n    array1.length === array2.length &&\n    array1.every((value, index) => {\n      return value === array2[index];\n    })\n  );\n};\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (!stringArraysEqual(props.imgUrls, state.prevImgUrls ?? [])) {\n      return {\n        imageLoaded: false,\n        imageLoadFailed: 0,\n        prevImgUrls: props.imgUrls,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private imgs: HTMLImageElement[] = [];\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private unmounted: boolean;\n  private touchTimer: any = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      imageLoadFailed: 0,\n      prevImgUrls: this.props.imgUrls,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.initCardImages(props);\n\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      !stringArraysEqual(prevProps.imgUrls, this.props.imgUrls)\n    ) {\n      this.setState({\n        imageLoaded: false,\n        imageLoadFailed: 0,\n      });\n      this.initCardImages(this.props);\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  private initCardImages = (props: IProps) => {\n    this.imgs = props.imgUrls.map(() => new Image());\n\n    // When the image loads, set a flag in the state\n    this.imgs.forEach(\n      (img) =>\n        (img.onload = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoaded: true,\n            });\n          }\n        })\n    );\n\n    this.imgs.forEach(\n      (img) =>\n        (img.onerror = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoadFailed: this.state.imageLoadFailed + 1,\n            });\n          }\n        })\n    );\n\n    props.imgUrls.forEach((imgUrl, index) => (this.imgs[index].src = imgUrl));\n  };\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.renderCard(this.state.imageLoaded);\n  }\n\n  private renderCard(imageLoaded: boolean) {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderUnanimatedCard(heightToUse, widthToUse, imageLoaded);\n  }\n\n  private renderUnanimatedCard = (\n    heightToUse: number,\n    widthToUse: number,\n    imageLoaded: boolean\n  ) => {\n    const imgToUse = imageLoaded\n      ? this.imgs.find((i) => i.complete && i.naturalHeight !== 0)\n      : undefined;\n\n    const scale = this.getScale(imgToUse, widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          !imageLoaded ||\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={imgToUse}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        fill={imageLoaded ? undefined : \"gray\"}\n        shadowColor={\n          !!this.props.controlledBy ? this.props.selectedColor : \"black\"\n        }\n        shadowBlur={this.props.dragging ? 20 : this.props.selected ? 10 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={\n          this.props.controlledBy === \"\" ||\n          this.props.controlledBy === myPeerRef\n        }\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEnd}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens =\n      this.props.dragging || this.props.isGhost ? null : (\n        <CardTokensContainer\n          key={`${this.props.id}-cardTokens`}\n          id={this.props.id}\n          x={this.props.x}\n          y={this.props.y}\n        ></CardTokensContainer>\n      );\n\n    const noImageCardNameText = this.renderCardName(\n      offset,\n      widthToUse,\n      heightToUse\n    );\n\n    return [\n      cardStack,\n      card,\n      noImageCardNameText,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private renderCardName(\n    offset: Vector2d,\n    cardWidth: number,\n    cardHeight: number\n  ) {\n    const textOffset = { x: offset.x - 10, y: offset.y - 20 };\n    const textItem =\n      this.state.imageLoadFailed === this.props.imgUrls.length ? (\n        <Text\n          key={`${this.props.id}-cardnametext`}\n          offset={textOffset}\n          x={this.props.x}\n          y={this.props.y}\n          width={cardWidth - 10}\n          height={cardHeight - 20}\n          fontSize={24}\n          text={`${this.props.name} ${this.props.code}`}\n          draggable={\n            this.props.controlledBy === \"\" ||\n            this.props.controlledBy === myPeerRef\n          }\n          onDragStart={this.handleDragStart}\n          onDragMove={this.handleDragMove}\n          onDragEnd={this.handleDragEnd}\n          onDblClick={this.handleDoubleClick}\n          onDblTap={this.handleDoubleClick}\n          onClick={this.handleClick}\n          onTap={this.handleClick}\n          onMouseDown={this.handleMouseDown}\n          onTouchStart={this.handleMouseDown}\n          onMouseOver={this.handleMouseOver}\n          onMouseOut={this.handleMouseOut}\n          onContextMenu={this.handleContextMenu}\n        ></Text>\n      ) : null;\n\n    return textItem;\n  }\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrls.some((i) => i.includes(\"standard\")) &&\n      this.props.imgUrls.some((i) => i.includes(\"_back\"))\n    );\n  }\n\n  private getScale(\n    img: HTMLImageElement | undefined,\n    widthToUse: number,\n    heightToUse: number\n  ) {\n    const width = !!img ? widthToUse / img.naturalWidth : widthToUse;\n\n    const widthHorizontal = !!img ? heightToUse / img.naturalWidth : widthToUse;\n\n    const height = !!img ? heightToUse / img.naturalHeight : heightToUse;\n\n    const heightHorizontal = !!img\n      ? widthToUse / img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    console.log(\"HANDLE CONTEXT MENU CARD\");\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id, event);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id, event);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleTouchStart = (event: KonvaEventObject<TouchEvent>) => {\n    event.cancelBubble = true;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.handleContextMenu(\n        (event as unknown) as KonvaEventObject<PointerEvent>\n      );\n    }, 750);\n  };\n\n  private handleTouchMove = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleTouchEnd = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <Menu\n          keepMounted\n          open={true}\n          onClose={this.props.hideContextMenu}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{\n            top: this.props.position.y + 8,\n            left: this.props.position.x + 8,\n          }}\n        >\n          {this.props.items.map((i, index) => (\n            <MenuItem\n              key={`contextMenu-item-${index}`}\n              onClick={this.handleContextItemClicked(i)}\n            >\n              {i.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      this.props.loadCards(value.cards.map((c) => c.code));\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n\nexport const getCenter = (p1: Vector2d, p2: Vector2d) => {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    const baseState = JSON.parse(serializedState || \"{}\");\n\n    return baseState.present ?? baseState;\n  } catch (err) {\n    console.error(\"problem parsing\");\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n    console.error(\"Error writing state to local storage\");\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { CounterTokenType, StatusTokenType } from \"./cards.slice\";\n\nexport interface ICardStack {\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n  counterTokens: {\n    [K in CounterTokenType]: number;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\n\n// Make sure initially, none of the cards are \"owned\" / \"selected\"\nif (!!localStorageState.cards) {\n  localStorageState.cards.forEach((c) => {\n    c.controlledBy = \"\";\n    c.selected = false;\n  });\n}\n\nconst defaultState: ICardsState = {\n  cards: [],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { fetchDecklistById } from \"./cards.thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport {\n  addCardStackWithId,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\nexport enum CounterTokenType {\n  Damage = \"damage\",\n  Threat = \"threat\",\n  Generic = \"generic\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  ref: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (\n    cardToUpdate &&\n    (cardToUpdate.controlledBy === \"\" || cardToUpdate.controlledBy === ref)\n  ) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedAndControlledCard = (\n  state: ICardsState,\n  actorRef: string,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => card.selected && card.controlledBy === actorRef)\n    .forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; unselectOtherCards: boolean }>\n> = (state, action) => {\n  if (action.payload.unselectOtherCards) {\n    unselectAllCardsReducer(state, action);\n  }\n\n  mutateCardWithId(\n    state,\n    action.payload.id,\n    (action as any).ACTOR_REF,\n    (card) => {\n      card.selected = true;\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  );\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = false;\n    card.controlledBy = \"\";\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = !card.selected;\n    if (!card.selected) {\n      card.controlledBy = \"\";\n    } else {\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === (action as any).ACTOR_REF &&\n        (card.id === action.payload || card.selected)\n    )\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload.id ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) =>\n        !(\n          card.id === action.payload ||\n          (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n        )\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (\n        card &&\n        (card.controlledBy === \"\" ||\n          card.controlledBy === (action as any).ACTOR_REF)\n      ) {\n        card.selected = true;\n        card.controlledBy = (action as any).ACTOR_REF;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState, PayloadAction<any>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === \"\" ||\n        card.controlledBy === (action as any).ACTOR_REF\n    )\n    .forEach((card) => {\n      card.selected = false;\n      card.controlledBy = \"\";\n    });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n\nconst adjustCounterTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: CounterTokenType; delta: number }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.counterTokens[action.payload.tokenType] +=\n      action.payload.delta;\n    if (cardToToggle.counterTokens[action.payload.tokenType] < 0) {\n      cardToToggle.counterTokens[action.payload.tokenType] = 0;\n    }\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    resetCards: resetCardsReducer,\n    toggleToken: toggleTokenReducer,\n    adjustCounterToken: adjustCounterTokenReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.cards = action.payload.cards.present.cards;\n      state.ghostCards = action.payload.cards.present.ghostCards;\n    });\n\n    builder.addCase(replaceCardStack, (state, action) => {\n      const cardToReplaceStack = state.cards.find(\n        (c) => c.id === action.payload.id\n      );\n      if (!!cardToReplaceStack) {\n        cardToReplaceStack.cardStack = action.payload.newStack;\n      }\n    });\n\n    builder.addCase(resetApp, (state) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCard = null;\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(addCardStackWithId, (state, action) => {\n      const newStack: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.id,\n        cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(newStack);\n    });\n\n    builder.addCase(pullCardOutOfCardStackWithId, (state, action) => {\n      const cardStackToUse = state.cards.find(\n        (c) => c.id === action.payload.cardStackId\n      );\n      if (!!cardStackToUse && cardStackToUse.cardStack.length > 1) {\n        const newCardStack: ICardDetails[] = [\n          { jsonId: action.payload.jsonId },\n        ];\n        const newCard = Object.assign({}, cardStackToUse, {\n          cardStack: newCardStack,\n        });\n        newCard.id = action.payload.id;\n        newCard.selected = true;\n        newCard.controlledBy = (action as any).ACTOR_REF;\n        newCard.x = newCard.x + cardConstants.CARD_WIDTH + 5;\n\n        cardStackToUse.cardStack = cardStackToUse.cardStack.filter(\n          (c) => c.jsonId !== action.payload.jsonId\n        );\n        cardStackToUse.selected = false;\n        cardStackToUse.controlledBy = \"\";\n\n        state.cards.push(newCard);\n      }\n    });\n\n    builder.addCase(startCardMoveWithSplitStackId, (state, action) => {\n      // first, if the card moving isn't currently selected, clear all _our_ selected cards\n      const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n      if (cardToStartMoving && !cardToStartMoving.selected) {\n        state.cards = state.cards.map((card) => {\n          if (\n            card.controlledBy === \"\" ||\n            card.controlledBy === (action as any).ACTOR_REF\n          ) {\n            card.selected = card.id === action.payload.id;\n            if (card.selected) {\n              card.controlledBy = (action as any).ACTOR_REF;\n            } else {\n              card.controlledBy = \"\";\n            }\n          }\n          return card;\n        });\n      }\n\n      // If we are splitting, make a new stack of cards\n      if (action.payload.splitTopCard) {\n        const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n        if (!cardToMove) {\n          throw new Error(\"Expected to find card\");\n        }\n\n        cardToMove.selected = false;\n        cardToMove.controlledBy = \"\";\n\n        const topCard = cardToMove.cardStack.shift();\n        const newCard = Object.assign({}, cardToMove, {\n          selected: true,\n          controlledBy: (action as any).ACTOR_REF,\n          dragging: true,\n          cardStack: [topCard],\n        });\n\n        cardToMove.id = action.payload.splitCardId;\n\n        state.cards.push(newCard);\n      }\n\n      // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n      state.ghostCards = [];\n\n      if (!action.payload.splitTopCard) {\n        foreachSelectedAndControlledCard(\n          state,\n          (action as any).ACTOR_REF,\n          (card) => {\n            card.dragging = true;\n            state.ghostCards.push(Object.assign({}, card));\n          }\n        );\n      }\n\n      //Finally, if we have a preview card, clear it\n      state.previewCard = null;\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.heroId,\n        cardStack: [\n          { jsonId: action.payload.data.investigator_code },\n          ...action.payload.extraHeroCards,\n        ],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.dataId,\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.encounterDeckId,\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.obligationDeckId,\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  resetCards,\n  toggleToken,\n  adjustCounterToken,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { ICardDetails } from \"./initialState\";\n\nexport interface AddCardStackWithIdPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n  id: string;\n}\n\nexport interface PullCardOutOfCardStackWithIdPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n  id: string;\n}\n\nexport interface StartCardMoveWithSplitStackIdPayload {\n  id: string;\n  splitTopCard: boolean;\n  splitCardId: string;\n}\n\nexport interface ReplaceCardStackPayload {\n  id: string;\n  newStack: ICardDetails[];\n}\n\nexport const addCardStackWithId = createAction<AddCardStackWithIdPayload>(\n  \"addCardStackWithId\"\n);\n\nexport const pullCardOutOfCardStackWithId = createAction<PullCardOutOfCardStackWithIdPayload>(\n  \"pullCardOutOfCardStackWithId\"\n);\n\nexport const startCardMoveWithSplitStackId = createAction<StartCardMoveWithSplitStackIdPayload>(\n  \"startCardMoveWithSplitStackId\"\n);\n\nexport const replaceCardStack = createAction<ReplaceCardStackPayload>(\n  \"replaceCardStack\"\n);\n","import { ICardDetails } from \"../features/cards/initialState\";\n\n// For some reason, the codes from marvelcdb and the images from cardgamedb can be off\nexport const CARD_PACK_REMAPPING: { [key: string]: string } = {\n  bkw: \"07\",\n  cap: \"04\",\n  drs: \"08\",\n  hlk: \"09\",\n  trors: \"10\",\n  twc: \"03\",\n};\n\n// export const EXTRA_CARDS: { [key: string]: { [key: string]: number } } = {\n//   doctor_strange: {\n//     \"09032\": 1,\n//     \"09033\": 1,\n//     \"09034\": 1,\n//     \"09035\": 1,\n//     \"09036\": 1,\n//   },\n//   ant: {\n//     \"12001c\": 1,\n//   },\n// };\n\nexport const EXTRA_CARDS: { [key: string]: ICardDetails[] } = {\n  doctor_strange: [\n    { jsonId: \"09032\" },\n    { jsonId: \"09033\" },\n    { jsonId: \"09034\" },\n    { jsonId: \"09035\" },\n    { jsonId: \"09036\" },\n  ],\n  ant: [{ jsonId: \"12001c\" }],\n};\n","import { Action, createAsyncThunk, ThunkAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  addCardStackWithId,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\nimport { ICardDetails } from \"./initialState\";\nimport { getCards } from \"./cards.selectors\";\nimport { EXTRA_CARDS } from \"../../constants/card-pack-mapping\";\n\ninterface AddCardStackPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n}\n\nexport interface PullCardOutOfCardStackPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n}\n\nexport interface StartCardMovePayload {\n  id: string;\n  splitTopCard: boolean;\n}\n\nexport const shuffleStack = (\n  id: string\n): ThunkAction<void, RootState, unknown, Action<string>> => (\n  dispatch,\n  getState\n) => {\n  const cardsState = getCards(getState());\n  const stackToShuffle = cardsState.cards.find((c) => c.id === id);\n  if (!!stackToShuffle) {\n    const shuffledStack = shuffle(stackToShuffle.cardStack);\n    dispatch(replaceCardStack({ id, newStack: shuffledStack }));\n  }\n};\n\nexport const addCardStack = (\n  payload: AddCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(addCardStackWithId(payloadWithId));\n};\n\nexport const pullCardOutOfCardStack = (\n  payload: PullCardOutOfCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(pullCardOutOfCardStackWithId(payloadWithId));\n};\n\nexport const startCardMove = (\n  payload: StartCardMovePayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    splitCardId: uuidv4(),\n  };\n  dispatch(startCardMoveWithSplitStackId(payloadWithId));\n};\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSet = heroCardsData[response.data.investigator_code];\n    const heroSetCode = heroSet.set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          value.set_code === `${heroSetCode}` &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    // get the encounter cards for this deck\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n\n    // check to see if there are any special extra cards for this hero\n    const extraCards = EXTRA_CARDS[heroSetCode ?? \"\"] ?? [];\n\n    // response.data.slots = { ...extraCards, ...response.data.slots };\n\n    return {\n      position: payload.position,\n      heroId: uuidv4(),\n      data: response.data,\n      dataId: uuidv4(),\n      extraHeroCards: extraCards,\n      relatedEncounterDeck: heroEncounterDeck,\n      encounterDeckId: uuidv4(),\n      relatedObligationDeck: heroObligationDeck,\n      obligationDeckId: uuidv4(),\n    };\n  }\n);\n\nconst shuffle = (array: ICardDetails[]): ICardDetails[] => {\n  const returnArray = JSON.parse(JSON.stringify(array));\n  var currentIndex = returnArray.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = returnArray[currentIndex];\n    returnArray[currentIndex] = returnArray[randomIndex];\n    returnArray[randomIndex] = temporaryValue;\n  }\n\n  return returnArray;\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"./rootReducer\";\n\nexport const resetApp = createAction(\"resetAction\");\n\nexport const receiveRemoteGameState = createAction<RootState>(\n  \"receiveRemoteGameState\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.handleClick}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    this.props.completed();\n  };\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { ICardStack } from \"./features/cards/initialState\";\ninterface IProps {\n  cardsDataEntities: ICardData;\n  card: ICardStack;\n  cardSelected: (jsonId: string) => void;\n}\n\nclass CardStackCardSelector extends Component<IProps> {\n  private cardsDataInStack: CardData[] = [];\n\n  constructor(props: IProps) {\n    super(props);\n    this.cardsDataInStack = props.card.cardStack.map((c) => {\n      return this.props.cardsDataEntities[c.jsonId];\n    });\n  }\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"cardstack-card-selector-combobox\"\n          options={this.cardsDataInStack}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Find Card...\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: CardData | null) => {\n    if (!!value && !!this.props.cardSelected) {\n      this.props.cardSelected(value.code);\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default CardStackCardSelector;\n","import { connect } from \"react-redux\";\nimport CardStackCardSelector from \"./CardStackCardSelector\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cardsDataEntities: getCardsDataEntities(state),\n  };\n};\n\nconst CardStackCardSelectorContainer = connect(\n  mapStateToProps,\n  {}\n)(CardStackCardSelector);\n\nexport default CardStackCardSelectorContainer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { Vector2d } from \"konva/types/types\";\nimport { Group, Rect, Text } from \"react-konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\n\ninterface IProps {\n  id: string;\n  pos: Vector2d;\n  value: number;\n  updateCounterValueBy: (amount: number) => void;\n  handleContextMenu: (event: KonvaEventObject<PointerEvent>) => void;\n  onDragEnd: (event: KonvaEventObject<DragEvent>) => void;\n}\n\nclass Counter extends Component<IProps> {\n  render() {\n    return (\n      <Group\n        x={this.props.pos.x}\n        y={this.props.pos.y}\n        draggable={true}\n        onContextMenu={this.props.handleContextMenu}\n        onDragEnd={this.props.onDragEnd}\n      >\n        <Rect cornerRadius={30} width={200} height={100} fill={\"red\"}></Rect>\n        <Text\n          width={200}\n          height={100}\n          fontSize={36}\n          text={`${this.props.value}`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n        ></Text>\n        <Text\n          x={10}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`-`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleDecrement}\n        ></Text>\n        <Text\n          x={140}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`+`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleIncrement}\n        ></Text>\n      </Group>\n    );\n  }\n\n  private handleDecrement = () => {\n    this.props.updateCounterValueBy(-1);\n  };\n\n  private handleIncrement = () => {\n    this.props.updateCounterValueBy(1);\n  };\n}\n\nexport default Counter;\n","import { Component } from \"react\";\nimport * as React from \"react\";\ninterface IProps {\n  connect: (peerId: string) => void;\n}\n\nclass PeerConnector extends Component<IProps> {\n  public inputRef: HTMLInputElement | null = null;\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <input\n          ref={(ref) => {\n            if (!ref) return;\n            this.inputRef = ref;\n          }}\n        ></input>\n        <button onClick={this.connect}>Connect</button>\n      </div>\n    );\n  }\n\n  private connect = (_event: any) => {\n    console.log(\"connecting with peer id \" + this.inputRef?.value);\n\n    this.props.connect(this.inputRef?.value || \"\");\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default PeerConnector;\n","export const MISSING_CARD_IMAGE_MAP: { [key: string]: string } = {\n  \"02001a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"8665869b-fae4-494e-91d1-1e8c308220c2\" +\n    \".jpg\",\n\n  \"02001b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"8665869b-fae4-494e-91d1-1e8c308220c2\" +\n    \".b.jpg\",\n\n  \"02002a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"cfd051be-4ade-4cf8-b575-4b673cfa9a92\" +\n    \".jpg\",\n\n  \"02002b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"cfd051be-4ade-4cf8-b575-4b673cfa9a92\" +\n    \".b.jpg\",\n\n  \"02003a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b16187a4-3f29-4a4b-8b66-6e8c7524c402\" +\n    \".jpg\",\n\n  \"02003b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b16187a4-3f29-4a4b-8b66-6e8c7524c402\" +\n    \".b.jpg\",\n\n  \"02004\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"b35084d9-3a2b-418c-b1a4-e4929de16a2c\" +\n    \".jpg\",\n\n  \"02005\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"1eae757a-25b2-4b29-a8e7-f43b12c531b0\" +\n    \".jpg\",\n\n  \"02006a\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"0a59161d-7db6-4328-9eeb-1906ce8715a5\" +\n    \".jpg\",\n\n  \"02006b\":\n    process.env.PUBLIC_URL +\n    \"/images/cards/\" +\n    \"0a59161d-7db6-4328-9eeb-1906ce8715a5\" +\n    \".b.jpg\",\n  //   \"11001\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_1.jpg\",\n  //   \"11002\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_2.jpg\",\n  //   \"11003\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_3.jpg\",\n  //   \"11028\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_28.jpg\",\n  //   \"11034\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_34.jpg\",\n};\n","import { ReactReduxContext, Provider } from \"react-redux\";\nimport * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport {\n  CounterTokenType,\n  StatusTokenType,\n} from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getCenter, getDistance } from \"./utilities/geo\";\nimport CardStackCardSelectorContainer from \"./CardStackCardSelectorContainer\";\nimport Counter from \"./Counter\";\nimport PeerConnector from \"./PeerConnector\";\nimport { myPeerRef, PlayerColor } from \"./constants/app-constants\";\nimport { ICounter } from \"./features/counters/initialState\";\nimport { MISSING_CARD_IMAGE_MAP } from \"./constants/card-missing-image-map\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { CARD_PACK_REMAPPING } from \"./constants/card-pack-mapping\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  playerColors: { [key: string]: PlayerColor };\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (payload: { id: string; unselectOtherCards: boolean }) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: (payload?: any) => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n  adjustCounterToken: (payload: {\n    id: string;\n    tokenType: CounterTokenType;\n    delta: number;\n  }) => void;\n  pullCardOutOfCardStack: (payload: {\n    cardStackId: string;\n    jsonId: string;\n    pos: Vector2d;\n  }) => void;\n  addNewCounter: (pos: Vector2d) => void;\n  updateCounterValue: (payload: { id: string; delta: number }) => void;\n  removeCounter: (id: string) => void;\n  moveCounter: (payload: { id: string; newPos: Vector2d }) => void;\n  connectToRemoteGame: (peerId: string) => void;\n  undo: () => void;\n  redo: () => void;\n  counters: ICounter[];\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n  showCardSearch: boolean;\n  cardSearchPosition: Vector2d | null;\n  cardStackForSearching: ICardStack | null;\n  showPeerConnector: boolean;\n  peerConnectorPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  private touchTimer: any = null;\n\n  private lastCenter: Vector2d | null = null;\n  private lastDist: number = 0;\n\n  constructor(props: IProps) {\n    super(props);\n\n    if (!!Konva) {\n      Konva.hitOnDragEnabled = true;\n    }\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            code={this.getCardCode(card)}\n            name={this.getCardName(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.handleCardClick(card)}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          name={this.getCardName(card)}\n          code={this.getCardCode(card)}\n          selectedColor={this.props.playerColors[card.controlledBy] ?? \"black\"}\n          controlledBy={card.controlledBy}\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrls={this.getImgUrls(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            name={this.getCardName(card)}\n            code={this.getCardCode(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                name={this.getCardName(card)}\n                code={this.getCardCode(card)}\n                selectedColor={\n                  this.props.playerColors[card.controlledBy] ?? \"black\"\n                }\n                controlledBy={card.controlledBy}\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrls={this.getImgUrls(card)}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div\n        className=\"play-area\"\n        tabIndex={1}\n        onKeyDown={this.handleKeyDown}\n        onKeyPress={this.handleKeyPress}\n      >\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        {this.renderCardSearch()}\n        {this.renderPeerConnector()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchStart={this.handleTouchStart}\n              onTouchMove={this.handleTouchMove}\n              onTouchEnd={this.handleTouchEnd}\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer>\n                  {this.props.counters.map((counter) => (\n                    <Counter\n                      key={`${counter.id}-counter`}\n                      id={counter.id}\n                      pos={counter.position}\n                      value={counter.value}\n                      updateCounterValueBy={this.handleCounterValueUpdate(\n                        counter.id\n                      )}\n                      handleContextMenu={this.handleCounterContextMenu(\n                        counter.id\n                      )}\n                      onDragEnd={this.handleCounterDrag(counter.id)}\n                    ></Counter>\n                  ))}\n                </Layer>\n                <Layer preventDefault={true}>\n                  {staticCards\n                    .concat(ghostCards)\n                    .concat(movingCards)\n                    .concat(previewCards)}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"black\"\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private handleCounterValueUpdate = (id: string) => (delta: number) => {\n    this.props.updateCounterValue({ id, delta });\n  };\n\n  private handleCounterDrag = (id: string) => (\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    this.props.moveCounter({\n      id,\n      newPos: {\n        x: event.target.x(),\n        y: event.target.y(),\n      },\n    });\n  };\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderCardSearch = () => {\n    if (!this.state.showCardSearch) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.cardSearchPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing card search position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.cardStackForSearching ? (\n      <TopLayer position={pos} completed={this.clearCardSearch}>\n        <CardStackCardSelectorContainer\n          card={this.state.cardStackForSearching}\n          cardSelected={this.handleCardSelectedFromCardStack(\n            this.state.cardStackForSearching.id,\n            pos\n          )}\n        />\n      </TopLayer>\n    ) : null;\n  };\n\n  private renderPeerConnector = () => {\n    if (!this.state.showPeerConnector) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.peerConnectorPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing peer connector position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.showPeerConnector ? (\n      <TopLayer position={pos} completed={this.clearPeerConnector}>\n        <PeerConnector connect={this.handlePeerConnect}></PeerConnector>\n      </TopLayer>\n    ) : null;\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private handlePeerConnect = (peerId: string) => {\n    this.clearPeerConnector();\n    this.props.connectToRemoteGame(peerId);\n  };\n\n  private handleCardSelectedFromCardStack = (\n    cardStackId: string,\n    pos: Vector2d\n  ) => (jsonId: string) => {\n    this.clearCardSearch();\n    this.props.pullCardOutOfCardStack({ cardStackId, jsonId, pos });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private clearCardSearch = () => {\n    this.setState({\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    });\n  };\n\n  private clearPeerConnector = () => {\n    this.setState({\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCounterContextMenu = (counterId: string) => (\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Remove\",\n        action: () => {\n          this.props.removeCounter(counterId);\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard({ id: cardId, unselectOtherCards: false });\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n\n      menuItems.push({\n        label: \"Find Specific Card\",\n        action: () => {\n          if (!!card) {\n            this.setState({\n              showCardSearch: true,\n              cardSearchPosition: this.stage?.getPointerPosition() ?? null,\n              cardStackForSearching: card,\n            });\n          }\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: -1,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardClick = (card: ICardStack) => (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n\n    if (card.selected && modifierKeyHeld) {\n      this.props.toggleSelectCard(cardId);\n    } else {\n      this.props.selectCard({\n        id: cardId,\n        unselectOtherCards: !modifierKeyHeld,\n      });\n    }\n  };\n\n  private handleSelectAndExhaust = (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n    this.props.selectCard({ id: cardId, unselectOtherCards: !modifierKeyHeld });\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter(\n        (c) => c.selected && c.controlledBy === myPeerRef\n      ).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (\n      event.shiftKey &&\n      (event.ctrlKey || event.metaKey) &&\n      event.key === \"z\"\n    ) {\n      this.props.redo();\n    } else if ((event.ctrlKey || event.metaKey) && event.key === \"z\") {\n      event.preventDefault();\n      this.props.undo();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: KonvaEventObject<MouseEvent>) => {\n    if (event.evt.button === 0) {\n      // Only do something if it's the primary button (not a right-click)\n      const pos = this.getRelativePositionFromTarget(this.stage);\n\n      this.setState({\n        selectStartPos: {\n          x: pos.x,\n          y: pos.y,\n        },\n        selecting: true,\n      });\n    }\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleTouchStart = (event: any) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.handleContextMenu(event);\n    }, 750);\n  };\n\n  private handleTouchMove = (e: any) => {\n    e.evt.preventDefault();\n\n    var touch1 = e.evt.touches[0];\n    var touch2 = e.evt.touches[1];\n\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    if (touch1 && touch2) {\n      this.handleMultiTouch(touch1, touch2);\n    } else if (!this.props.panMode) {\n      this.handleMouseMove(e);\n    }\n  };\n\n  private handleMultiTouch = (touch1: any, touch2: any) => {\n    // if the stage was under Konva's drag&drop\n    // we need to stop it, and implement our own pan logic with two pointers\n    if (this.stage?.isDragging()) {\n      this.stage.stopDrag();\n    }\n\n    const p1 = {\n      x: touch1.clientX,\n      y: touch1.clientY,\n    };\n    const p2 = {\n      x: touch2.clientX,\n      y: touch2.clientY,\n    };\n\n    if (!this.lastCenter) {\n      this.lastCenter = getCenter(p1, p2);\n      return;\n    }\n    const newCenter = getCenter(p1, p2);\n\n    const dist = getDistance(p1, p2);\n\n    if (!this.lastDist) {\n      this.lastDist = dist;\n    }\n\n    // local coordinates of center point\n    const pointTo = {\n      x:\n        (newCenter.x - this.props.gameState.stagePosition.x) /\n        this.props.gameState.stageZoom.x,\n      y:\n        (newCenter.y - this.props.gameState.stagePosition.y) /\n        this.props.gameState.stageZoom.y,\n    };\n\n    const scale = this.props.gameState.stageZoom.x * (dist / this.lastDist);\n    this.props.updateZoom({ x: scale, y: scale });\n\n    // calculate new position of the stage\n    const dx = newCenter.x - this.lastCenter.x;\n    const dy = newCenter.y - this.lastCenter.y;\n\n    const newPos = {\n      x: newCenter.x - pointTo.x * scale + dx,\n      y: newCenter.y - pointTo.y * scale + dy,\n    };\n\n    this.props.updatePosition(newPos);\n\n    this.lastDist = dist;\n    this.lastCenter = newCenter;\n  };\n\n  private handleTouchEnd = (event: any) => {\n    this.lastDist = 0;\n    this.lastCenter = null;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Create new counter\",\n        action: () => {\n          this.props.addNewCounter(\n            this.getRelativePositionFromTarget(this.stage) ?? { x: 0, y: 0 }\n          );\n        },\n      },\n      { label: \"Reset\", action: this.props.resetApp },\n      {\n        label: \"Connect to Remote Game\",\n        action: () => {\n          this.setState({\n            showPeerConnector: true,\n            peerConnectorPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getCardName = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return this.props.cardsData[cardInQuestion.jsonId]?.name ?? \"\";\n  };\n\n  private getCardCode = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return this.props.cardsData[cardInQuestion.jsonId]?.code ?? \"code missing\";\n  };\n\n  private checkMissingImageMap(code: string): string | null {\n    return MISSING_CARD_IMAGE_MAP[code] ?? null;\n  }\n\n  private generateLCGCDNImageUrl(card: CardData, faceup: boolean): string {\n    // get the first two digits\n\n    let codeToUse = card.code;\n\n    if (!faceup && !!card.back_link) {\n      codeToUse = card.back_link;\n    }\n\n    const groupCode =\n      CARD_PACK_REMAPPING[card.pack_code] ?? codeToUse.substring(0, 2);\n    let cardCode = codeToUse.substring(2);\n\n    //trim leading \"0\" chars\n    while (cardCode[0] === \"0\") {\n      cardCode = cardCode.substring(1);\n    }\n\n    cardCode = cardCode.toLocaleUpperCase();\n\n    let cardSuffix = \"\";\n\n    if (!!card.double_sided) {\n      cardSuffix = faceup ? \"A\" : \"B\";\n    }\n\n    return `https://lcgcdn.s3.amazonaws.com/mc/MC${groupCode}en_${cardCode}${cardSuffix}.jpg`;\n  }\n\n  private getImgUrls = (card: ICardStack): string[] => {\n    if (Object.keys(this.props.cardsData).length === 0) return [];\n\n    let urls: string[] = [];\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n    const bottomCardData = this.props.cardsData[\n      card.cardStack[card.cardStack.length - 1].jsonId\n    ];\n\n    let cardData: CardData | null = topCardData;\n\n    if (\n      !card.faceup &&\n      (!!bottomCardData.back_link || !!bottomCardData.double_sided)\n    ) {\n      cardData = bottomCardData;\n      urls = [\n        this.generateLCGCDNImageUrl(bottomCardData, card.faceup),\n        // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.png`,\n        // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.jpg`,\n        // process.env.PUBLIC_URL +\n        //   \"/images/cards/\" +\n        //   bottomCardData.octgn_id +\n        //   \".b.jpg\",\n      ];\n    } else if (!card.faceup) {\n      cardData = null;\n      urls = [process.env.PUBLIC_URL + \"/images/standard/card_back.png\"];\n    }\n    if (urls.length === 0) {\n      urls = [\n        this.generateLCGCDNImageUrl(topCardData, card.faceup),\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.png`,\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.jpg`,\n        // process.env.PUBLIC_URL +\n        //   \"/images/cards/\" +\n        //   topCardData.octgn_id +\n        //   \".jpg\",\n      ];\n    }\n\n    const missingImageOverride = !!cardData\n      ? this.checkMissingImageMap(\n          card.faceup ? cardData.code : cardData.back_link ?? \"\"\n        )\n      : null;\n\n    if (!!missingImageOverride) {\n      urls.unshift(missingImageOverride);\n    }\n\n    return urls;\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n\nexport const getPlayerColors = createSelector(getGame, (game) => {\n  return game.playerColors;\n});\n","import { Vector2d } from \"konva/types/types\";\nimport { myPeerRef, PlayerColor } from \"../../constants/app-constants\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n  playerColors: { [key: string]: PlayerColor };\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nlocalStorageState.playerColors = {};\nlocalStorageState.playerColors[myPeerRef] = \"red\";\n\nconst defaultState: IGameState = {\n  playerColors: {},\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { PlayerColor } from \"../../constants/app-constants\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { IGameState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\nconst connectToRemoteGameReducer: CaseReducer<\n  IGameState,\n  PayloadAction<string>\n> = (state, action) => {};\n\nconst setPlayerColorReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ ref: string; color: PlayerColor }>\n> = (state, action) => {\n  state.playerColors[action.payload.ref] = action.payload.color;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n    connectToRemoteGame: connectToRemoteGameReducer,\n    setPlayerColor: setPlayerColorReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n    });\n  },\n});\n\nexport const {\n  updateZoom,\n  updatePosition,\n  connectToRemoteGame,\n  setPlayerColor,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\n\nexport interface AddNewCounterWithIdPayload {\n  pos: Vector2d;\n  id: string;\n}\n\nexport const addNewCounterWithId = createAction<AddNewCounterWithIdPayload>(\n  \"addNewCounterWithId\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface ICountersState {\n  counters: ICounter[];\n}\n\nexport interface ICounter {\n  id: string;\n  position: Vector2d;\n  value: number;\n}\n\nconst localStorageState: ICountersState = loadState(\"counters\");\n\nconst defaultState: ICountersState = {\n  counters: [],\n};\nexport const initialState: ICountersState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport { addNewCounterWithId } from \"./counters.actions\";\nimport { ICountersState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateCounterValueReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; delta: number }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.value += action.payload.delta;\n    if (counter.value < 0) {\n      counter.value = 0;\n    }\n  }\n};\n\nconst removeCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<string>\n> = (state, action) => {\n  state.counters = state.counters.filter((c) => c.id !== action.payload);\n};\n\nconst moveCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; newPos: Vector2d }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.position = {\n      x: action.payload.newPos.x,\n      y: action.payload.newPos.y,\n    };\n  }\n};\n\n// slice\nconst countersSlice = createSlice({\n  name: \"counters\",\n  initialState: initialState,\n  reducers: {\n    updateCounterValue: updateCounterValueReducer,\n    removeCounter: removeCounterReducer,\n    moveCounter: moveCounterReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.counters = action.payload.counters.present.counters;\n    });\n\n    builder.addCase(resetApp, (state, action) => {\n      state.counters = [];\n    });\n\n    builder.addCase(addNewCounterWithId, (state, action) => {\n      state.counters.push({\n        id: action.payload.id,\n        position: action.payload.pos,\n        value: 0,\n      });\n    });\n  },\n});\n\nexport const {\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n} = countersSlice.actions;\n\nexport default countersSlice.reducer;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCounters = (state: RootState) => state.counters.present;\n\nexport const getCurrentCounters = createSelector(getCounters, (counters) => {\n  return counters.counters;\n});\n","import { connect } from \"react-redux\";\nimport { ActionCreators } from \"redux-undo\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  adjustCounterToken,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  togglePanMode,\n  toggleSelectCard,\n  toggleToken,\n  unselectAllCards,\n  unselectCard,\n} from \"./features/cards/cards.slice\";\nimport {\n  addCardStack,\n  fetchDecklistById,\n  pullCardOutOfCardStack,\n  startCardMove,\n  shuffleStack,\n} from \"./features/cards/cards.thunks\";\nimport { getGame, getPlayerColors } from \"./features/game/game.selectors\";\nimport {\n  connectToRemoteGame,\n  updatePosition,\n  updateZoom,\n} from \"./features/game/game.slice\";\n\nimport {\n  moveCounter,\n  removeCounter,\n  updateCounterValue,\n} from \"./features/counters/counters.slice\";\nimport { addNewCounter } from \"./features/counters/counters.thunks\";\nimport { resetApp } from \"./store/global.actions\";\nimport { RootState } from \"./store/rootReducer\";\nimport { getCurrentCounters } from \"./features/counters/counters.selectors\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    playerColors: getPlayerColors(state),\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n    counters: getCurrentCounters(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n  connectToRemoteGame,\n  undo: ActionCreators.undo,\n  redo: ActionCreators.redo,\n})(App);\n\nexport default AppContainer;\n","import { Vector2d } from \"konva/types/types\";\nimport { Action } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { addNewCounterWithId } from \"./counters.actions\";\n\nexport const addNewCounter = (\n  pos: Vector2d\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    pos,\n    id: uuidv4(),\n  };\n  dispatch(addNewCounterWithId(payloadWithId));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport undoable, { excludeAction, groupByActionTypes } from \"redux-undo\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport { startCardMoveWithSplitStackId } from \"../features/cards/cards.actions\";\nimport cards, {\n  cardMove,\n  hoverCard,\n  hoverLeaveCard,\n} from \"../features/cards/cards.slice\";\nimport game from \"../features/game/game.slice\";\n\nimport counters, { moveCounter } from \"../features/counters/counters.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  counters: undoable(counters, {\n    limit: 20,\n    groupBy: groupByActionTypes([moveCounter.type]),\n  }),\n  cards: undoable(cards, {\n    limit: 20,\n    filter: excludeAction([\n      startCardMoveWithSplitStackId.type,\n      cardMove.type,\n      hoverCard.type,\n      hoverLeaveCard.type,\n    ]),\n  }),\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import Peer from \"peerjs\";\nimport { myPeerRef } from \"../constants/app-constants\";\nimport {\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n} from \"../features/cards/cards.slice\";\nimport {\n  connectToRemoteGame,\n  setPlayerColor,\n  updatePosition,\n  updateZoom,\n} from \"../features/game/game.slice\";\nimport { receiveRemoteGameState } from \"./global.actions\";\n\nconst DEBUG = false;\n\nconst blacklistRemoteActions = {\n  [connectToRemoteGame.type]: true,\n  [updatePosition.type]: true,\n  [updateZoom.type]: true,\n  [hoverCard.type]: true,\n  [hoverLeaveCard.type]: true,\n  [togglePanMode.type]: true,\n  [receiveRemoteGameState.type]: true,\n};\n\nconst log = (...args: any[]) => {\n  if (DEBUG) {\n    console.log(args[0], args[1]);\n  }\n};\n\nconst setupConnection = (conn: any, storeAPI: any) => {\n  conn.on(\"data\", (data: any) => {\n    if (!data.INITIAL_STATE_MSG) {\n      log(\"recieved remote action\", data);\n      data.REMOTE_ACTION = true;\n      log(\"dispatching remote action\", data);\n      storeAPI.dispatch(data);\n    } else {\n      console.log(\"going to replace (most of) state with\", data.state);\n      setTimeout(() => {\n        storeAPI.dispatch(receiveRemoteGameState(data.state));\n      }, 0);\n    }\n  });\n};\n\nexport const peerJSMiddleware = (storeAPI: any) => {\n  const cgpPeer = new Peer(undefined, { debug: 0 });\n  let activeCon: Peer.DataConnection;\n  cgpPeer.on(\"error\", (err) => {\n    console.error(\"*****************Server error\");\n    console.error(err);\n  });\n\n  cgpPeer.on(\"disconnected\", () => {\n    console.log(\"****Peer server connection disconnected\");\n  });\n\n  cgpPeer.on(\"open\", (id) => {\n    console.log(\"My peer ID is: \" + id);\n  });\n\n  cgpPeer.on(\"connection\", (conn) => {\n    console.log(\"Connection received!\");\n    activeCon = conn;\n    setupConnection(activeCon, storeAPI);\n\n    activeCon.on(\"open\", () => {\n      console.log(\"connection ready for data\");\n      log(\"going to send initial state\", storeAPI.getState());\n      activeCon.send({\n        INITIAL_STATE_MSG: true,\n        state: storeAPI.getState(),\n      });\n      // TODO: more complicated logic to handle multiple connections. Right now\n      // this just changes the connecting client to blue\n      const setPlayerColorAction = setPlayerColor({\n        ref: activeCon.metadata.ref,\n        color: \"blue\",\n      });\n      activeCon.send(setPlayerColorAction);\n      activeCon.send(\n        setPlayerColor({\n          ref: myPeerRef,\n          color: \"red\",\n        })\n      );\n      storeAPI.dispatch(setPlayerColorAction);\n    });\n\n    activeCon.on(\"error\", (err) => {\n      console.error(\"****************Connection error:\", err);\n    });\n\n    activeCon.on(\"close\", () => {\n      console.log(\"******connection closed for ref \" + activeCon.metadata.ref);\n    });\n\n    activeCon.peerConnection.onconnectionstatechange = (ev: Event) => {\n      console.log(`connection state changed`);\n      console.log(ev);\n      console.log(activeCon.peerConnection.connectionState);\n      if (\n        activeCon.peerConnection.connectionState === \"closed\" ||\n        activeCon.peerConnection.connectionState === \"disconnected\"\n      ) {\n        console.log(\n          \"CLEARING CLIENT OWNED CARDS for \" + activeCon.metadata.ref\n        );\n      }\n    };\n  });\n  return (next: any) => (action: any) => {\n    log(\"received local action\", action);\n\n    // If this isn't a REMOTE action, add our ref onto it\n    if (!action.REMOTE_ACTION) {\n      action.ACTOR_REF = myPeerRef;\n    } else if (!action.ACTOR_REF) {\n      console.error(`Received a REMOTE action without an ACTOR_REF:`);\n      console.log(action);\n    }\n\n    if (action.type === connectToRemoteGame.type) {\n      console.log(\"going to connect to peer \" + action.payload);\n      activeCon = cgpPeer.connect(action.payload, {\n        metadata: { ref: myPeerRef },\n      });\n      setupConnection(activeCon, storeAPI);\n    }\n\n    if (\n      !action.REMOTE_ACTION &&\n      !!activeCon &&\n      !blacklistRemoteActions[action.type]\n    ) {\n      log(\"going to send action to peer!\");\n      activeCon.send(action);\n    }\n\n    return next(action);\n  };\n};\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\nimport { peerJSMiddleware } from \"./peer-js-redux-middleware\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n}).concat(peerJSMiddleware);\n\nexport default function configureStore() {\n  console.log(\"configuring store. NODE_ENV is \" + process.env.NODE_ENV);\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}