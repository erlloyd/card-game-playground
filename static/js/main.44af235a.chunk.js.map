{"version":3,"sources":["constants/card-constants.ts","Card.tsx","App.tsx","features/cards/cards.slice.ts","features/cards/initialState.ts","features/cards/cards.selectors.ts","AppContainer.tsx","serviceWorker.ts","store/rootReducer.ts","store/configureStore.ts","index.tsx"],"names":["cardConstants","Card","props","img","unmounted","handleDoubleClick","id","handleDragStart","event","handleDragMove","dx","target","x","dy","y","handleDragEnd","dragging","handleClick","cancelBubble","handleMouseDown","handleMouseOver","handleHover","handleMouseOut","handleHoverLeave","state","imageLoaded","prevImgUrl","imgUrl","Image","onload","setState","src","prevProps","prevState","this","heightToUse","height","widthToUse","width","native","to","rotation","exhausted","animatedProps","Rect","cornerRadius","offset","stroke","dropTarget","strokeWidth","fillPatternImage","fillPatternScaleX","naturalWidth","fillPatternScaleY","naturalHeight","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","onDragMove","onDragEnd","onDblClick","onDblTap","onClick","onTap","onMouseDown","onTouchStart","onMouseOver","onMouseOut","Component","App","stage","handleKeyPress","which","keyCode","togglePanMode","getRawPreviewCardPosition","pointerPos","getPointerPosition","screenMidPointX","window","innerWidth","getRelativePositionFromTarget","posParam","transform","getAbsoluteTransform","copy","invert","pos","point","currentTarget","selectStartPos","selecting","getSelectionRectInfo","selectRect","Math","abs","handleMouseUp","drewASelectionRect","selectedCards","cards","reduce","currSelectedCards","card","Intersects","push","selectMultipleCards","ids","map","handleMouseMove","staticCards","filter","key","fill","dropTargetCard","startCardMove","cardMove","endCardMove","exhaustCard","selectCard","hoverCard","hoverLeaveCard","cardsData","length","process","ghostCards","movingCards","previewCards","showPreview","previewCard","rawPos","previewPos","tabIndex","onKeyPress","ref","innerHeight","unselectAllCards","panMode","onMouseUp","onMouseMove","onTouchMove","preventDefault","concat","getCardWithId","find","cardsSlice","createSlice","name","initialState","reducers","action","callback","cardToUpdate","mutateCardWithId","payload","forEach","cardToStartMoving","foreachSelectedCard","Object","assign","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","deltaX","deltaY","distance","sqrt","sort","c1","c2","movedCard","splice","indexOf","actions","getCards","shouldShowPreview","createSelector","every","getPanMode","AppContainer","connect","CoreSet","slice","loadData","Boolean","location","hostname","match","rootReducer","combineReducers","customizedMiddleware","getDefaultMiddleware","thunk","store","rtkConfigureStore","reducer","middleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44af235a.chunk.js","sourcesContent":["export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","// tslint:disable:no-console\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { animated, Spring } from 'react-spring/renderprops-konva';\nimport { cardConstants } from './constants/card-constants';\n\ninterface IProps {\n  dragging: boolean,\n  exhausted: boolean,\n  fill: string,\n  handleClick?: (id: number) => void,\n  handleDoubleClick?: (id: number) => void,\n  handleDragStart?: (id: number) => void,\n  handleDragMove?: (info: {id: number, dx: number, dy: number}) => void,\n  handleDragEnd?: (id: number) => void,\n  handleHover?: (id: number) => void,\n  handleHoverLeave?: (id: number) => void,\n  id: number,\n  selected: boolean,\n  dropTarget?: boolean,\n  x: number,\n  y: number,\n  width?: number,\n  height?: number,\n  imgUrl: string,\n  isGhost?: boolean,\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  prevImgUrl: string;\n}\n\nclass Card extends Component<IProps, IState> {\n\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (props.imgUrl !== state.prevImgUrl) {\n      return {\n        imageLoaded: false,\n        prevImgUrl: props.imgUrl,\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private img: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props)\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      prevImgUrl: this.props.imgUrl,\n    }\n\n    this.img = new Image();\n\n    // When the image loads, set a flag in the state\n    this.img.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imageLoaded: true,\n        });\n      }\n    };\n\n    if (props.imgUrl) {\n      this.img.src = props.imgUrl;\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (!this.state.imageLoaded && this.props.imgUrl && this.props.imgUrl !== this.img.src) {\n      this.img.src = this.props.imgUrl;\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return (\n      this.state.imageLoaded ?\n      <Spring\n        native={true}\n        to={{\n            rotation: this.props.exhausted ? 90 : 0\n        }}>\n        {(animatedProps: any) => (\n            <animated.Rect\n            {...animatedProps}\n            cornerRadius={9}\n            x={this.props.x}\n            y={this.props.y}\n            width={widthToUse}\n            height={heightToUse}\n            offset={{\n                x: widthToUse / 2,\n                y: heightToUse / 2,\n            }}\n            stroke={this.props.dropTarget ? 'blue' : ''}\n            strokeWidth= {this.props.dropTarget ? 2 : 0}\n            fillPatternImage={this.img}\n            fillPatternScaleX={this.state.imageLoaded ? widthToUse / this.img.naturalWidth : widthToUse}\n            fillPatternScaleY={this.state.imageLoaded ? heightToUse / this.img.naturalHeight : heightToUse}\n            shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n            opacity={this.props.isGhost ? 0.5 : 1}\n            draggable={true}\n            onDragStart={this.handleDragStart}\n            onDragMove={this.handleDragMove}\n            onDragEnd={this.handleDragEnd}\n            onDblClick={this.handleDoubleClick}\n            onDblTap={this.handleDoubleClick}\n            onClick={this.handleClick}\n            onTap={this.handleClick}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleMouseDown}\n            onMouseOver={this.handleMouseOver}\n            onMouseOut={this.handleMouseOut}\n            />\n        )}\n      </Spring> : null\n    );\n  }\n\n  private handleDoubleClick = () => {\n    if(this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id);\n    }\n  }\n\n  private handleDragStart = (event: any) => {\n    if(this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id);\n    }\n  }\n\n  private handleDragMove = (event: any) => {\n    if(this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y\n      });\n    }\n  }\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  }\n\n  private handleClick = (event: any) => {\n    if(this.props.handleClick) {\n      this.props.handleClick(this.props.id);\n      event.cancelBubble = true;\n    }\n  }\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  }\n\n  private handleMouseOver = () => {\n    if(this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  }\n\n  private handleMouseOut = () => {\n    if(this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  }\n};\n\nexport default Card;","import * as Intersects from 'intersects';\nimport { Component } from 'react';\nimport * as React from 'react';\nimport { Layer, Rect, Stage } from 'react-konva';\nimport Konva from 'konva';\nimport { cardConstants } from './constants/card-constants';\nimport './App.css';\nimport Card from './Card';\nimport { CardData } from './external-api/marvel-card-data';\nimport { ICard, ICardsState } from './features/cards/initialState';\nimport { Vector2d } from 'konva/types/types';\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: CardData[];\n  showPreview: boolean;\n  panMode: boolean;\n  cardMove: (info: {id: number, dx: number, dy: number}) => void;\n  endCardMove: (id: number) => void;\n  exhaustCard: (id: number) => void;\n  selectCard: (id: number) => void;\n  startCardMove: (id: number) => void;\n  unselectAllCards: () => void;\n  selectMultipleCards: (cards: {ids: number[]}) => void;\n  hoverCard: (id: number) => void;\n  hoverLeaveCard: (id: number) => void;\n  togglePanMode: () => void;\n  loadData: any;\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  },\n  selectStartPos: {\n    x: number;\n    y: number;\n  },\n  selecting: boolean;\n}\nclass App extends Component<IProps, IState> {\n\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props)\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n    }\n  }\n\n  public componentDidMount() {\n    // this.props.loadData();\n  }\n\n  public render() {\n    \n    const staticCards = this.props.cards.cards\n    .filter(card => !card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.props.startCardMove}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            imgUrl={this.props.cardsData.length > 0 ? process.env.PUBLIC_URL + '/images/cards/18ae183c-de26-4369-8a41-424d58f01631.jpg'/*this.props.cardsData[card.id].Front.ImagePath*/  : ''}\n          />\n      )}\n    );\n\n    const ghostCards = this.props.cards.ghostCards\n    .map(\n      card => {\n        return (\n          <Card key={`ghost${card.id}`}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.props.cardsData.length > 0 ? process.env.PUBLIC_URL + '/images/cards/18ae183c-de26-4369-8a41-424d58f01631.jpg'/*this.props.cardsData[card.id].Front.ImagePath*/  : ''}\n            isGhost={true}\n          />\n        );\n      }\n    )\n\n    const movingCards = this.props.cards.cards\n    .filter(card => card.dragging)\n    .map(\n      card => {\n        return (\n        <Card\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.props.startCardMove}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.props.exhaustCard}\n            handleClick={this.props.selectCard}\n            imgUrl={this.props.cardsData.length > 0 ? process.env.PUBLIC_URL + '/images/cards/18ae183c-de26-4369-8a41-424d58f01631.jpg'/*this.props.cardsData[card.id].Front.ImagePath*/  : ''}\n          />\n      )}\n    );\n\n    const previewCards = this.props.cards.cards\n    .filter(card => !this.state.selecting && this.props.showPreview && !!this.props.cards.previewCard && (card.id === this.props.cards.previewCard.id))\n    .map(\n      card => {\n        \n        const rawPos = this.getRawPreviewCardPosition();\n        const previewPos = this.getRelativePositionFromTarget(this.stage, rawPos);\n        return (\n        <Card\n            key={`preview${card.id}`}\n            id={card.id}\n            x={previewPos.x}\n            y={previewPos.y}\n            exhausted={false}\n            fill={card.fill}\n            selected={false}\n            dragging={false}\n            imgUrl={this.props.cardsData.length > 0 ? process.env.PUBLIC_URL + '/images/cards/18ae183c-de26-4369-8a41-424d58f01631.jpg'/*this.props.cardsData[card.id].Front.ImagePath*/  : ''}\n            height={cardConstants.CARD_PREVIEW_HEIGHT}\n            width={cardConstants.CARD_PREVIEW_WIDTH}\n          />\n      )}\n    );\n\n    return (\n      <div tabIndex={1} onKeyPress={this.handleKeyPress}>\n        <Stage\n          ref={(ref) => {this.stage = ref;}}\n          width={window.innerWidth}\n          height={window.innerHeight}\n          onClick={this.props.unselectAllCards}\n          onTap={this.props.unselectAllCards}\n          onMouseDown={this.props.panMode ? () => {} : this.handleMouseDown}\n          onMouseUp={this.props.panMode ? () => {} : this.handleMouseUp}\n          onMouseMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          onTouchMove={this.props.panMode ? () => {} : this.handleMouseMove}\n          draggable={this.props.panMode}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragStart={() => {console.log('STAGE onDragStart')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragMove={() => {console.log('STAGE onDragMove')}}\n          // // tslint:disable-next-line:jsx-no-lambda no-console\n          // onDragEnd={() => {console.log('STAGE onDragEnd')}}\n          preventDefault={true}>\n\n          <Layer\n            preventDefault={true}>\n            {staticCards.concat(ghostCards).concat(movingCards).concat(previewCards)}\n          </Layer>\n          <Layer>\n            <Rect\n              x={this.state.selectStartPos.x}\n              y={this.state.selectStartPos.y}\n              width={this.state.selectRect.width}\n              height={this.state.selectRect.height}\n              stroke=\"black\"/>\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n\n  private handleKeyPress = (event: any) => {\n    const code = event.which || event.keyCode;\n    if(code === 115) {\n      this.props.togglePanMode();\n    }\n  }\n \n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX ? {\n      x: window.innerWidth - (cardConstants.CARD_PREVIEW_WIDTH / 2),\n      y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n    } : \n    {\n      x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n      y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n    };\n  }\n\n  private getRelativePositionFromTarget= (target: any, posParam?: Vector2d) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos);\n  }\n\n  private handleMouseDown = (event: any) => {\n\n    const pos = this.getRelativePositionFromTarget(event.currentTarget);\n\n    this.setState({\n      selectStartPos: {\n        x: pos.x,\n        y: pos.y,\n      },\n      selecting: true,\n    });\n  }\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x: selectRect.width < 0 ? selectStartPos.x + selectRect.width : selectStartPos.x,\n      y: selectRect.height < 0 ? selectStartPos.y + selectRect.height : selectStartPos.y,\n    };\n  }\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICard[]>( \n        (currSelectedCards, card) =>{\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50, \n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT)\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },[]);\n\n      this.props.selectMultipleCards({ ids: selectedCards.map(card => card.id) });\n    }\n    \n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0\n      },\n      selecting: false,\n    });\n  }\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      })\n    }\n    event.cancelBubble = true;\n  }\n}\n\nexport default App;","import { createSlice, PayloadAction, CaseReducer } from '@reduxjs/toolkit'\nimport { initialState, ICardsState, ICard } from './initialState';\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\n// Helper methods\nconst getCardWithId = (state: ICardsState, id: number ): ICard | undefined => {\n  return state.cards.find( (card) => card.id === id);\n}\n\nconst mutateCardWithId = (state: ICardsState, id: number, callback: (card: ICard) => void ) => {\n  const cardToUpdate = getCardWithId(state, id);\n  if (cardToUpdate) { callback(cardToUpdate) }\n}\n\nconst foreachSelectedCard = (state: ICardsState, callback: (card: ICard) => void ) => {\n  state.cards.filter(card => card.selected).forEach(card => callback(card));\n}\n\nconst foreachUnselectedCard = (state: ICardsState, callback: (card: ICard) => void ) => {\n  state.cards.filter(card => !card.selected).forEach(card => callback(card));\n}\n\n// Reducers\nconst selectCardReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  mutateCardWithId(state, action.payload, (card) => {\n    card.selected = !card.selected; \n  });\n}\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  state.cards\n    .filter( card => card.id === action.payload || card.selected)\n    .forEach( (card) => {\n      card.exhausted = !card.exhausted;\n    })\n}\n\nconst startCardMoveReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  // first, if the card moving isn't currently selected, clear all selected cards\n  const cardToStartMoving = getCardWithId(state, action.payload);\n  if (cardToStartMoving && !cardToStartMoving.selected) {\n    state.cards = state.cards.map(card => {\n      card.selected = card.id === action.payload;\n      return card;\n    });\n  }\n\n  // Now all selected cards should be put into ghost cards\n  state.ghostCards = [];\n\n  foreachSelectedCard(state, card => { \n    card.dragging = true;\n    state.ghostCards.push(Object.assign({}, card));\n  });\n}\n\nconst cardMoveReducer: CaseReducer<ICardsState, PayloadAction<{id: number, dx: number, dy: number}>> = (state, action) => {\n  const movedCards: ICard[] = [];\n  \n  let primaryCard: ICard;\n\n  state.cards\n  .filter((card) => card.id === action.payload.id || card.selected)\n  .forEach( (card) => {\n    if(card.id === action.payload.id) {\n      primaryCard = card;\n    }\n\n    card.x += action.payload.dx;\n    card.y += action.payload.dy;\n\n    movedCards.push(card);\n  });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: {distance: number, card: ICard}[] = [];\n  foreachUnselectedCard(state, card => {\n    const deltaX = card.x - primaryCard.x;\n    const deltaY = card.y - primaryCard.y;\n    const distance = Math.sqrt(deltaX*deltaX + deltaY*deltaY);\n    if(distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card\n      });\n    }\n  });\n\n  state.dropTargetCard = possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ?? null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time \n  // or something, and the array could be a selector\n  movedCards.forEach(movedCard => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n}\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  state.cards\n  .filter((card) => card.id === action.payload || card.selected)\n  .forEach((card) =>{\n    card.dragging = false;\n\n    if (!!state.dropTargetCard) {\n      card.x = state.dropTargetCard.x;\n      card.y = state.dropTargetCard.y;\n    }\n  });\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n}\n\nconst selectMultipleCardsReducer: CaseReducer<ICardsState, PayloadAction<{ ids: number[]}>> = (state, action) => {\n  action.payload.ids\n  .map( id => state.cards.find(card => card.id === id))\n  .forEach( card => {\n    if (card) {\n      card.selected = true;\n    }\n  });\n}\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards.forEach( (card) => {\n    card.selected = false;\n  });\n}\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<number>> = (state, action) => {\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    }\n  } else if ( action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n}\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n}\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n}\n// Selectors\n\n\n// slice\n\nconst cardsSlice = createSlice({\n  name: 'cards',\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    startCardMove: startCardMoveReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n  },\n});\n\nexport const { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","export interface ICard {\n  dragging: boolean;\n  exhausted: boolean;\n  fill: string;\n  id: number;\n  selected: boolean;\n  x: number;\n  y: number;\n}\n\nexport interface IPreviewCard {\n  id: number;\n}\n\nexport interface ICardsState {\n  cards: ICard[];\n  ghostCards: ICard[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICard | null;\n  panMode: boolean;\n}\n\nexport const initialState: ICardsState = {\n  cards: [\n    {\n      dragging: false,\n      exhausted: false,\n      fill: 'red',\n      id: 0,\n      selected: false,\n      x: 200,\n      y: 200\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      fill: 'red',\n      id: 1,\n      selected: false,\n      x: 400,\n      y: 400\n    },\n    {\n      dragging: false,\n      exhausted: false,\n      fill: 'red',\n      id: 2,\n      selected: false,\n      x: 200,\n      y: 600\n    },\n  ],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from '../../store/rootReducer';\n\nexport const getCards = (state: RootState) => state.cards;\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every(card => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.panMode;","import {connect} from 'react-redux';\n// import Types from 'Types';\nimport App from './App';\nimport { \n  selectCard,\n  exhaustCard,\n  startCardMove,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n} from './features/cards/cards.slice'\n// import * as cardActions from './features/cards/actions';\n// import { shouldShowPreview } from './features/cards/selectors';\n// import { get3RandomPlayerCardDatas } from './features/cardsData/selectors';\n// import * as cardThunks from './features/cardsData/thunks';\n// import * as CoreSet from './external/ringsteki-json-data/packs/Core Set.json';\nimport CoreSet from './external/marvelsdb-json-data/pack/core.json'\n\nimport { RootState } from './store/rootReducer';\nimport { shouldShowPreview, getCards, getPanMode } from './features/cards/cards.selectors';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cards: getCards(state),\n    cardsData: /* CoreSet.cards.slice(0, 3) */CoreSet.slice(0, 3), //get3RandomPlayerCardDatas(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n  }\n}\n\n// const mapDispatchToProps = {\n//   selectCard,\n// }\n\nconst AppContainer = connect(\n  mapStateToProps,\n  {\n    cardMove,\n    endCardMove,\n    exhaustCard,\n    loadData: () => {},\n    selectCard,\n    selectMultipleCards,\n    startCardMove,\n    unselectAllCards,\n    hoverCard,\n    hoverLeaveCard,\n    togglePanMode,\n    // loadData: cardThunks.loadAllCardDataFromJSON,\n  }\n)(App);\n\nexport default AppContainer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport cards from '../features/cards/cards.slice';\n// import cardsData from '../features/cardsData/reducer'\n\nconst rootReducer = combineReducers({\n  cards,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import { configureStore as rtkConfigureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: false,\n})\n\nexport default function configureStore() {\n  \n  return rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n  })\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}