{"version":3,"sources":["../node_modules/peerjs/dist sync","constants/card-constants.ts","CardTokens.tsx","features/cards/cards.selectors.ts","CardTokensContainer.tsx","constants/app-constants.ts","Card.tsx","ContextMenu.tsx","DeckLoader.tsx","EncounterLoader.tsx","features/cards-data/cards-data.selectors.ts","EncounterLoaderContainer.tsx","utilities/geo.ts","store/localStorage.ts","features/cards/initialState.ts","features/cards/cards.slice.ts","features/cards/cards.actions.ts","features/cards/cards.thunks.ts","store/global.actions.ts","TopLayer.tsx","CardStackCardSelector.tsx","CardStackCardSelectorContainer.tsx","Counter.tsx","PeerConnector.tsx","constants/card-missing-image-map.ts","App.tsx","features/cards-data/cards-data.slice.ts","features/cards-data/initialState.ts","features/game/game.selectors.ts","features/game/initialState.ts","features/game/game.slice.ts","features/counters/counters.actions.ts","features/counters/initialState.ts","features/counters/counters.slice.ts","features/counters/counters.selectors.ts","AppContainer.tsx","features/counters/counters.thunks.ts","serviceWorker.ts","store/rootReducer.ts","store/peer-js-redux-middleware.ts","store/configureStore.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","cardConstants","CardTokens","props","damageImg","threatImg","genericImg","unmounted","state","imagesLoaded","damage","threat","generic","Image","onload","setState","card","counterTokens","src","process","prevProps","prevState","this","damageX","x","naturalWidth","damageY","y","showDamage","damageToken","width","height","naturalHeight","fillPatternImage","damageText","text","fill","align","verticalAlign","fontSize","threatX","threatY","showThreat","threatToken","threatText","genericX","genericY","showGeneric","Component","getCards","cards","present","getCardMapById","createSelector","reduce","map","shouldShowPreview","previewCard","every","dragging","getPanMode","panMode","CardTokensContainer","connect","myPeerRef","uuidv4","HORIZONTAL_TYPE_CODES","stringArraysEqual","array1","array2","length","value","index","Card","imgs","stunnedImg","confusedImg","toughImg","touchTimer","initCardImages","imgUrls","forEach","img","imageLoaded","onerror","imageLoadFailed","imgUrl","renderUnanimatedCard","heightToUse","widthToUse","imgToUse","find","i","complete","undefined","scale","getScale","offset","native","rotation","exhausted","cornerRadius","stroke","dropTarget","strokeWidth","fillPatternRotation","shouldRenderImageHorizontal","typeCode","fillPatternScaleX","fillPatternScaleY","shadowColor","controlledBy","selectedColor","shadowBlur","selected","opacity","isGhost","draggable","onDragStart","handleDragStart","onDragMove","handleDragMove","onDragEnd","handleDragEnd","onDblClick","handleDoubleClick","onDblTap","onClick","handleClick","onTap","onMouseDown","handleMouseDown","onTouchStart","handleTouchStart","onTouchMove","handleTouchMove","onTouchEnd","handleTouchEnd","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","onContextMenu","handleContextMenu","cardStackOffset","cardStack","numCardsInStack","shouldRenderStunned","cardState","stunned","tokenImagesLoaded","stunnedToken","getTokenInSlot","confusedToken","confused","toughToken","tough","cardTokens","renderCardName","event","console","log","dx","target","dy","cancelBubble","clearTimeout","setTimeout","handleHover","handleHoverLeave","prevImgUrls","renderCard","cardWidth","cardHeight","textOffset","name","shouldRender","slot","dimensions","stunnedOffset","type","typeCodes","includes","plainCardBack","widthHorizontal","heightHorizontal","some","ContextMenu","preventDefault","handleContextItemClicked","item","action","contextItemClicked","items","hideContextMenu","Menu","keepMounted","open","onClose","anchorReference","anchorPosition","top","position","left","MenuItem","label","DeckLoader","stopPropagation","handleKeyDown","key","loadDeckId","currentTarget","onKeyDown","EncounterLoader","handleSelected","_event","loadCards","c","Autocomplete","options","encounterData","getOptionLabel","option","setData","style","onChange","renderInput","params","TextField","variant","getCardsData","cardsData","getCardsDataEntities","entities","encounterEntities","getCardsDataHeroEntities","getCardsDataEncounterEntities","getCardsDataSetData","getCardsDataEncounterEntitiesBySetCode","setTypesEncounters","Object","values","encounterCard","setCode","set_code","push","entries","filter","set","setTypeCode","sort","a","b","EncounterLoaderContainer","getDistance","point1","point2","deltaX","deltaY","Math","sqrt","loadState","serializedState","localStorage","getItem","baseState","JSON","parse","err","error","localStorageState","StatusTokenType","CounterTokenType","initialState","ghostCards","dropTargetCard","addCardStackWithId","createAction","pullCardOutOfCardStackWithId","startCardMoveWithSplitStackId","replaceCardStack","fetchDecklistById","createAsyncThunk","payload","thunkApi","axios","get","decklistId","response","getState","heroCardsData","heroSetCode","data","investigator_code","encounterCardsData","heroObligationDeck","type_code","heroEncounterDeck","heroId","dataId","relatedEncounterDeck","encounterDeckId","relatedObligationDeck","obligationDeckId","shuffle","array","temporaryValue","randomIndex","returnArray","stringify","currentIndex","floor","random","resetApp","receiveRemoteGameState","getCardStackWithId","mutateCardWithId","ref","callback","cardToUpdate","unselectAllCardsReducer","ACTOR_REF","cardsSlice","createSlice","reducers","selectCard","unselectOtherCards","unselectCard","toggleSelectCard","exhaustCard","cardMove","primaryCard","movedCards","possibleDropTargets","foreachUnselectedCard","distance","c1","c2","movedCard","splice","indexOf","endCardMove","dropTargetCards","concat","selectMultipleCards","ids","unselectAllCards","hoverCard","cardToPreview","faceup","hoverLeaveCard","togglePanMode","flipCards","reverse","resetCards","toggleToken","cardToToggle","statusTokens","tokenType","adjustCounterToken","delta","extraReducers","builder","addCase","cardToReplaceStack","newStack","cardJsonIds","jsonId","cardStackToUse","cardStackId","newCardStack","newCard","assign","cardToStartMoving","splitTopCard","cardToMove","topCard","shift","splitCardId","actorRef","foreachSelectedAndControlledCard","fulfilled","heroCard","mainDeckStack","slots","cardDetails","Array","from","cardPadding","newDeck","encounterDeck","obligationDeck","actions","TopLayer","completed","containerStyle","className","children","CardStackCardSelector","cardsDataInStack","cardSelected","cardsDataEntities","CardStackCardSelectorContainer","Counter","handleDecrement","updateCounterValueBy","handleIncrement","pos","PeerConnector","inputRef","MISSING_CARD_IMAGE_MAP","App","stage","handleCounterValueUpdate","updateCounterValue","handleCounterDrag","moveCounter","newPos","noOp","renderEmptyMessage","renderContextMenu","showContextMenu","containerRect","container","getBoundingClientRect","pointerPosition","contextMenuPosition","contextMenuItems","clearContextMenu","renderDeckImporter","showDeckImporter","deckImporterPosition","clearDeckImporter","handleImportDeck","getRelativePositionFromTarget","renderEncounterImporter","showEncounterImporter","encounterImporterPosition","clearEncounterImporter","handleLoadEncounter","renderCardSearch","showCardSearch","cardSearchPosition","cardStackForSearching","clearCardSearch","handleCardSelectedFromCardStack","renderPeerConnector","showPeerConnector","peerConnectorPosition","clearPeerConnector","handlePeerConnect","addCardStack","peerId","connectToRemoteGame","pullCardOutOfCardStack","handleStageClickOrTap","mousePos","selectStartPos","handleWheel","evt","oldScale","gameState","stageZoom","pointer","getPointerPosition","mousePointTo","newScale","updateZoom","updatePosition","handleCounterContextMenu","counterId","menuItems","removeCounter","handleCardContextMenu","cardId","currentStatusTokens","shuffleStack","Stunned","Confused","Tough","Damage","Threat","Generic","handleCardClick","modifierKeyHeld","shiftKey","metaKey","ctrlKey","handleSelectAndExhaust","handleCardDragStart","draggingCard","hasStack","upperRightPoint","startCardMove","handleKeyPress","which","keyCode","redo","undo","getRawPreviewCardPosition","pointerPos","screenMidPointX","window","innerWidth","posParam","transform","getAbsoluteTransform","copy","invert","point","button","selecting","getSelectionRectInfo","selectRect","abs","handleMouseUp","drewASelectionRect","selectedCards","currSelectedCards","Intersects","handleMouseMove","addNewCounter","getCardType","getCardName","cardInQuestion","getCardCode","getImgUrls","urls","topCardData","bottomCardData","cardData","back_link","double_sided","generateLCGCDNImageUrl","missingImageOverride","checkMissingImageMap","unshift","loadCardsData","staticCards","playerColors","tokens","movingCards","previewCards","showPreview","rawPos","previewPos","tabIndex","onKeyPress","Consumer","store","stagePosition","innerHeight","onMouseUp","onMouseMove","onWheel","counters","counter","codeToUse","groupCode","substring","cardCode","toLocaleUpperCase","cardSuffix","cardsDataSlice","heroPacks","PackData","encounterPacks","pack","SetData","card_set_type_code","getGame","game","getPlayerColors","gameSlice","setPlayerColor","color","addNewCounterWithId","countersSlice","getCurrentCounters","AppContainer","dispatch","payloadWithId","stackToShuffle","shuffledStack","ActionCreators","Boolean","location","hostname","match","rootReducer","combineReducers","undoable","limit","groupBy","groupByActionTypes","excludeAction","blacklistRemoteActions","setupConnection","conn","storeAPI","on","INITIAL_STATE_MSG","REMOTE_ACTION","customizedMiddleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","activeCon","cgpPeer","Peer","debug","send","setPlayerColorAction","metadata","peerConnection","onconnectionstatechange","ev","connectionState","next","rtkConfigureStore","reducer","middleware","devTools","subscribe","throttle","blacklistStateKeys","setItem","saveState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.89fc5861.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 252;","export const cardConstants = {\n  CARD_HEIGHT: 209,\n  CARD_WIDTH: 150,\n  CARD_PREVIEW_HEIGHT: 418,\n  CARD_PREVIEW_WIDTH: 300,\n};\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { ICardStack } from \"./features/cards/initialState\";\nimport { Rect, Text } from \"react-konva\";\nimport { cardConstants } from \"./constants/card-constants\";\ninterface IProps {\n  x: number;\n  y: number;\n  card: ICardStack;\n}\n\ninterface IState {\n  imagesLoaded: {\n    damage: boolean;\n    threat: boolean;\n    generic: boolean;\n  };\n}\n\nclass CardTokens extends Component<IProps, IState> {\n  private damageImg: HTMLImageElement;\n  private threatImg: HTMLImageElement;\n  private genericImg: HTMLImageElement;\n  private unmounted: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imagesLoaded: {\n        damage: false,\n        threat: false,\n        generic: false,\n      },\n    };\n\n    this.damageImg = new Image();\n    this.threatImg = new Image();\n    this.genericImg = new Image();\n\n    // DAMAGE\n    this.damageImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: true,\n            threat: this.state.imagesLoaded.threat,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.damage) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    this.threatImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: true,\n            generic: this.state.imagesLoaded.generic,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.threat) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // GENERIC\n    this.genericImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          imagesLoaded: {\n            damage: this.state.imagesLoaded.damage,\n            threat: this.state.imagesLoaded.threat,\n            generic: true,\n          },\n        });\n      }\n    };\n\n    if (!!this.props.card.counterTokens.generic) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.damage &&\n      !prevProps.card?.counterTokens.damage &&\n      !!this.props.card?.counterTokens.damage\n    ) {\n      this.damageImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/damage.png\";\n    }\n\n    // THREAT\n    if (\n      !this.state.imagesLoaded.threat &&\n      !prevProps.card?.counterTokens.threat &&\n      !!this.props.card?.counterTokens.threat\n    ) {\n      this.threatImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/threat.png\";\n    }\n\n    // DAMAGE\n    if (\n      !this.state.imagesLoaded.generic &&\n      !prevProps.card?.counterTokens.generic &&\n      !!this.props.card?.counterTokens.generic\n    ) {\n      this.genericImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/generic_counter.png\";\n    }\n  }\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    const damageX = this.props.x - this.damageImg.naturalWidth / 2;\n    const damageY = this.props.y - cardConstants.CARD_HEIGHT / 2 + 20;\n    const showDamage =\n      this.state.imagesLoaded.damage && !!this.props.card.counterTokens.damage;\n\n    const damageToken = showDamage ? (\n      <Rect\n        key={`${this.props.card.id}-damageToken`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        fillPatternImage={this.damageImg}\n      ></Rect>\n    ) : null;\n\n    const damageText = showDamage ? (\n      <Text\n        key={`${this.props.card.id}-damageText`}\n        x={damageX}\n        y={damageY}\n        width={this.damageImg.naturalWidth}\n        height={this.damageImg.naturalHeight}\n        text={`${this.props.card.counterTokens.damage}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const threatX = this.props.x - this.threatImg.naturalWidth / 2;\n    const threatY = damageY + this.damageImg.naturalHeight + 5;\n    const showThreat =\n      this.state.imagesLoaded.threat && !!this.props.card.counterTokens.threat;\n\n    const threatToken = showThreat ? (\n      <Rect\n        key={`${this.props.card.id}-threatToken`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        fillPatternImage={this.threatImg}\n      ></Rect>\n    ) : null;\n\n    const threatText = showThreat ? (\n      <Text\n        key={`${this.props.card.id}-threatText`}\n        x={threatX}\n        y={threatY}\n        width={this.threatImg.naturalWidth}\n        height={this.threatImg.naturalHeight}\n        text={`${this.props.card.counterTokens.threat}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    const genericX = this.props.x - this.threatImg.naturalWidth / 2;\n    const genericY = threatY + this.threatImg.naturalHeight + 5;\n    const showGeneric =\n      this.state.imagesLoaded.generic &&\n      !!this.props.card.counterTokens.generic;\n\n    const genericToken = showGeneric ? (\n      <Rect\n        key={`${this.props.card.id}-genericToken`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        fillPatternImage={this.genericImg}\n      ></Rect>\n    ) : null;\n\n    const genericText = showGeneric ? (\n      <Text\n        key={`${this.props.card.id}-genericText`}\n        x={genericX}\n        y={genericY}\n        width={this.genericImg.naturalWidth}\n        height={this.genericImg.naturalHeight}\n        text={`${this.props.card.counterTokens.generic}`}\n        fill=\"white\"\n        align=\"center\"\n        verticalAlign=\"middle\"\n        fontSize={24}\n      ></Text>\n    ) : null;\n\n    return [\n      damageToken,\n      damageText,\n      threatToken,\n      threatText,\n      genericToken,\n      genericText,\n    ];\n  }\n}\n\nexport default CardTokens;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { ICardStack } from \"./initialState\";\n\nexport const getCards = (state: RootState) => state.cards.present;\n\nexport const getCardMapById = createSelector(getCards, (cards) => {\n  return cards.cards.reduce((map: { [k: string]: ICardStack }, card) => {\n    map[card.id] = card;\n    return map;\n  }, {});\n});\n\nexport const shouldShowPreview = createSelector(getCards, (cards) => {\n  return !!cards.previewCard && cards.cards.every((card) => !card.dragging);\n});\n\nexport const getPanMode = (state: RootState) => state.cards.present.panMode;\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store/rootReducer\";\nimport CardTokens from \"./CardTokens\";\nimport { getCardMapById } from \"./features/cards/cards.selectors\";\n\nexport interface IProps {\n  id: string;\n}\n\nconst mapStateToProps = (state: RootState, props: IProps) => {\n  return {\n    card: getCardMapById(state)[props.id],\n  };\n};\n\nconst CardTokensContainer = connect(mapStateToProps, {})(CardTokens);\n\nexport default CardTokensContainer;\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const myPeerRef = uuidv4();\n\nexport type PlayerColor =\n  | \"red\"\n  | \"cyan\"\n  | \"green\"\n  | \"blue\"\n  | \"magnenta\"\n  | \"yellow\";\n\nexport const possibleColors: PlayerColor[] = [\n  \"red\",\n  \"cyan\",\n  \"green\",\n  \"blue\",\n  \"magnenta\",\n  \"yellow\",\n];\n","// tslint:disable:no-console\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Rect, Text } from \"react-konva\";\nimport CardTokensContainer from \"./CardTokensContainer\";\nimport { myPeerRef, PlayerColor } from \"./constants/app-constants\";\nimport { cardConstants } from \"./constants/card-constants\";\n\nexport const HORIZONTAL_TYPE_CODES = [\"main_scheme\", \"side_scheme\"];\n\nexport interface CardTokens {\n  damage: number;\n  threat: number;\n  generic: number;\n}\n\nexport interface CardUIState {\n  stunned: boolean;\n  confused: boolean;\n  tough: boolean;\n  tokens: CardTokens;\n}\n\ninterface IProps {\n  name: string;\n  code: string;\n  selectedColor: PlayerColor;\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  cardState?: CardUIState;\n  fill: string;\n  handleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDoubleClick?: (id: string, event: KonvaEventObject<MouseEvent>) => void;\n  handleDragStart?: (id: string, event: KonvaEventObject<DragEvent>) => void;\n  handleDragMove?: (info: { id: string; dx: number; dy: number }) => void;\n  handleDragEnd?: (id: string) => void;\n  handleHover?: (id: string) => void;\n  handleHoverLeave?: (id: string) => void;\n  id: string;\n  selected: boolean;\n  dropTarget?: boolean;\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  imgUrls: string[];\n  isGhost?: boolean;\n  numCardsInStack?: number;\n  typeCode?: string;\n  faceup: boolean;\n  handleContextMenu?: (\n    id: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => void;\n}\n\ninterface IState {\n  imageLoaded: boolean;\n  imageLoadFailed: number;\n  prevImgUrls: string[];\n  tokenImagesLoaded: {\n    stunned: boolean;\n    confused: boolean;\n    tough: boolean;\n  };\n}\n\nconst stringArraysEqual = (array1: string[], array2: string[]) => {\n  return (\n    array1.length === array2.length &&\n    array1.every((value, index) => {\n      return value === array2[index];\n    })\n  );\n};\n\nclass Card extends Component<IProps, IState> {\n  // tslint:disable-next-line:member-access\n  static getDerivedStateFromProps(props: IProps, state: IState): IState | null {\n    if (!stringArraysEqual(props.imgUrls, state.prevImgUrls ?? [])) {\n      return {\n        imageLoaded: false,\n        imageLoadFailed: 0,\n        prevImgUrls: props.imgUrls,\n        tokenImagesLoaded: {\n          stunned: state.tokenImagesLoaded.stunned,\n          confused: state.tokenImagesLoaded.confused,\n          tough: state.tokenImagesLoaded.tough,\n        },\n      };\n    }\n    // No state update necessary\n    return null;\n  }\n\n  private imgs: HTMLImageElement[] = [];\n  private stunnedImg: HTMLImageElement;\n  private confusedImg: HTMLImageElement;\n  private toughImg: HTMLImageElement;\n  private unmounted: boolean;\n  private touchTimer: any = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.unmounted = true;\n\n    this.state = {\n      imageLoaded: false,\n      imageLoadFailed: 0,\n      prevImgUrls: this.props.imgUrls,\n      tokenImagesLoaded: {\n        stunned: false,\n        confused: false,\n        tough: false,\n      },\n    };\n\n    this.initCardImages(props);\n\n    this.stunnedImg = new Image();\n    this.confusedImg = new Image();\n    this.toughImg = new Image();\n\n    // STUNNED\n    this.stunnedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: true,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.stunned) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    this.confusedImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: true,\n            tough: this.state.tokenImagesLoaded.tough,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.confused) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    this.toughImg.onload = () => {\n      if (!this.unmounted) {\n        this.setState({\n          tokenImagesLoaded: {\n            stunned: this.state.tokenImagesLoaded.stunned,\n            confused: this.state.tokenImagesLoaded.confused,\n            tough: true,\n          },\n        });\n      }\n    };\n\n    if (!!props.cardState?.tough) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (\n      !this.state.imageLoaded &&\n      !stringArraysEqual(prevProps.imgUrls, this.props.imgUrls)\n    ) {\n      this.setState({\n        imageLoaded: false,\n        imageLoadFailed: 0,\n      });\n      this.initCardImages(this.props);\n    }\n\n    // STUNNED\n    if (\n      !this.state.tokenImagesLoaded.stunned &&\n      !prevProps.cardState?.stunned &&\n      !!this.props.cardState?.stunned\n    ) {\n      this.stunnedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/stunned.png\";\n    }\n\n    // CONFUSED\n    if (\n      !this.state.tokenImagesLoaded.confused &&\n      !prevProps.cardState?.confused &&\n      !!this.props.cardState?.confused\n    ) {\n      this.confusedImg.src =\n        process.env.PUBLIC_URL + \"/images/standard/confused.png\";\n    }\n\n    // TOUGH\n    if (\n      !this.state.tokenImagesLoaded.tough &&\n      !prevProps.cardState?.tough &&\n      !!this.props.cardState?.tough\n    ) {\n      this.toughImg.src = process.env.PUBLIC_URL + \"/images/standard/tough.png\";\n    }\n  }\n\n  private initCardImages = (props: IProps) => {\n    this.imgs = props.imgUrls.map(() => new Image());\n\n    // When the image loads, set a flag in the state\n    this.imgs.forEach(\n      (img) =>\n        (img.onload = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoaded: true,\n            });\n          }\n        })\n    );\n\n    this.imgs.forEach(\n      (img) =>\n        (img.onerror = () => {\n          if (!this.unmounted) {\n            this.setState({\n              imageLoadFailed: this.state.imageLoadFailed + 1,\n            });\n          }\n        })\n    );\n\n    props.imgUrls.forEach((imgUrl, index) => (this.imgs[index].src = imgUrl));\n  };\n\n  public componentDidMount() {\n    this.unmounted = false;\n  }\n\n  public componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  public render() {\n    return this.renderCard(this.state.imageLoaded);\n  }\n\n  private renderCard(imageLoaded: boolean) {\n    const heightToUse = this.props.height || cardConstants.CARD_HEIGHT;\n    const widthToUse = this.props.width || cardConstants.CARD_WIDTH;\n\n    return this.renderUnanimatedCard(heightToUse, widthToUse, imageLoaded);\n  }\n\n  private renderUnanimatedCard = (\n    heightToUse: number,\n    widthToUse: number,\n    imageLoaded: boolean\n  ) => {\n    const imgToUse = imageLoaded\n      ? this.imgs.find((i) => i.complete && i.naturalHeight !== 0)\n      : undefined;\n\n    const scale = this.getScale(imgToUse, widthToUse, heightToUse);\n    const offset = {\n      x: widthToUse / 2,\n      y: heightToUse / 2,\n    };\n\n    const card = (\n      <Rect\n        key={`${this.props.id}-card`}\n        native={true}\n        rotation={this.props.exhausted ? 90 : 0}\n        cornerRadius={9}\n        x={this.props.x}\n        y={this.props.y}\n        width={widthToUse}\n        height={heightToUse}\n        offset={offset}\n        stroke={this.props.dropTarget ? \"blue\" : \"\"}\n        strokeWidth={this.props.dropTarget ? 2 : 0}\n        fillPatternRotation={\n          !imageLoaded ||\n          this.shouldRenderImageHorizontal(\n            this.props.typeCode || \"\",\n            HORIZONTAL_TYPE_CODES\n          )\n            ? 270\n            : 0\n        }\n        fillPatternImage={imgToUse}\n        fillPatternScaleX={scale.width}\n        fillPatternScaleY={scale.height}\n        fill={imageLoaded ? undefined : \"gray\"}\n        shadowColor={\n          !!this.props.controlledBy ? this.props.selectedColor : \"black\"\n        }\n        shadowBlur={this.props.dragging ? 20 : this.props.selected ? 10 : 0}\n        opacity={this.props.isGhost ? 0.5 : 1}\n        draggable={\n          this.props.controlledBy === \"\" ||\n          this.props.controlledBy === myPeerRef\n        }\n        onDragStart={this.handleDragStart}\n        onDragMove={this.handleDragMove}\n        onDragEnd={this.handleDragEnd}\n        onDblClick={this.handleDoubleClick}\n        onDblTap={this.handleDoubleClick}\n        onClick={this.handleClick}\n        onTap={this.handleClick}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEnd}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onContextMenu={this.handleContextMenu}\n      />\n    );\n\n    const cardStackOffset = {\n      x: offset.x + 4,\n      y: offset.y - 4,\n    };\n\n    const cardStack =\n      (this.props.numCardsInStack || 1) > 1 ? (\n        <Rect\n          key={`${this.props.id}-cardStack`}\n          native={true}\n          rotation={this.props.exhausted ? 90 : 0}\n          cornerRadius={[9, 9, 9, 9]}\n          x={this.props.x}\n          y={this.props.y}\n          width={widthToUse}\n          height={heightToUse}\n          offset={cardStackOffset}\n          opacity={this.props.isGhost ? 0.5 : 1}\n          fill={\"gray\"}\n          shadowBlur={this.props.dragging ? 10 : this.props.selected ? 5 : 0}\n        />\n      ) : null;\n\n    const shouldRenderStunned =\n      !!this.props.cardState?.stunned && this.state.tokenImagesLoaded.stunned;\n\n    const stunnedToken = this.getTokenInSlot(\n      shouldRenderStunned,\n      this.stunnedImg,\n      offset,\n      0\n    );\n    const confusedToken = this.getTokenInSlot(\n      !!this.props.cardState?.confused && this.state.tokenImagesLoaded.confused,\n      this.confusedImg,\n      offset,\n      1\n    );\n    const toughToken = this.getTokenInSlot(\n      !!this.props.cardState?.tough && this.state.tokenImagesLoaded.tough,\n      this.toughImg,\n      offset,\n      2\n    );\n\n    const cardTokens =\n      this.props.dragging || this.props.isGhost ? null : (\n        <CardTokensContainer\n          key={`${this.props.id}-cardTokens`}\n          id={this.props.id}\n          x={this.props.x}\n          y={this.props.y}\n        ></CardTokensContainer>\n      );\n\n    const noImageCardNameText = this.renderCardName(\n      offset,\n      widthToUse,\n      heightToUse\n    );\n\n    return [\n      cardStack,\n      card,\n      noImageCardNameText,\n      stunnedToken,\n      confusedToken,\n      toughToken,\n      cardTokens,\n    ];\n  };\n\n  private renderCardName(\n    offset: Vector2d,\n    cardWidth: number,\n    cardHeight: number\n  ) {\n    const textOffset = { x: offset.x - 10, y: offset.y - 20 };\n    const textItem =\n      this.state.imageLoadFailed === this.props.imgUrls.length ? (\n        <Text\n          key={`${this.props.id}-cardnametext`}\n          offset={textOffset}\n          x={this.props.x}\n          y={this.props.y}\n          width={cardWidth - 10}\n          height={cardHeight - 20}\n          fontSize={24}\n          text={`${this.props.name} ${this.props.code}`}\n          draggable={\n            this.props.controlledBy === \"\" ||\n            this.props.controlledBy === myPeerRef\n          }\n          onDragStart={this.handleDragStart}\n          onDragMove={this.handleDragMove}\n          onDragEnd={this.handleDragEnd}\n          onDblClick={this.handleDoubleClick}\n          onDblTap={this.handleDoubleClick}\n          onClick={this.handleClick}\n          onTap={this.handleClick}\n          onMouseDown={this.handleMouseDown}\n          onTouchStart={this.handleMouseDown}\n          onMouseOver={this.handleMouseOver}\n          onMouseOut={this.handleMouseOut}\n          onContextMenu={this.handleContextMenu}\n        ></Text>\n      ) : null;\n\n    return textItem;\n  }\n\n  private getTokenInSlot(\n    shouldRender: boolean,\n    img: HTMLImageElement,\n    offset: { x: number; y: number },\n    slot: 0 | 1 | 2\n  ) {\n    const dimensions = {\n      width: img.naturalWidth / 2,\n      height: img.naturalHeight / 2,\n    };\n\n    const stunnedOffset = {\n      x: offset.x - cardConstants.CARD_WIDTH + dimensions.width / 2,\n      y: offset.y - dimensions.height * slot - 5 * (slot + 1) - 10,\n    };\n\n    return shouldRender ? (\n      <Rect\n        key={`${this.props.id}-status${slot}`}\n        native={true}\n        cornerRadius={8}\n        x={this.props.x}\n        y={this.props.y}\n        width={dimensions.width}\n        height={dimensions.height}\n        fillPatternScaleX={0.5}\n        fillPatternScaleY={0.5}\n        offset={stunnedOffset}\n        fillPatternImage={img}\n      />\n    ) : null;\n  }\n\n  private shouldRenderImageHorizontal(\n    type: string,\n    typeCodes: string[]\n  ): boolean {\n    return typeCodes.includes(type) && !this.plainCardBack;\n  }\n\n  private get plainCardBack() {\n    return (\n      this.props.imgUrls.some((i) => i.includes(\"standard\")) &&\n      this.props.imgUrls.some((i) => i.includes(\"_back\"))\n    );\n  }\n\n  private getScale(\n    img: HTMLImageElement | undefined,\n    widthToUse: number,\n    heightToUse: number\n  ) {\n    const width = !!img ? widthToUse / img.naturalWidth : widthToUse;\n\n    const widthHorizontal = !!img ? heightToUse / img.naturalWidth : widthToUse;\n\n    const height = !!img ? heightToUse / img.naturalHeight : heightToUse;\n\n    const heightHorizontal = !!img\n      ? widthToUse / img.naturalHeight\n      : heightToUse;\n\n    return this.shouldRenderImageHorizontal(\n      this.props.typeCode || \"\",\n      HORIZONTAL_TYPE_CODES\n    )\n      ? { width: widthHorizontal, height: heightHorizontal }\n      : { width, height };\n  }\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    console.log(\"HANDLE CONTEXT MENU CARD\");\n    if (!!this.props.handleContextMenu) {\n      this.props.handleContextMenu(this.props.id, event);\n    }\n  };\n\n  private handleDoubleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleDoubleClick) {\n      this.props.handleDoubleClick(this.props.id, event);\n    }\n  };\n\n  private handleDragStart = (event: KonvaEventObject<DragEvent>) => {\n    if (this.props.handleDragStart) {\n      this.props.handleDragStart(this.props.id, event);\n    }\n  };\n\n  private handleDragMove = (event: any) => {\n    if (this.props.handleDragMove) {\n      this.props.handleDragMove({\n        id: this.props.id,\n        dx: event.target.x() - this.props.x,\n        dy: event.target.y() - this.props.y,\n      });\n    }\n  };\n\n  private handleDragEnd = () => {\n    if (this.props.handleDragEnd && this.props.dragging) {\n      this.props.handleDragEnd(this.props.id);\n    }\n  };\n\n  private handleClick = (event: KonvaEventObject<MouseEvent>) => {\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id, event);\n      event.cancelBubble = true;\n    }\n  };\n\n  private handleMouseDown = (event: any) => {\n    event.cancelBubble = true;\n  };\n\n  private handleTouchStart = (event: KonvaEventObject<TouchEvent>) => {\n    event.cancelBubble = true;\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n\n    this.touchTimer = setTimeout(() => {\n      this.handleContextMenu(\n        (event as unknown) as KonvaEventObject<PointerEvent>\n      );\n    }, 750);\n  };\n\n  private handleTouchMove = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleTouchEnd = (event: KonvaEventObject<TouchEvent>) => {\n    if (!!this.touchTimer) {\n      clearTimeout(this.touchTimer);\n      this.touchTimer = null;\n    }\n  };\n\n  private handleMouseOver = () => {\n    if (this.props.handleHover) {\n      this.props.handleHover(this.props.id);\n    }\n  };\n\n  private handleMouseOut = () => {\n    if (this.props.handleHoverLeave) {\n      this.props.handleHoverLeave(this.props.id);\n    }\n  };\n}\n\nexport default Card;\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport interface ContextMenuItem {\n  label: string;\n  action: () => void;\n}\n\ninterface IProps {\n  position: Vector2d;\n  items: ContextMenuItem[];\n  contextItemClicked?: (item: ContextMenuItem) => void;\n  hideContextMenu: () => void;\n}\n\nclass ContextMenu extends Component<IProps> {\n  render() {\n    return (\n      <div\n        id=\"context-menu-layer\"\n        onContextMenu={this.preventDefault}\n        onClick={this.props.hideContextMenu}\n      >\n        <Menu\n          keepMounted\n          open={true}\n          onClose={this.props.hideContextMenu}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{\n            top: this.props.position.y + 8,\n            left: this.props.position.x + 8,\n          }}\n        >\n          {this.props.items.map((i, index) => (\n            <MenuItem\n              key={`contextMenu-item-${index}`}\n              onClick={this.handleContextItemClicked(i)}\n            >\n              {i.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    );\n  }\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n\n  private handleContextItemClicked = (item: ContextMenuItem) => () => {\n    item.action();\n    if (!!this.props.contextItemClicked) {\n      this.props.contextItemClicked(this.props.items[0]);\n    }\n    this.props.hideContextMenu();\n  };\n}\n\nexport default ContextMenu;\n","import { Component } from \"react\";\nimport * as React from \"react\";\n\ninterface IProps {\n  loadDeckId: (id: number) => void;\n}\n\nclass DeckLoader extends Component<IProps> {\n  render() {\n    return (\n      <input\n        onKeyDown={this.handleKeyDown}\n        onClick={this.cancelBubble}\n        type=\"number\"\n      ></input>\n    );\n  }\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      this.props.loadDeckId(+event.currentTarget.value);\n    }\n  };\n}\n\nexport default DeckLoader;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { IEncounterEntity } from \"./features/cards-data/cards-data.selectors\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\ninterface IProps {\n  encounterData: IEncounterEntity[];\n  loadCards: (cards: string[]) => void;\n}\n\nclass EncounterLoader extends Component<IProps> {\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"encounter-loader-combobox\"\n          options={this.props.encounterData || []}\n          getOptionLabel={(option) => option.setData.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Encounter Set\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: IEncounterEntity | null) => {\n    if (!!value) {\n      this.props.loadCards(value.cards.map((c) => c.code));\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default EncounterLoader;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Set } from \"../cards-data/initialState\";\n\nexport interface IEncounterEntity {\n  setCode: string;\n  setData: Set;\n  cards: CardData[];\n}\n\nexport const getCardsData = (state: RootState) => state.cardsData;\n\nexport const getCardsDataEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return { ...cardsData.entities, ...cardsData.encounterEntities };\n  }\n);\n\nexport const getCardsDataHeroEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.entities;\n  }\n);\n\nexport const getCardsDataEncounterEntities = createSelector(\n  getCardsData,\n  (cardsData) => {\n    return cardsData.encounterEntities;\n  }\n);\n\nexport const getCardsDataSetData = createSelector(getCardsData, (cardsData) => {\n  return cardsData.setData;\n});\n\nexport const getCardsDataEncounterEntitiesBySetCode = createSelector(\n  getCardsDataEncounterEntities,\n  getCardsDataSetData,\n  (encounterEntities, setData): IEncounterEntity[] => {\n    const setTypesEncounters: { [key: string]: CardData[] } = {};\n\n    Object.values(encounterEntities).forEach((encounterCard) => {\n      const setCode = encounterCard.set_code || \"unknown\";\n      if (!!setTypesEncounters[setCode]) {\n        setTypesEncounters[setCode].push(encounterCard);\n      } else {\n        setTypesEncounters[setCode] = [encounterCard];\n      }\n    });\n\n    return Object.entries(setTypesEncounters)\n      .map(([key, value]) => ({\n        setCode: key,\n        setData: setData[key],\n        cards: value,\n      }))\n      .filter(\n        (set) =>\n          set.setData.setTypeCode !== \"nemesis\" &&\n          set.setData.setTypeCode !== \"hero\"\n      )\n      .sort((a, b) => (a.setData.name > b.setData.name ? 1 : -1));\n  }\n);\n","import { connect } from \"react-redux\";\nimport EncounterLoader from \"./EncounterLoader\";\nimport { getCardsDataEncounterEntitiesBySetCode } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    encounterData: getCardsDataEncounterEntitiesBySetCode(state),\n  };\n};\n\nconst EncounterLoaderContainer = connect(mapStateToProps, {})(EncounterLoader);\n\nexport default EncounterLoaderContainer;\n","import { Vector2d } from \"konva/types/types\";\n\nexport const getDistance = (point1: Vector2d, point2: Vector2d): number => {\n  const deltaX = point1.x - point2.x;\n  const deltaY = point1.y - point2.y;\n  return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n};\n","import { RootState } from \"./rootReducer\";\n\nexport const loadState = (key: string) => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    if (serializedState === null) {\n      return {};\n    }\n    const baseState = JSON.parse(serializedState || \"{}\");\n\n    return baseState.present ?? baseState;\n  } catch (err) {\n    console.error(\"problem parsing\");\n    return {};\n  }\n};\n\nexport const saveState = (state: RootState) => {\n  const blacklistStateKeys = [\"cardsData\"];\n  try {\n    Object.entries(state).forEach(([key, value]) => {\n      if (!blacklistStateKeys.includes(key)) {\n        const serializedState = JSON.stringify(value);\n        localStorage.setItem(key, serializedState);\n      }\n    });\n  } catch {\n    // ignore write errors\n    console.error(\"Error writing state to local storage\");\n  }\n};\n","import { loadState } from \"../../store/localStorage\";\nimport { CounterTokenType, StatusTokenType } from \"./cards.slice\";\n\nexport interface ICardStack {\n  controlledBy: string;\n  dragging: boolean;\n  exhausted: boolean;\n  faceup: boolean;\n  fill: string;\n  id: string;\n  selected: boolean;\n  x: number;\n  y: number;\n  cardStack: ICardDetails[];\n  statusTokens: {\n    [K in StatusTokenType]: boolean;\n  };\n  counterTokens: {\n    [K in CounterTokenType]: number;\n  };\n}\n\nexport interface ICardDetails {\n  jsonId: string;\n}\n\nexport interface IPreviewCard {\n  id: string;\n}\n\nexport interface ICardsState {\n  cards: ICardStack[];\n  ghostCards: ICardStack[];\n  previewCard: IPreviewCard | null;\n  dropTargetCard: ICardStack | null;\n  panMode: boolean;\n}\n\nconst localStorageState: ICardsState = loadState(\"cards\");\n\n// Make sure initially, none of the cards are \"owned\" / \"selected\"\nif (!!localStorageState.cards) {\n  localStorageState.cards.forEach((c) => {\n    c.controlledBy = \"\";\n    c.selected = false;\n  });\n}\n\nconst defaultState: ICardsState = {\n  cards: [],\n  ghostCards: [],\n  previewCard: null,\n  dropTargetCard: null,\n  panMode: true,\n};\n\nexport const initialState: ICardsState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { getDistance } from \"../../utilities/geo\";\nimport {\n  initialState,\n  ICardsState,\n  ICardStack,\n  ICardDetails,\n} from \"./initialState\";\nimport { fetchDecklistById } from \"./cards.thunks\";\nimport { cardConstants } from \"../../constants/card-constants\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport {\n  addCardStackWithId,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\n\nconst CARD_DROP_TARGET_DISTANCE = 30;\n\nexport enum StatusTokenType {\n  Stunned = \"stunned\",\n  Confused = \"confused\",\n  Tough = \"tough\",\n}\n\nexport enum CounterTokenType {\n  Damage = \"damage\",\n  Threat = \"threat\",\n  Generic = \"generic\",\n}\n\n// Helper methods\nconst getCardStackWithId = (\n  state: ICardsState,\n  id: string\n): ICardStack | undefined => {\n  return state.cards.find((card) => card.id === id);\n};\n\nconst mutateCardWithId = (\n  state: ICardsState,\n  id: string,\n  ref: string,\n  callback: (card: ICardStack) => void\n) => {\n  const cardToUpdate = getCardStackWithId(state, id);\n  if (\n    cardToUpdate &&\n    (cardToUpdate.controlledBy === \"\" || cardToUpdate.controlledBy === ref)\n  ) {\n    callback(cardToUpdate);\n  }\n};\n\nconst foreachSelectedAndControlledCard = (\n  state: ICardsState,\n  actorRef: string,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => card.selected && card.controlledBy === actorRef)\n    .forEach((card) => callback(card));\n};\n\nconst foreachUnselectedCard = (\n  state: ICardsState,\n  callback: (card: ICardStack) => void\n) => {\n  state.cards\n    .filter((card) => !card.selected)\n    .forEach((card) => callback(card));\n};\n\n// Reducers\nconst selectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; unselectOtherCards: boolean }>\n> = (state, action) => {\n  if (action.payload.unselectOtherCards) {\n    unselectAllCardsReducer(state, action);\n  }\n\n  mutateCardWithId(\n    state,\n    action.payload.id,\n    (action as any).ACTOR_REF,\n    (card) => {\n      card.selected = true;\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  );\n};\n\nconst unselectCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = false;\n    card.controlledBy = \"\";\n  });\n};\n\nconst toggleSelectCardReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<string>\n> = (state, action) => {\n  mutateCardWithId(state, action.payload, (action as any).ACTOR_REF, (card) => {\n    card.selected = !card.selected;\n    if (!card.selected) {\n      card.controlledBy = \"\";\n    } else {\n      card.controlledBy = (action as any).ACTOR_REF;\n    }\n  });\n};\n\nconst exhaustCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === (action as any).ACTOR_REF &&\n        (card.id === action.payload || card.selected)\n    )\n    .forEach((card) => {\n      card.exhausted = !card.exhausted;\n    });\n};\n\nconst cardMoveReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; dx: number; dy: number }>\n> = (state, action) => {\n  const movedCards: ICardStack[] = [];\n\n  let primaryCard: ICardStack;\n\n  state.cards\n    .filter(\n      (card) =>\n        card.id === action.payload.id ||\n        (card.selected && card.controlledBy === (action as any).ACTOR_REF)\n    )\n    .forEach((card) => {\n      if (card.id === action.payload.id) {\n        primaryCard = card;\n      }\n\n      card.x += action.payload.dx;\n      card.y += action.payload.dy;\n\n      movedCards.push(card);\n    });\n\n  // go through and find if any unselected cards are potential drop targets\n  // If so, get the closest one\n  const possibleDropTargets: { distance: number; card: ICardStack }[] = [];\n  foreachUnselectedCard(state, (card) => {\n    const distance = getDistance(card, primaryCard);\n    if (distance < CARD_DROP_TARGET_DISTANCE) {\n      possibleDropTargets.push({\n        distance,\n        card,\n      });\n    }\n  });\n\n  state.dropTargetCard =\n    possibleDropTargets.sort((c1, c2) => c1.distance - c2.distance)[0]?.card ??\n    null;\n\n  // put the moved cards at the end. TODO: we could just store the move order or move time\n  // or something, and the array could be a selector\n  movedCards.forEach((movedCard) => {\n    state.cards.push(state.cards.splice(state.cards.indexOf(movedCard), 1)[0]);\n  });\n};\n\nconst endCardMoveReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  let dropTargetCards: ICardDetails[] = [];\n  state.cards\n    .filter((card) => card.id === action.payload || card.selected)\n    .forEach((card) => {\n      card.dragging = false;\n\n      if (!!state.dropTargetCard) {\n        // Add the cards to the drop Target card stack\n        dropTargetCards = dropTargetCards.concat(card.cardStack);\n      }\n    });\n\n  // Now, if there was a drop target card, remove all those cards from the state\n  if (!!state.dropTargetCard) {\n    state.cards = state.cards.filter(\n      (card) => !(card.id === action.payload || card.selected)\n    );\n\n    const dropTargetCard = state.cards.find(\n      (card) => card.id === state.dropTargetCard?.id\n    );\n    if (!!dropTargetCard && dropTargetCards.length > 0) {\n      // add the cards we've collected to the top of the stack\n      dropTargetCard.cardStack = dropTargetCards.concat(\n        dropTargetCard.cardStack\n      );\n    }\n  }\n\n  state.ghostCards = [];\n  state.dropTargetCard = null;\n};\n\nconst selectMultipleCardsReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ ids: string[] }>\n> = (state, action) => {\n  action.payload.ids\n    .map((id) => state.cards.find((card) => card.id === id))\n    .forEach((card) => {\n      if (\n        card &&\n        (card.controlledBy === \"\" ||\n          card.controlledBy === (action as any).ACTOR_REF)\n      ) {\n        card.selected = true;\n        card.controlledBy = (action as any).ACTOR_REF;\n      }\n    });\n};\n\nconst unselectAllCardsReducer: CaseReducer<ICardsState, PayloadAction<any>> = (\n  state,\n  action\n) => {\n  state.cards\n    .filter(\n      (card) =>\n        card.controlledBy === \"\" ||\n        card.controlledBy === (action as any).ACTOR_REF\n    )\n    .forEach((card) => {\n      card.selected = false;\n      card.controlledBy = \"\";\n    });\n};\n\nconst hoverCardReducer: CaseReducer<ICardsState, PayloadAction<string>> = (\n  state,\n  action\n) => {\n  const cardToPreview = state.cards.find((c) => c.id === action.payload);\n  if (!cardToPreview?.faceup) return;\n\n  if (state.previewCard === null) {\n    state.previewCard = {\n      id: action.payload,\n    };\n  } else if (action.payload !== state.previewCard.id) {\n    state.previewCard.id = action.payload;\n  }\n};\n\nconst hoverLeaveCardReducer: CaseReducer<ICardsState> = (state) => {\n  if (state.previewCard !== null) {\n    state.previewCard = null;\n  }\n};\n\nconst togglePanModeReducer: CaseReducer<ICardsState> = (state) => {\n  state.panMode = !state.panMode;\n};\n\nconst flipCardsReducer: CaseReducer<ICardsState> = (state, action) => {\n  state.cards\n    .filter((card) => card.selected)\n    .forEach((card) => {\n      card.faceup = !card.faceup;\n      card.cardStack = card.cardStack.reverse();\n    });\n};\n\nconst resetCardsReducer: CaseReducer<ICardsState> = (state) => {\n  state.cards = [];\n};\n\nconst toggleTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: StatusTokenType; value: boolean }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.statusTokens[action.payload.tokenType] = action.payload.value;\n  }\n};\n\nconst adjustCounterTokenReducer: CaseReducer<\n  ICardsState,\n  PayloadAction<{ id: string; tokenType: CounterTokenType; delta: number }>\n> = (state, action) => {\n  const cardToToggle = state.cards.find((c) => c.id === action.payload.id);\n  if (!!cardToToggle) {\n    cardToToggle.counterTokens[action.payload.tokenType] +=\n      action.payload.delta;\n    if (cardToToggle.counterTokens[action.payload.tokenType] < 0) {\n      cardToToggle.counterTokens[action.payload.tokenType] = 0;\n    }\n  }\n};\n// Selectors\n\n// slice\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: initialState,\n  reducers: {\n    selectCard: selectCardReducer,\n    unselectCard: unselectCardReducer,\n    toggleSelectCard: toggleSelectCardReducer,\n    exhaustCard: exhaustCardReducer,\n    cardMove: cardMoveReducer,\n    endCardMove: endCardMoveReducer,\n    selectMultipleCards: selectMultipleCardsReducer,\n    unselectAllCards: unselectAllCardsReducer,\n    hoverCard: hoverCardReducer,\n    hoverLeaveCard: hoverLeaveCardReducer,\n    togglePanMode: togglePanModeReducer,\n    flipCards: flipCardsReducer,\n    resetCards: resetCardsReducer,\n    toggleToken: toggleTokenReducer,\n    adjustCounterToken: adjustCounterTokenReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.cards = action.payload.cards.present.cards;\n      state.ghostCards = action.payload.cards.present.ghostCards;\n    });\n\n    builder.addCase(replaceCardStack, (state, action) => {\n      const cardToReplaceStack = state.cards.find(\n        (c) => c.id === action.payload.id\n      );\n      if (!!cardToReplaceStack) {\n        cardToReplaceStack.cardStack = action.payload.newStack;\n      }\n    });\n\n    builder.addCase(resetApp, (state) => {\n      state.cards = [];\n      state.previewCard = null;\n      state.dropTargetCard = null;\n      state.ghostCards = [];\n      state.panMode = true;\n    });\n\n    builder.addCase(addCardStackWithId, (state, action) => {\n      const newStack: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.id,\n        cardStack: action.payload.cardJsonIds.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(newStack);\n    });\n\n    builder.addCase(pullCardOutOfCardStackWithId, (state, action) => {\n      const cardStackToUse = state.cards.find(\n        (c) => c.id === action.payload.cardStackId\n      );\n      if (!!cardStackToUse && cardStackToUse.cardStack.length > 1) {\n        const newCardStack: ICardDetails[] = [\n          { jsonId: action.payload.jsonId },\n        ];\n        const newCard = Object.assign({}, cardStackToUse, {\n          cardStack: newCardStack,\n        });\n        newCard.id = action.payload.id;\n        newCard.selected = true;\n        newCard.controlledBy = (action as any).ACTOR_REF;\n        newCard.x = newCard.x + cardConstants.CARD_WIDTH + 5;\n\n        cardStackToUse.cardStack = cardStackToUse.cardStack.filter(\n          (c) => c.jsonId !== action.payload.jsonId\n        );\n        cardStackToUse.selected = false;\n        cardStackToUse.controlledBy = \"\";\n\n        state.cards.push(newCard);\n      }\n    });\n\n    builder.addCase(startCardMoveWithSplitStackId, (state, action) => {\n      // first, if the card moving isn't currently selected, clear all _our_ selected cards\n      const cardToStartMoving = getCardStackWithId(state, action.payload.id);\n      if (cardToStartMoving && !cardToStartMoving.selected) {\n        state.cards = state.cards.map((card) => {\n          if (\n            card.controlledBy === \"\" ||\n            card.controlledBy === (action as any).ACTOR_REF\n          ) {\n            card.selected = card.id === action.payload.id;\n            if (card.selected) {\n              card.controlledBy = (action as any).ACTOR_REF;\n            } else {\n              card.controlledBy = \"\";\n            }\n          }\n          return card;\n        });\n      }\n\n      // If we are splitting, make a new stack of cards\n      if (action.payload.splitTopCard) {\n        const cardToMove = state.cards.find((c) => c.id === action.payload.id);\n\n        if (!cardToMove) {\n          throw new Error(\"Expected to find card\");\n        }\n\n        cardToMove.selected = false;\n        cardToMove.controlledBy = \"\";\n\n        const topCard = cardToMove.cardStack.shift();\n        const newCard = Object.assign({}, cardToMove, {\n          selected: true,\n          controlledBy: (action as any).ACTOR_REF,\n          dragging: true,\n          cardStack: [topCard],\n        });\n\n        cardToMove.id = action.payload.splitCardId;\n\n        state.cards.push(newCard);\n      }\n\n      // Now all selected cards should be put into ghost cards, unless we are splitting the top card\n      state.ghostCards = [];\n\n      if (!action.payload.splitTopCard) {\n        foreachSelectedAndControlledCard(\n          state,\n          (action as any).ACTOR_REF,\n          (card) => {\n            card.dragging = true;\n            state.ghostCards.push(Object.assign({}, card));\n          }\n        );\n      }\n\n      //Finally, if we have a preview card, clear it\n      state.previewCard = null;\n    });\n\n    builder.addCase(fetchDecklistById.fulfilled, (state, action) => {\n      console.log(\"got decklist\");\n      console.log(action);\n\n      const heroCard: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.heroId,\n        cardStack: [{ jsonId: action.payload.data.investigator_code }],\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      let mainDeckStack: ICardDetails[] = [];\n      Object.entries(action.payload.data.slots).forEach(([key, value]) => {\n        const cardDetails: ICardDetails[] = Array.from(Array(value).keys()).map(\n          (): ICardDetails => ({ jsonId: key })\n        );\n        mainDeckStack = mainDeckStack.concat(cardDetails);\n      });\n\n      const cardPadding = cardConstants.CARD_WIDTH + 10;\n\n      const newDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.dataId,\n        cardStack: mainDeckStack,\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const encounterDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 2,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.encounterDeckId,\n        cardStack: action.payload.relatedEncounterDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      const obligationDeck: ICardStack = {\n        controlledBy: \"\",\n        x: action.payload.position.x + cardPadding * 3,\n        y: action.payload.position.y,\n        dragging: false,\n        exhausted: false,\n        faceup: true,\n        fill: \"red\",\n        id: action.payload.obligationDeckId,\n        cardStack: action.payload.relatedObligationDeck.map((jsonId) => ({\n          jsonId,\n        })),\n        selected: false,\n        statusTokens: {\n          stunned: false,\n          confused: false,\n          tough: false,\n        },\n        counterTokens: {\n          damage: 0,\n          threat: 0,\n          generic: 0,\n        },\n      };\n\n      state.cards.push(heroCard, newDeck, encounterDeck, obligationDeck);\n    });\n  },\n});\n\nexport const {\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  exhaustCard,\n  cardMove,\n  endCardMove,\n  selectMultipleCards,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  resetCards,\n  toggleToken,\n  adjustCounterToken,\n} = cardsSlice.actions;\n\nexport default cardsSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { ICardDetails } from \"./initialState\";\n\nexport interface AddCardStackWithIdPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n  id: string;\n}\n\nexport interface PullCardOutOfCardStackWithIdPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n  id: string;\n}\n\nexport interface StartCardMoveWithSplitStackIdPayload {\n  id: string;\n  splitTopCard: boolean;\n  splitCardId: string;\n}\n\nexport interface ReplaceCardStackPayload {\n  id: string;\n  newStack: ICardDetails[];\n}\n\nexport const addCardStackWithId = createAction<AddCardStackWithIdPayload>(\n  \"addCardStackWithId\"\n);\n\nexport const pullCardOutOfCardStackWithId = createAction<PullCardOutOfCardStackWithIdPayload>(\n  \"pullCardOutOfCardStackWithId\"\n);\n\nexport const startCardMoveWithSplitStackId = createAction<StartCardMoveWithSplitStackIdPayload>(\n  \"startCardMoveWithSplitStackId\"\n);\n\nexport const replaceCardStack = createAction<ReplaceCardStackPayload>(\n  \"replaceCardStack\"\n);\n","import { Action, createAsyncThunk, ThunkAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { Vector2d } from \"konva/types/types\";\nimport { RootState } from \"../../store/rootReducer\";\nimport {\n  getCardsDataEncounterEntities,\n  getCardsDataHeroEntities,\n} from \"../cards-data/cards-data.selectors\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  addCardStackWithId,\n  pullCardOutOfCardStackWithId,\n  replaceCardStack,\n  startCardMoveWithSplitStackId,\n} from \"./cards.actions\";\nimport { ICardDetails } from \"./initialState\";\nimport { getCards } from \"./cards.selectors\";\n\ninterface AddCardStackPayload {\n  cardJsonIds: string[];\n  position: Vector2d;\n}\n\nexport interface PullCardOutOfCardStackPayload {\n  cardStackId: string;\n  jsonId: string;\n  pos: Vector2d;\n}\n\nexport interface StartCardMovePayload {\n  id: string;\n  splitTopCard: boolean;\n}\n\nexport const shuffleStack = (\n  id: string\n): ThunkAction<void, RootState, unknown, Action<string>> => (\n  dispatch,\n  getState\n) => {\n  const cardsState = getCards(getState());\n  const stackToShuffle = cardsState.cards.find((c) => c.id === id);\n  if (!!stackToShuffle) {\n    const shuffledStack = shuffle(stackToShuffle.cardStack);\n    dispatch(replaceCardStack({ id, newStack: shuffledStack }));\n  }\n};\n\nexport const addCardStack = (\n  payload: AddCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(addCardStackWithId(payloadWithId));\n};\n\nexport const pullCardOutOfCardStack = (\n  payload: PullCardOutOfCardStackPayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    id: uuidv4(),\n  };\n  dispatch(pullCardOutOfCardStackWithId(payloadWithId));\n};\n\nexport const startCardMove = (\n  payload: StartCardMovePayload\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    ...payload,\n    splitCardId: uuidv4(),\n  };\n  dispatch(startCardMoveWithSplitStackId(payloadWithId));\n};\n\nexport const fetchDecklistById = createAsyncThunk(\n  \"decklist/fetchByIdStatus\",\n  async (payload: { decklistId: number; position: Vector2d }, thunkApi) => {\n    const response = await axios.get(\n      `https://marvelcdb.com/api/public/decklist/${payload.decklistId}`\n    );\n    const state: RootState = thunkApi.getState() as RootState;\n    const heroCardsData = getCardsDataHeroEntities(state);\n    const heroSetCode = heroCardsData[response.data.investigator_code].set_code;\n    const encounterCardsData = getCardsDataEncounterEntities(state);\n\n    const heroObligationDeck = Object.entries(encounterCardsData)\n      .filter(\n        ([_key, value]) =>\n          value.set_code === `${heroSetCode}` &&\n          value.type_code === \"obligation\"\n      )\n      .map(([key, _value]) => key);\n\n    const heroEncounterDeck = Object.entries(encounterCardsData)\n      .filter(([_key, value]) => value.set_code === `${heroSetCode}_nemesis`)\n      .map(([key, _value]) => key);\n    // get the encounter cards for this deck\n    return {\n      position: payload.position,\n      heroId: uuidv4(),\n      data: response.data,\n      dataId: uuidv4(),\n      relatedEncounterDeck: heroEncounterDeck,\n      encounterDeckId: uuidv4(),\n      relatedObligationDeck: heroObligationDeck,\n      obligationDeckId: uuidv4(),\n    };\n  }\n);\n\nconst shuffle = (array: ICardDetails[]): ICardDetails[] => {\n  const returnArray = JSON.parse(JSON.stringify(array));\n  var currentIndex = returnArray.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = returnArray[currentIndex];\n    returnArray[currentIndex] = returnArray[randomIndex];\n    returnArray[randomIndex] = temporaryValue;\n  }\n\n  return returnArray;\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"./rootReducer\";\n\nexport const resetApp = createAction(\"resetAction\");\n\nexport const receiveRemoteGameState = createAction<RootState>(\n  \"receiveRemoteGameState\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./TopLayer.scss\";\n\ninterface IProps {\n  position: Vector2d;\n  completed: () => void;\n}\n\nclass TopLayer extends Component<IProps> {\n  render() {\n    const containerStyle: React.CSSProperties = {\n      top: `${this.props.position.y + 8}px`,\n      left: `${this.props.position.x + 8}px`,\n    };\n    return (\n      <div\n        id=\"top-layer\"\n        onClick={this.props.completed}\n        onContextMenu={this.preventDefault}\n      >\n        <div\n          className=\"top-layer-content-wrapper\"\n          style={containerStyle}\n          onContextMenu={this.preventDefault}\n          onClick={this.handleClick}\n        >\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation();\n    this.props.completed();\n  };\n\n  private preventDefault = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n  };\n}\n\nexport default TopLayer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardData } from \"./external-api/marvel-card-data\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport { ICardStack } from \"./features/cards/initialState\";\ninterface IProps {\n  cardsDataEntities: ICardData;\n  card: ICardStack;\n  cardSelected: (jsonId: string) => void;\n}\n\nclass CardStackCardSelector extends Component<IProps> {\n  private cardsDataInStack: CardData[] = [];\n\n  constructor(props: IProps) {\n    super(props);\n    this.cardsDataInStack = props.card.cardStack.map((c) => {\n      return this.props.cardsDataEntities[c.jsonId];\n    });\n  }\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <Autocomplete\n          id=\"cardstack-card-selector-combobox\"\n          options={this.cardsDataInStack}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 300 }}\n          onChange={this.handleSelected}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Find Card...\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n    );\n  }\n\n  private handleSelected = (_event: any, value: CardData | null) => {\n    if (!!value && !!this.props.cardSelected) {\n      this.props.cardSelected(value.code);\n    }\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default CardStackCardSelector;\n","import { connect } from \"react-redux\";\nimport CardStackCardSelector from \"./CardStackCardSelector\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\n\nimport { RootState } from \"./store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cardsDataEntities: getCardsDataEntities(state),\n  };\n};\n\nconst CardStackCardSelectorContainer = connect(\n  mapStateToProps,\n  {}\n)(CardStackCardSelector);\n\nexport default CardStackCardSelectorContainer;\n","import { Component } from \"react\";\nimport * as React from \"react\";\nimport { Vector2d } from \"konva/types/types\";\nimport { Group, Rect, Text } from \"react-konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\n\ninterface IProps {\n  id: string;\n  pos: Vector2d;\n  value: number;\n  updateCounterValueBy: (amount: number) => void;\n  handleContextMenu: (event: KonvaEventObject<PointerEvent>) => void;\n  onDragEnd: (event: KonvaEventObject<DragEvent>) => void;\n}\n\nclass Counter extends Component<IProps> {\n  render() {\n    return (\n      <Group\n        x={this.props.pos.x}\n        y={this.props.pos.y}\n        draggable={true}\n        onContextMenu={this.props.handleContextMenu}\n        onDragEnd={this.props.onDragEnd}\n      >\n        <Rect cornerRadius={30} width={200} height={100} fill={\"red\"}></Rect>\n        <Text\n          width={200}\n          height={100}\n          fontSize={36}\n          text={`${this.props.value}`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n        ></Text>\n        <Text\n          x={10}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`-`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleDecrement}\n        ></Text>\n        <Text\n          x={140}\n          y={25}\n          width={50}\n          height={50}\n          fontSize={36}\n          text={`+`}\n          align={\"center\"}\n          verticalAlign={\"middle\"}\n          onClick={this.handleIncrement}\n        ></Text>\n      </Group>\n    );\n  }\n\n  private handleDecrement = () => {\n    this.props.updateCounterValueBy(-1);\n  };\n\n  private handleIncrement = () => {\n    this.props.updateCounterValueBy(1);\n  };\n}\n\nexport default Counter;\n","import { Component } from \"react\";\nimport * as React from \"react\";\ninterface IProps {\n  connect: (peerId: string) => void;\n}\n\nclass PeerConnector extends Component<IProps> {\n  public inputRef: HTMLInputElement | null = null;\n\n  render() {\n    return (\n      <div onClick={this.cancelBubble}>\n        <input\n          ref={(ref) => {\n            if (!ref) return;\n            this.inputRef = ref;\n          }}\n        ></input>\n        <button onClick={this.connect}>Connect</button>\n      </div>\n    );\n  }\n\n  private connect = (_event: any) => {\n    console.log(\"connecting with peer id \" + this.inputRef?.value);\n\n    this.props.connect(this.inputRef?.value || \"\");\n  };\n\n  private cancelBubble = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n  };\n}\n\nexport default PeerConnector;\n","export const MISSING_CARD_IMAGE_MAP: { [key: string]: string } = {\n  //   \"11001\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_1.jpg\",\n  //   \"11002\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_2.jpg\",\n  //   \"11003\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_3.jpg\",\n  //   \"11028\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_28.jpg\",\n  //   \"11034\": \"https://lcgcdn.s3.amazonaws.com/mc/MC11en_34.jpg\",\n};\n","import { ReactReduxContext, Provider } from \"react-redux\";\nimport * as Intersects from \"intersects\";\nimport Konva from \"konva\";\nimport { KonvaEventObject } from \"konva/types/Node\";\nimport { Vector2d } from \"konva/types/types\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport { Layer, Rect, Stage } from \"react-konva\";\nimport \"./App.scss\";\nimport Card, { HORIZONTAL_TYPE_CODES } from \"./Card\";\nimport { cardConstants } from \"./constants/card-constants\";\nimport ContextMenu, { ContextMenuItem } from \"./ContextMenu\";\nimport DeckLoader from \"./DeckLoader\";\nimport EncounterLoaderContainer from \"./EncounterLoaderContainer\";\nimport { ICardData } from \"./features/cards-data/initialState\";\nimport {\n  CounterTokenType,\n  StatusTokenType,\n} from \"./features/cards/cards.slice\";\nimport { ICardsState, ICardStack } from \"./features/cards/initialState\";\nimport { IGameState } from \"./features/game/initialState\";\nimport TopLayer from \"./TopLayer\";\nimport { getDistance } from \"./utilities/geo\";\nimport CardStackCardSelectorContainer from \"./CardStackCardSelectorContainer\";\nimport Counter from \"./Counter\";\nimport PeerConnector from \"./PeerConnector\";\nimport { PlayerColor } from \"./constants/app-constants\";\nimport { ICounter } from \"./features/counters/initialState\";\nimport { MISSING_CARD_IMAGE_MAP } from \"./constants/card-missing-image-map\";\nimport { CardData } from \"./external-api/marvel-card-data\";\n\nconst SCALE_BY = 1.02;\n\ninterface IProps {\n  cards: ICardsState;\n  cardsData: ICardData;\n  gameState: IGameState;\n  showPreview: boolean;\n  panMode: boolean;\n  playerColors: { [key: string]: PlayerColor };\n  cardMove: (info: { id: string; dx: number; dy: number }) => void;\n  endCardMove: (id: string) => void;\n  exhaustCard: (id: string) => void;\n  selectCard: (payload: { id: string; unselectOtherCards: boolean }) => void;\n  unselectCard: (id: string) => void;\n  toggleSelectCard: (id: string) => void;\n  startCardMove: (payload: { id: string; splitTopCard: boolean }) => void;\n  unselectAllCards: (payload?: any) => void;\n  selectMultipleCards: (cards: { ids: string[] }) => void;\n  hoverCard: (id: string) => void;\n  hoverLeaveCard: (id: string) => void;\n  togglePanMode: () => void;\n  flipCards: () => void;\n  loadCardsData: () => void;\n  shuffleStack: (id: string) => void;\n  fetchDecklistById: (payload: {\n    decklistId: number;\n    position: Vector2d;\n  }) => void;\n  updateZoom: (zoom: Vector2d) => void;\n  updatePosition: (pos: Vector2d) => void;\n  resetApp: () => void;\n  addCardStack: (payload: {\n    cardJsonIds: string[];\n    position: Vector2d;\n  }) => void;\n  toggleToken: (payload: {\n    id: string;\n    tokenType: StatusTokenType;\n    value: boolean;\n  }) => void;\n  adjustCounterToken: (payload: {\n    id: string;\n    tokenType: CounterTokenType;\n    delta: number;\n  }) => void;\n  pullCardOutOfCardStack: (payload: {\n    cardStackId: string;\n    jsonId: string;\n    pos: Vector2d;\n  }) => void;\n  addNewCounter: (pos: Vector2d) => void;\n  updateCounterValue: (payload: { id: string; delta: number }) => void;\n  removeCounter: (id: string) => void;\n  moveCounter: (payload: { id: string; newPos: Vector2d }) => void;\n  connectToRemoteGame: (peerId: string) => void;\n  undo: () => void;\n  redo: () => void;\n  counters: ICounter[];\n}\n\ninterface IState {\n  drewASelectionRect: boolean;\n  selectRect: {\n    height: number;\n    width: number;\n  };\n  selectStartPos: {\n    x: number;\n    y: number;\n  };\n  selecting: boolean;\n  showContextMenu: boolean;\n  contextMenuPosition: Vector2d | null;\n  contextMenuItems: ContextMenuItem[];\n  showDeckImporter: boolean;\n  deckImporterPosition: Vector2d | null;\n  showEncounterImporter: boolean;\n  encounterImporterPosition: Vector2d | null;\n  showCardSearch: boolean;\n  cardSearchPosition: Vector2d | null;\n  cardStackForSearching: ICardStack | null;\n  showPeerConnector: boolean;\n  peerConnectorPosition: Vector2d | null;\n}\nclass App extends Component<IProps, IState> {\n  public stage: Konva.Stage | null = null;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selectStartPos: {\n        x: 0,\n        y: 0,\n      },\n      selecting: false,\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n      showDeckImporter: false,\n      deckImporterPosition: null,\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    };\n  }\n\n  public componentDidMount() {\n    this.props.loadCardsData();\n  }\n\n  public render() {\n    const staticCards = this.props.cards.cards\n      .filter((card) => !card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            code={this.getCardCode(card)}\n            name={this.getCardName(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dropTarget={card.id === this.props.cards.dropTargetCard?.id}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            handleDoubleClick={this.handleSelectAndExhaust}\n            handleClick={this.handleCardClick(card)}\n            handleHover={this.props.hoverCard}\n            handleHoverLeave={this.props.hoverLeaveCard}\n            handleContextMenu={this.handleCardContextMenu}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n            cardState={{\n              stunned: card.statusTokens.stunned,\n              confused: card.statusTokens.confused,\n              tough: card.statusTokens.tough,\n              tokens: { damage: 0, threat: 0, generic: 0 },\n            }}\n          />\n        );\n      });\n\n    const ghostCards = this.props.cards.ghostCards.map((card) => {\n      return (\n        <Card\n          name={this.getCardName(card)}\n          code={this.getCardCode(card)}\n          selectedColor={this.props.playerColors[card.controlledBy] ?? \"black\"}\n          controlledBy={card.controlledBy}\n          key={`ghost${card.id}`}\n          id={card.id}\n          x={card.x}\n          y={card.y}\n          exhausted={card.exhausted}\n          fill={card.fill}\n          selected={false}\n          dragging={false}\n          imgUrls={this.getImgUrls(card)}\n          typeCode={this.getCardType(card)}\n          faceup={card.faceup}\n          isGhost={true}\n        />\n      );\n    });\n\n    const movingCards = this.props.cards.cards\n      .filter((card) => card.dragging)\n      .map((card) => {\n        return (\n          <Card\n            name={this.getCardName(card)}\n            code={this.getCardCode(card)}\n            selectedColor={\n              this.props.playerColors[card.controlledBy] ?? \"black\"\n            }\n            controlledBy={card.controlledBy}\n            key={card.id}\n            id={card.id}\n            x={card.x}\n            y={card.y}\n            exhausted={card.exhausted}\n            fill={card.fill}\n            selected={card.selected}\n            dragging={card.dragging}\n            handleDragStart={this.handleCardDragStart}\n            handleDragMove={this.props.cardMove}\n            handleDragEnd={this.props.endCardMove}\n            imgUrls={this.getImgUrls(card)}\n            typeCode={this.getCardType(card)}\n            faceup={card.faceup}\n            numCardsInStack={card.cardStack.length}\n          />\n        );\n      });\n\n    const previewCards = this.stage\n      ? this.props.cards.cards\n          .filter(\n            (card) =>\n              !this.state.selecting &&\n              this.props.showPreview &&\n              !!this.props.cards.previewCard &&\n              card.id === this.props.cards.previewCard.id\n          )\n          .map((card) => {\n            const rawPos = this.getRawPreviewCardPosition();\n            const previewPos = this.getRelativePositionFromTarget(\n              this.stage,\n              rawPos\n            );\n            return (\n              <Card\n                name={this.getCardName(card)}\n                code={this.getCardCode(card)}\n                selectedColor={\n                  this.props.playerColors[card.controlledBy] ?? \"black\"\n                }\n                controlledBy={card.controlledBy}\n                key={`preview${card.id}`}\n                id={card.id}\n                x={previewPos.x}\n                y={previewPos.y}\n                exhausted={HORIZONTAL_TYPE_CODES.includes(\n                  this.getCardType(card)\n                )}\n                fill={card.fill}\n                selected={false}\n                dragging={false}\n                imgUrls={this.getImgUrls(card)}\n                typeCode={this.getCardType(card)}\n                faceup={card.faceup}\n                height={cardConstants.CARD_PREVIEW_HEIGHT}\n                width={cardConstants.CARD_PREVIEW_WIDTH}\n              />\n            );\n          })\n      : [];\n\n    return (\n      <div\n        tabIndex={1}\n        onKeyDown={this.handleKeyDown}\n        onKeyPress={this.handleKeyPress}\n      >\n        {this.renderEmptyMessage()}\n        {this.renderContextMenu()}\n        {this.renderDeckImporter()}\n        {this.renderEncounterImporter()}\n        {this.renderCardSearch()}\n        {this.renderPeerConnector()}\n        <ReactReduxContext.Consumer>\n          {({ store }) => (\n            <Stage\n              ref={(ref) => {\n                if (!ref) return;\n\n                this.stage = ref;\n              }}\n              x={this.props.gameState.stagePosition.x}\n              y={this.props.gameState.stagePosition.y}\n              width={window.innerWidth}\n              height={window.innerHeight}\n              onClick={this.handleStageClickOrTap}\n              onTap={this.handleStageClickOrTap}\n              onMouseDown={\n                this.props.panMode ? this.noOp : this.handleMouseDown\n              }\n              onMouseUp={this.props.panMode ? this.noOp : this.handleMouseUp}\n              onMouseMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onTouchMove={\n                this.props.panMode ? this.noOp : this.handleMouseMove\n              }\n              onContextMenu={this.handleContextMenu}\n              scale={this.props.gameState.stageZoom}\n              onWheel={this.handleWheel}\n              draggable={this.props.panMode}\n              onDragMove={this.noOp}\n              onDragEnd={this.noOp}\n              preventDefault={true}\n            >\n              <Provider store={store}>\n                <Layer>\n                  {this.props.counters.map((counter) => (\n                    <Counter\n                      key={`${counter.id}-counter`}\n                      id={counter.id}\n                      pos={counter.position}\n                      value={counter.value}\n                      updateCounterValueBy={this.handleCounterValueUpdate(\n                        counter.id\n                      )}\n                      handleContextMenu={this.handleCounterContextMenu(\n                        counter.id\n                      )}\n                      onDragEnd={this.handleCounterDrag(counter.id)}\n                    ></Counter>\n                  ))}\n                </Layer>\n                <Layer preventDefault={true}>\n                  {staticCards\n                    .concat(ghostCards)\n                    .concat(movingCards)\n                    .concat(previewCards)}\n                </Layer>\n                <Layer>\n                  <Rect\n                    x={this.state.selectStartPos.x}\n                    y={this.state.selectStartPos.y}\n                    width={this.state.selectRect.width}\n                    height={this.state.selectRect.height}\n                    stroke=\"black\"\n                  />\n                </Layer>\n              </Provider>\n            </Stage>\n          )}\n        </ReactReduxContext.Consumer>\n      </div>\n    );\n  }\n\n  private handleCounterValueUpdate = (id: string) => (delta: number) => {\n    this.props.updateCounterValue({ id, delta });\n  };\n\n  private handleCounterDrag = (id: string) => (\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    this.props.moveCounter({\n      id,\n      newPos: {\n        x: event.target.x(),\n        y: event.target.y(),\n      },\n    });\n  };\n\n  private noOp = () => {};\n\n  private renderEmptyMessage = () => {\n    if (this.props.cards.cards.length > 0) return null;\n\n    return (\n      <div>\n        Right click and select 'Load Deck ID' to load a deck from marvelcdb.com\n      </div>\n    );\n  };\n\n  private renderContextMenu = () => {\n    if (!this.state.showContextMenu) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.contextMenuPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing context menu position\");\n    }\n\n    return (\n      <ContextMenu\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        items={this.state.contextMenuItems}\n        hideContextMenu={() => this.clearContextMenu()}\n      ></ContextMenu>\n    );\n  };\n\n  private renderDeckImporter = () => {\n    if (!this.state.showDeckImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.deckImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    return (\n      <TopLayer\n        position={{\n          x: containerRect.left + pointerPosition.x,\n          y: containerRect.top + pointerPosition.y,\n        }}\n        completed={this.clearDeckImporter}\n      >\n        <DeckLoader\n          loadDeckId={this.handleImportDeck(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderEncounterImporter = () => {\n    if (!this.state.showEncounterImporter) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.encounterImporterPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing deck importer position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return (\n      <TopLayer position={pos} completed={this.clearEncounterImporter}>\n        <EncounterLoaderContainer\n          loadCards={this.handleLoadEncounter(\n            this.getRelativePositionFromTarget(this.stage)\n          )}\n        />\n      </TopLayer>\n    );\n  };\n\n  private renderCardSearch = () => {\n    if (!this.state.showCardSearch) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.cardSearchPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing card search position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.cardStackForSearching ? (\n      <TopLayer position={pos} completed={this.clearCardSearch}>\n        <CardStackCardSelectorContainer\n          card={this.state.cardStackForSearching}\n          cardSelected={this.handleCardSelectedFromCardStack(\n            this.state.cardStackForSearching.id,\n            pos\n          )}\n        />\n      </TopLayer>\n    ) : null;\n  };\n\n  private renderPeerConnector = () => {\n    if (!this.state.showPeerConnector) return null;\n\n    const containerRect = this.stage?.container().getBoundingClientRect();\n    const pointerPosition = this.state.peerConnectorPosition;\n    if (!containerRect || !pointerPosition) {\n      throw new Error(\"Problem computing peer connector position\");\n    }\n\n    const pos = {\n      x: containerRect.left + pointerPosition.x,\n      y: containerRect.top + pointerPosition.y,\n    };\n\n    return !!this.state.showPeerConnector ? (\n      <TopLayer position={pos} completed={this.clearPeerConnector}>\n        <PeerConnector connect={this.handlePeerConnect}></PeerConnector>\n      </TopLayer>\n    ) : null;\n  };\n\n  private handleLoadEncounter = (position: Vector2d) => (cards: string[]) => {\n    this.clearEncounterImporter();\n    this.props.addCardStack({ position, cardJsonIds: cards });\n  };\n\n  private handleImportDeck = (position: Vector2d) => (id: number) => {\n    this.clearDeckImporter();\n    this.props.fetchDecklistById({ decklistId: id, position });\n  };\n\n  private handlePeerConnect = (peerId: string) => {\n    this.clearPeerConnector();\n    this.props.connectToRemoteGame(peerId);\n  };\n\n  private handleCardSelectedFromCardStack = (\n    cardStackId: string,\n    pos: Vector2d\n  ) => (jsonId: string) => {\n    this.clearCardSearch();\n    this.props.pullCardOutOfCardStack({ cardStackId, jsonId, pos });\n  };\n\n  private clearContextMenu = () => {\n    this.setState({\n      showContextMenu: false,\n      contextMenuPosition: null,\n      contextMenuItems: [],\n    });\n  };\n\n  private clearDeckImporter = () => {\n    this.setState({\n      showDeckImporter: false,\n      deckImporterPosition: null,\n    });\n  };\n\n  private clearEncounterImporter = () => {\n    this.setState({\n      showEncounterImporter: false,\n      encounterImporterPosition: null,\n    });\n  };\n\n  private clearCardSearch = () => {\n    this.setState({\n      showCardSearch: false,\n      cardSearchPosition: null,\n      cardStackForSearching: null,\n    });\n  };\n\n  private clearPeerConnector = () => {\n    this.setState({\n      showPeerConnector: false,\n      peerConnectorPosition: null,\n    });\n  };\n\n  private handleStageClickOrTap = (event: KonvaEventObject<MouseEvent>) => {\n    const mousePos = this.getRelativePositionFromTarget(this.stage);\n    if (\n      this.props.panMode ||\n      getDistance(this.state.selectStartPos, mousePos) < 30\n    ) {\n      this.props.unselectAllCards();\n    }\n  };\n\n  private handleWheel = (event: KonvaEventObject<WheelEvent>) => {\n    event.evt.preventDefault();\n\n    if (!this.stage) return;\n\n    var oldScale = this.props.gameState.stageZoom.x;\n\n    const pointer = this.stage.getPointerPosition() ?? { x: 0, y: 0 };\n\n    const mousePointTo = {\n      x: (pointer.x - this.stage.x()) / oldScale,\n      y: (pointer.y - this.stage.y()) / oldScale,\n    };\n\n    const newScale =\n      event.evt.deltaY < 0 ? oldScale * SCALE_BY : oldScale / SCALE_BY;\n\n    this.props.updateZoom({ x: newScale, y: newScale });\n\n    const newPos = {\n      x: pointer.x - mousePointTo.x * newScale,\n      y: pointer.y - mousePointTo.y * newScale,\n    };\n\n    this.props.updatePosition(newPos);\n  };\n\n  private handleCounterContextMenu = (counterId: string) => (\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Remove\",\n        action: () => {\n          this.props.removeCounter(counterId);\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardContextMenu = (\n    cardId: string,\n    event: KonvaEventObject<PointerEvent>\n  ) => {\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    // First, select the card\n    this.props.selectCard({ id: cardId, unselectOtherCards: false });\n\n    const card = this.props.cards.cards.find((c) => c.id === cardId);\n    const numCardsInStack = card?.cardStack?.length || 0;\n    const currentStatusTokens = card?.statusTokens || {\n      stunned: false,\n      confused: false,\n      tough: false,\n    };\n\n    const menuItems = [\n      {\n        label: \"Flip\",\n        action: () => {\n          this.props.flipCards();\n        },\n      },\n    ];\n\n    if (numCardsInStack > 1) {\n      menuItems.push({\n        label: \"Shuffle\",\n        action: () => {\n          this.props.shuffleStack(cardId);\n        },\n      });\n\n      menuItems.push({\n        label: \"Find Specific Card\",\n        action: () => {\n          if (!!card) {\n            this.setState({\n              showCardSearch: true,\n              cardSearchPosition: this.stage?.getPointerPosition() ?? null,\n              cardStackForSearching: card,\n            });\n          }\n        },\n      });\n    }\n\n    menuItems.push({\n      label: !!currentStatusTokens.stunned ? \"Remove Stun\" : \"Stun\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Stunned,\n          value: !currentStatusTokens.stunned,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.confused ? \"Remove Confused\" : \"Confuse\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Confused,\n          value: !currentStatusTokens.confused,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: !!currentStatusTokens.tough ? \"Remove Tough\" : \"Tough\",\n      action: () => {\n        this.props.toggleToken({\n          id: card?.id || \"\",\n          tokenType: StatusTokenType.Tough,\n          value: !currentStatusTokens.tough,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Damage\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Damage,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Threat\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Threat,\n          delta: -1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Add 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: 1,\n        });\n      },\n    });\n\n    menuItems.push({\n      label: \"Remove 1 Generic Token\",\n      action: () => {\n        this.props.adjustCounterToken({\n          id: card?.id || \"\",\n          tokenType: CounterTokenType.Generic,\n          delta: -1,\n        });\n      },\n    });\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private handleCardClick = (card: ICardStack) => (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n\n    if (card.selected && modifierKeyHeld) {\n      this.props.toggleSelectCard(cardId);\n    } else {\n      this.props.selectCard({\n        id: cardId,\n        unselectOtherCards: !modifierKeyHeld,\n      });\n    }\n  };\n\n  private handleSelectAndExhaust = (\n    cardId: string,\n    event: KonvaEventObject<MouseEvent>\n  ) => {\n    // Here check if modifier held down\n    const modifierKeyHeld =\n      event.evt.shiftKey || event.evt.metaKey || event.evt.ctrlKey;\n    this.props.selectCard({ id: cardId, unselectOtherCards: !modifierKeyHeld });\n    this.props.exhaustCard(cardId);\n  };\n\n  private handleCardDragStart = (\n    cardId: string,\n    event: KonvaEventObject<DragEvent>\n  ) => {\n    let splitTopCard = false;\n    // If multiple things are selected, you can't pull something off the top of a stack,\n    // so just do a normal drag\n    const multipleSelected =\n      this.props.cards.cards.filter((c) => c.selected).length > 1;\n\n    if (!multipleSelected) {\n      const draggingCard = this.props.cards.cards.find((c) => c.id === cardId);\n      const hasStack = (draggingCard?.cardStack || []).length > 1;\n      if (!!draggingCard && hasStack) {\n        // Check if we're dragging in the upper right corner of the card\n        const upperRightPoint = {\n          x: draggingCard.x + cardConstants.CARD_WIDTH / 2,\n          y: draggingCard.y - cardConstants.CARD_HEIGHT / 2,\n        };\n        const distance = getDistance(\n          upperRightPoint,\n          this.getRelativePositionFromTarget(this.stage)\n        );\n        if (distance < 30) {\n          splitTopCard = true;\n        }\n      }\n    }\n\n    this.props.startCardMove({ id: cardId, splitTopCard });\n  };\n\n  private handleKeyPress = (event: React.KeyboardEvent<HTMLElement>) => {\n    const code = event.which || event.keyCode;\n    if (code === 115) {\n      this.props.togglePanMode();\n    } else if (code === 102) {\n      this.props.flipCards();\n    }\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (\n      event.shiftKey &&\n      (event.ctrlKey || event.metaKey) &&\n      event.key === \"z\"\n    ) {\n      this.props.redo();\n    } else if ((event.ctrlKey || event.metaKey) && event.key === \"z\") {\n      event.preventDefault();\n      this.props.undo();\n    }\n  };\n\n  private getRawPreviewCardPosition = (): Vector2d => {\n    const pointerPos = this.stage?.getPointerPosition() ?? { x: 0, y: 0 };\n    const screenMidPointX = window.innerWidth / 2;\n    return pointerPos.x < screenMidPointX\n      ? {\n          x: window.innerWidth - cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        }\n      : {\n          x: cardConstants.CARD_PREVIEW_WIDTH / 2,\n          y: cardConstants.CARD_PREVIEW_HEIGHT / 2,\n        };\n  };\n\n  private getRelativePositionFromTarget = (\n    target: any,\n    posParam?: Vector2d\n  ) => {\n    const transform = target.getAbsoluteTransform().copy();\n    transform.invert();\n    let pos = posParam || target.getPointerPosition();\n    return transform.point(pos) as Vector2d;\n  };\n\n  private handleMouseDown = (event: KonvaEventObject<MouseEvent>) => {\n    if (event.evt.button === 0) {\n      // Only do something if it's the primary button (not a right-click)\n      const pos = this.getRelativePositionFromTarget(this.stage);\n\n      this.setState({\n        selectStartPos: {\n          x: pos.x,\n          y: pos.y,\n        },\n        selecting: true,\n      });\n    }\n\n    return false;\n  };\n\n  private getSelectionRectInfo = () => {\n    const selectStartPos = this.state.selectStartPos;\n    const selectRect = this.state.selectRect;\n    return {\n      height: Math.abs(selectRect.height),\n      width: Math.abs(selectRect.width),\n      x:\n        selectRect.width < 0\n          ? selectStartPos.x + selectRect.width\n          : selectStartPos.x,\n      y:\n        selectRect.height < 0\n          ? selectStartPos.y + selectRect.height\n          : selectStartPos.y,\n    };\n  };\n\n  private handleMouseUp = () => {\n    // if we were selecting, check for intersection\n    if (this.state.drewASelectionRect) {\n      const selectRect = this.getSelectionRectInfo();\n      const selectedCards: any[] = this.props.cards.cards.reduce<ICardStack[]>(\n        (currSelectedCards, card) => {\n          const intersects = Intersects.boxBox(\n            selectRect.x,\n            selectRect.y,\n            selectRect.width,\n            selectRect.height,\n            card.x - 50,\n            card.y - 75,\n            cardConstants.CARD_WIDTH,\n            cardConstants.CARD_HEIGHT\n          );\n\n          if (intersects) {\n            currSelectedCards.push(card);\n          }\n\n          return currSelectedCards;\n        },\n        []\n      );\n\n      this.props.selectMultipleCards({\n        ids: selectedCards.map((card) => card.id),\n      });\n    }\n\n    this.setState({\n      drewASelectionRect: false,\n      selectRect: {\n        height: 0,\n        width: 0,\n      },\n      selecting: false,\n    });\n\n    return false;\n  };\n\n  private handleMouseMove = (event: any) => {\n    if (this.state.selecting) {\n      const pos = this.getRelativePositionFromTarget(event.currentTarget);\n      this.setState({\n        drewASelectionRect: true,\n        selectRect: {\n          height: pos.y - this.state.selectStartPos.y,\n          width: pos.x - this.state.selectStartPos.x,\n        },\n      });\n    }\n    event.cancelBubble = true;\n  };\n\n  private handleContextMenu = (event: KonvaEventObject<PointerEvent>): void => {\n    console.log(\"HANDLE CONTEXT MENU APP\");\n    event.evt.preventDefault();\n    event.cancelBubble = true;\n\n    const menuItems = [\n      {\n        label: \"Load Deck ID\",\n        action: () => {\n          this.setState({\n            showDeckImporter: true,\n            deckImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Load Encounter\",\n        action: () => {\n          this.setState({\n            showEncounterImporter: true,\n            encounterImporterPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n      {\n        label: \"Create new counter\",\n        action: () => {\n          this.props.addNewCounter(\n            this.getRelativePositionFromTarget(this.stage) ?? { x: 0, y: 0 }\n          );\n        },\n      },\n      { label: \"Reset\", action: this.props.resetApp },\n      {\n        label: \"Connect to Remote Game\",\n        action: () => {\n          this.setState({\n            showPeerConnector: true,\n            peerConnectorPosition: this.stage?.getPointerPosition() ?? null,\n          });\n        },\n      },\n    ];\n\n    this.setState({\n      showContextMenu: true,\n      contextMenuPosition: this.stage?.getPointerPosition() ?? null,\n      contextMenuItems: menuItems,\n    });\n  };\n\n  private getCardType = (card: ICardStack): string => {\n    if (Object.keys(this.props.cardsData).length === 0) return \"\";\n\n    const cardData = this.props.cardsData[card.cardStack[0].jsonId];\n\n    return cardData.type_code;\n  };\n\n  private getCardName = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return this.props.cardsData[cardInQuestion.jsonId]?.name ?? \"\";\n  };\n\n  private getCardCode = (card: ICardStack) => {\n    const cardInQuestion = card.faceup\n      ? card.cardStack[0]\n      : card.cardStack[card.cardStack.length - 1];\n    return this.props.cardsData[cardInQuestion.jsonId]?.code ?? \"code missing\";\n  };\n\n  private checkMissingImageMap(code: string): string | null {\n    return MISSING_CARD_IMAGE_MAP[code] ?? null;\n  }\n\n  private generateLCGCDNImageUrl(card: CardData, faceup: boolean): string {\n    // get the first two digits\n\n    let codeToUse = card.code;\n\n    if (!faceup && !!card.back_link) {\n      codeToUse = card.back_link;\n    }\n\n    const groupCode = codeToUse.substring(0, 2);\n    let cardCode = codeToUse.substring(2);\n\n    //trim leading \"0\" chars\n    while (cardCode[0] === \"0\") {\n      cardCode = cardCode.substring(1);\n    }\n\n    cardCode = cardCode.toLocaleUpperCase();\n\n    let cardSuffix = \"\";\n\n    if (!!card.double_sided) {\n      cardSuffix = faceup ? \"A\" : \"B\";\n    }\n\n    return `https://lcgcdn.s3.amazonaws.com/mc/MC${groupCode}en_${cardCode}${cardSuffix}.jpg`;\n  }\n\n  private getImgUrls = (card: ICardStack): string[] => {\n    if (Object.keys(this.props.cardsData).length === 0) return [];\n\n    let urls: string[] = [];\n\n    const topCardData = this.props.cardsData[card.cardStack[0].jsonId];\n    const bottomCardData = this.props.cardsData[\n      card.cardStack[card.cardStack.length - 1].jsonId\n    ];\n\n    let cardData: CardData | null = topCardData;\n\n    if (\n      !card.faceup &&\n      (!!bottomCardData.back_link || !!bottomCardData.double_sided)\n    ) {\n      cardData = bottomCardData;\n      urls = [\n        this.generateLCGCDNImageUrl(bottomCardData, card.faceup),\n        // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.png`,\n        // `https://marvelcdb.com/bundles/cards/${bottomCardData.back_link}.jpg`,\n        // process.env.PUBLIC_URL +\n        //   \"/images/cards/\" +\n        //   bottomCardData.octgn_id +\n        //   \".b.jpg\",\n      ];\n    } else if (!card.faceup) {\n      cardData = null;\n      urls = [process.env.PUBLIC_URL + \"/images/standard/card_back.png\"];\n    }\n    if (urls.length === 0) {\n      urls = [\n        this.generateLCGCDNImageUrl(topCardData, card.faceup),\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.png`,\n        // `https://marvelcdb.com/bundles/cards/${topCardData.code}.jpg`,\n        // process.env.PUBLIC_URL +\n        //   \"/images/cards/\" +\n        //   topCardData.octgn_id +\n        //   \".jpg\",\n      ];\n    }\n\n    const missingImageOverride = !!cardData\n      ? this.checkMissingImageMap(cardData.code)\n      : null;\n\n    if (!!missingImageOverride) {\n      urls.unshift(missingImageOverride);\n    }\n\n    return urls;\n  };\n}\n\nexport default App;\n","import { createSlice, CaseReducer } from \"@reduxjs/toolkit\";\nimport { initialState, ICardsDataState } from \"./initialState\";\n\nimport * as PackData from \"../../external/generated/packs\";\nimport { CardData } from \"../../external-api/marvel-card-data\";\nimport SetData from \"../../external/marvelsdb-json-data/sets.json\";\n\n// Reducers\nconst loadCardsDataReducer: CaseReducer<ICardsDataState> = (state) => {\n  //This reducer is only intended to be called a single time each load.\n  state.entities = {};\n  state.encounterEntities = {};\n  const heroPacks = Object.entries(PackData)\n    .filter(([key, value]) => !key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  const encounterPacks = Object.entries(PackData)\n    .filter(([key, value]) => key.includes(\"_encounter\"))\n    .map(([key, value]) => value);\n\n  heroPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.entities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code} had no octgn_id!`);\n      // }\n\n      state.entities[card.code] = card;\n    })\n  );\n\n  encounterPacks.forEach((pack) =>\n    pack.forEach((card: CardData) => {\n      if (state.encounterEntities[card.code]) {\n        console.error(\"Found multiple cards with code \" + card.code);\n      }\n\n      // if (!card.octgn_id) {\n      //   console.error(`Card ${card.code}: ${card.name} had no octgn_id!`);\n      // }\n\n      state.encounterEntities[card.code] = card;\n    })\n  );\n\n  SetData.forEach((set) => {\n    state.setData[set.code] = {\n      name: set.name,\n      setTypeCode: set.card_set_type_code,\n    };\n  });\n\n  return state;\n};\n\n// slice\nconst cardsDataSlice = createSlice({\n  name: \"cardsData\",\n  initialState: initialState,\n  reducers: {\n    loadCardsData: loadCardsDataReducer,\n  },\n});\n\nexport const { loadCardsData } = cardsDataSlice.actions;\n\nexport default cardsDataSlice.reducer;\n","import { CardData } from \"../../external-api/marvel-card-data\";\n\nexport interface ICardData {\n  [key: string]: CardData;\n}\n\nexport interface Set {\n  name: string;\n  setTypeCode: string;\n}\n\nexport interface ISetData {\n  [key: string]: Set;\n}\n\nexport interface ICardsDataState {\n  entities: ICardData;\n  encounterEntities: ICardData;\n  setData: ISetData;\n}\n\nexport const initialState: ICardsDataState = {\n  entities: {},\n  encounterEntities: {},\n  setData: {},\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getGame = (state: RootState) => state.game;\n\nexport const getCurrentZoom = createSelector(getGame, (game) => {\n  return game.stageZoom;\n});\n\nexport const getPlayerColors = createSelector(getGame, (game) => {\n  return game.playerColors;\n});\n","import { Vector2d } from \"konva/types/types\";\nimport { myPeerRef, PlayerColor } from \"../../constants/app-constants\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface IGameState {\n  stageZoom: Vector2d;\n  stagePosition: Vector2d;\n  playerColors: { [key: string]: PlayerColor };\n}\n\nconst localStorageState: IGameState = loadState(\"game\");\nlocalStorageState.playerColors = {};\nlocalStorageState.playerColors[myPeerRef] = \"red\";\n\nconst defaultState: IGameState = {\n  playerColors: {},\n  stageZoom: { x: 1, y: 1 },\n  stagePosition: { x: 0, y: 0 },\n};\nexport const initialState: IGameState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { PlayerColor } from \"../../constants/app-constants\";\nimport { resetApp } from \"../../store/global.actions\";\nimport { IGameState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateZoomReducer: CaseReducer<IGameState, PayloadAction<Vector2d>> = (\n  state,\n  action\n) => {\n  state.stageZoom = action.payload;\n  return state;\n};\n\nconst updatePositionReducer: CaseReducer<\n  IGameState,\n  PayloadAction<Vector2d>\n> = (state, action) => {\n  state.stagePosition = action.payload;\n  return state;\n};\n\nconst connectToRemoteGameReducer: CaseReducer<\n  IGameState,\n  PayloadAction<string>\n> = (state, action) => {};\n\nconst setPlayerColorReducer: CaseReducer<\n  IGameState,\n  PayloadAction<{ ref: string; color: PlayerColor }>\n> = (state, action) => {\n  state.playerColors[action.payload.ref] = action.payload.color;\n};\n\n// slice\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    updateZoom: updateZoomReducer,\n    updatePosition: updatePositionReducer,\n    connectToRemoteGame: connectToRemoteGameReducer,\n    setPlayerColor: setPlayerColorReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetApp, (state, action) => {\n      state.stagePosition = { x: 0, y: 0 };\n      state.stageZoom = { x: 1, y: 1 };\n    });\n  },\n});\n\nexport const {\n  updateZoom,\n  updatePosition,\n  connectToRemoteGame,\n  setPlayerColor,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\n\nexport interface AddNewCounterWithIdPayload {\n  pos: Vector2d;\n  id: string;\n}\n\nexport const addNewCounterWithId = createAction<AddNewCounterWithIdPayload>(\n  \"addNewCounterWithId\"\n);\n","import { Vector2d } from \"konva/types/types\";\nimport { loadState } from \"../../store/localStorage\";\n\nexport interface ICountersState {\n  counters: ICounter[];\n}\n\nexport interface ICounter {\n  id: string;\n  position: Vector2d;\n  value: number;\n}\n\nconst localStorageState: ICountersState = loadState(\"counters\");\n\nconst defaultState: ICountersState = {\n  counters: [],\n};\nexport const initialState: ICountersState = {\n  ...defaultState,\n  ...localStorageState,\n};\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Vector2d } from \"konva/types/types\";\nimport { receiveRemoteGameState, resetApp } from \"../../store/global.actions\";\nimport { addNewCounterWithId } from \"./counters.actions\";\nimport { ICountersState, initialState } from \"./initialState\";\n\n// Reducers\nconst updateCounterValueReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; delta: number }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.value += action.payload.delta;\n    if (counter.value < 0) {\n      counter.value = 0;\n    }\n  }\n};\n\nconst removeCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<string>\n> = (state, action) => {\n  state.counters = state.counters.filter((c) => c.id !== action.payload);\n};\n\nconst moveCounterReducer: CaseReducer<\n  ICountersState,\n  PayloadAction<{ id: string; newPos: Vector2d }>\n> = (state, action) => {\n  const counter = state.counters.find((c) => c.id === action.payload.id);\n  if (!!counter) {\n    counter.position = {\n      x: action.payload.newPos.x,\n      y: action.payload.newPos.y,\n    };\n  }\n};\n\n// slice\nconst countersSlice = createSlice({\n  name: \"counters\",\n  initialState: initialState,\n  reducers: {\n    updateCounterValue: updateCounterValueReducer,\n    removeCounter: removeCounterReducer,\n    moveCounter: moveCounterReducer,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(receiveRemoteGameState, (state, action) => {\n      // TODO: find a way to keep this automatic\n      state.counters = action.payload.counters.present.counters;\n    });\n\n    builder.addCase(resetApp, (state, action) => {\n      state.counters = [];\n    });\n\n    builder.addCase(addNewCounterWithId, (state, action) => {\n      state.counters.push({\n        id: action.payload.id,\n        position: action.payload.pos,\n        value: 0,\n      });\n    });\n  },\n});\n\nexport const {\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n} = countersSlice.actions;\n\nexport default countersSlice.reducer;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store/rootReducer\";\n\nexport const getCounters = (state: RootState) => state.counters.present;\n\nexport const getCurrentCounters = createSelector(getCounters, (counters) => {\n  return counters.counters;\n});\n","import { connect } from \"react-redux\";\nimport { ActionCreators } from \"redux-undo\";\nimport App from \"./App\";\nimport { getCardsDataEntities } from \"./features/cards-data/cards-data.selectors\";\nimport { loadCardsData } from \"./features/cards-data/cards-data.slice\";\nimport {\n  getCards,\n  getPanMode,\n  shouldShowPreview,\n} from \"./features/cards/cards.selectors\";\nimport {\n  adjustCounterToken,\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  flipCards,\n  hoverCard,\n  hoverLeaveCard,\n  selectCard,\n  selectMultipleCards,\n  togglePanMode,\n  toggleSelectCard,\n  toggleToken,\n  unselectAllCards,\n  unselectCard,\n} from \"./features/cards/cards.slice\";\nimport {\n  addCardStack,\n  fetchDecklistById,\n  pullCardOutOfCardStack,\n  startCardMove,\n  shuffleStack,\n} from \"./features/cards/cards.thunks\";\nimport { getGame, getPlayerColors } from \"./features/game/game.selectors\";\nimport {\n  connectToRemoteGame,\n  updatePosition,\n  updateZoom,\n} from \"./features/game/game.slice\";\n\nimport {\n  moveCounter,\n  removeCounter,\n  updateCounterValue,\n} from \"./features/counters/counters.slice\";\nimport { addNewCounter } from \"./features/counters/counters.thunks\";\nimport { resetApp } from \"./store/global.actions\";\nimport { RootState } from \"./store/rootReducer\";\nimport { getCurrentCounters } from \"./features/counters/counters.selectors\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    playerColors: getPlayerColors(state),\n    cards: getCards(state),\n    cardsData: getCardsDataEntities(state),\n    showPreview: shouldShowPreview(state),\n    panMode: getPanMode(state),\n    gameState: getGame(state),\n    counters: getCurrentCounters(state),\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, {\n  cardMove,\n  endCardMove,\n  exhaustCard,\n  loadCardsData,\n  selectCard,\n  unselectCard,\n  toggleSelectCard,\n  selectMultipleCards,\n  startCardMove,\n  unselectAllCards,\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n  flipCards,\n  shuffleStack,\n  fetchDecklistById,\n  updateZoom,\n  updatePosition,\n  resetApp,\n  addCardStack,\n  toggleToken,\n  adjustCounterToken,\n  pullCardOutOfCardStack,\n  addNewCounter,\n  updateCounterValue,\n  removeCounter,\n  moveCounter,\n  connectToRemoteGame,\n  undo: ActionCreators.undo,\n  redo: ActionCreators.redo,\n})(App);\n\nexport default AppContainer;\n","import { Vector2d } from \"konva/types/types\";\nimport { Action } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { addNewCounterWithId } from \"./counters.actions\";\n\nexport const addNewCounter = (\n  pos: Vector2d\n): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch) => {\n  const payloadWithId = {\n    pos,\n    id: uuidv4(),\n  };\n  dispatch(addNewCounterWithId(payloadWithId));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport undoable, { excludeAction, groupByActionTypes } from \"redux-undo\";\nimport cardsData from \"../features/cards-data/cards-data.slice\";\nimport { startCardMoveWithSplitStackId } from \"../features/cards/cards.actions\";\nimport cards, {\n  cardMove,\n  hoverCard,\n  hoverLeaveCard,\n} from \"../features/cards/cards.slice\";\nimport game from \"../features/game/game.slice\";\n\nimport counters, { moveCounter } from \"../features/counters/counters.slice\";\n\nconst rootReducer = combineReducers({\n  game,\n  counters: undoable(counters, {\n    limit: 20,\n    groupBy: groupByActionTypes([moveCounter.type]),\n  }),\n  cards: undoable(cards, {\n    limit: 20,\n    filter: excludeAction([\n      startCardMoveWithSplitStackId.type,\n      cardMove.type,\n      hoverCard.type,\n      hoverLeaveCard.type,\n    ]),\n  }),\n  cardsData,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import Peer from \"peerjs\";\nimport { myPeerRef } from \"../constants/app-constants\";\nimport {\n  hoverCard,\n  hoverLeaveCard,\n  togglePanMode,\n} from \"../features/cards/cards.slice\";\nimport {\n  connectToRemoteGame,\n  setPlayerColor,\n  updatePosition,\n  updateZoom,\n} from \"../features/game/game.slice\";\nimport { receiveRemoteGameState } from \"./global.actions\";\n\nconst DEBUG = false;\n\nconst blacklistRemoteActions = {\n  [connectToRemoteGame.type]: true,\n  [updatePosition.type]: true,\n  [updateZoom.type]: true,\n  [hoverCard.type]: true,\n  [hoverLeaveCard.type]: true,\n  [togglePanMode.type]: true,\n  [receiveRemoteGameState.type]: true,\n};\n\nconst log = (...args: any[]) => {\n  if (DEBUG) {\n    console.log(args[0], args[1]);\n  }\n};\n\nconst setupConnection = (conn: any, storeAPI: any) => {\n  conn.on(\"data\", (data: any) => {\n    if (!data.INITIAL_STATE_MSG) {\n      log(\"recieved remote action\", data);\n      data.REMOTE_ACTION = true;\n      log(\"dispatching remote action\", data);\n      storeAPI.dispatch(data);\n    } else {\n      console.log(\"going to replace (most of) state with\", data.state);\n      setTimeout(() => {\n        storeAPI.dispatch(receiveRemoteGameState(data.state));\n      }, 0);\n    }\n  });\n};\n\nexport const peerJSMiddleware = (storeAPI: any) => {\n  const cgpPeer = new Peer(undefined, { debug: 3 });\n  let activeCon: Peer.DataConnection;\n  cgpPeer.on(\"error\", (err) => {\n    console.error(\"*****************Server error\");\n    console.error(err);\n  });\n\n  cgpPeer.on(\"disconnected\", () => {\n    console.log(\"****Peer server connection disconnected\");\n  });\n\n  cgpPeer.on(\"open\", (id) => {\n    console.log(\"My peer ID is: \" + id);\n  });\n\n  cgpPeer.on(\"connection\", (conn) => {\n    console.log(\"Connection received!\");\n    activeCon = conn;\n    setupConnection(activeCon, storeAPI);\n\n    activeCon.on(\"open\", () => {\n      console.log(\"connection ready for data\");\n      log(\"going to send initial state\", storeAPI.getState());\n      activeCon.send({\n        INITIAL_STATE_MSG: true,\n        state: storeAPI.getState(),\n      });\n      // TODO: more complicated logic to handle multiple connections. Right now\n      // this just changes the connecting client to blue\n      const setPlayerColorAction = setPlayerColor({\n        ref: activeCon.metadata.ref,\n        color: \"blue\",\n      });\n      activeCon.send(setPlayerColorAction);\n      activeCon.send(\n        setPlayerColor({\n          ref: myPeerRef,\n          color: \"red\",\n        })\n      );\n      storeAPI.dispatch(setPlayerColorAction);\n    });\n\n    activeCon.on(\"error\", (err) => {\n      console.error(\"****************Connection error:\", err);\n    });\n\n    activeCon.on(\"close\", () => {\n      console.log(\"******connection closed for ref \" + activeCon.metadata.ref);\n    });\n\n    activeCon.peerConnection.onconnectionstatechange = (ev: Event) => {\n      console.log(`connection state changed`);\n      console.log(ev);\n      console.log(activeCon.peerConnection.connectionState);\n      if (\n        activeCon.peerConnection.connectionState === \"closed\" ||\n        activeCon.peerConnection.connectionState === \"disconnected\"\n      ) {\n        console.log(\n          \"CLEARING CLIENT OWNED CARDS for \" + activeCon.metadata.ref\n        );\n      }\n    };\n  });\n  return (next: any) => (action: any) => {\n    log(\"received local action\", action);\n\n    // If this isn't a REMOTE action, add our ref onto it\n    if (!action.REMOTE_ACTION) {\n      action.ACTOR_REF = myPeerRef;\n    } else if (!action.ACTOR_REF) {\n      console.error(`Received a REMOTE action without an ACTOR_REF:`);\n      console.log(action);\n    }\n\n    if (action.type === connectToRemoteGame.type) {\n      console.log(\"going to connect to peer \" + action.payload);\n      activeCon = cgpPeer.connect(action.payload, {\n        metadata: { ref: myPeerRef },\n      });\n      setupConnection(activeCon, storeAPI);\n    }\n\n    if (\n      !action.REMOTE_ACTION &&\n      !!activeCon &&\n      !blacklistRemoteActions[action.type]\n    ) {\n      log(\"going to send action to peer!\");\n      activeCon.send(action);\n    }\n\n    return next(action);\n  };\n};\n","import throttle from \"lodash.throttle\";\nimport {\n  configureStore as rtkConfigureStore,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport rootReducer from \"./rootReducer\";\nimport { saveState } from \"./localStorage\";\nimport { peerJSMiddleware } from \"./peer-js-redux-middleware\";\n\nconst customizedMiddleware = getDefaultMiddleware({\n  thunk: true,\n  immutableCheck: false,\n  serializableCheck: false,\n}).concat(peerJSMiddleware);\n\nexport default function configureStore() {\n  console.log(\"configuring store. NODE_ENV is \" + process.env.NODE_ENV);\n  const store = rtkConfigureStore({\n    reducer: rootReducer,\n    middleware: customizedMiddleware,\n    devTools: process.env.NODE_ENV !== \"production\",\n  });\n\n  store.subscribe(\n    throttle(() => {\n      saveState(store.getState());\n    }, 1000)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}